       1                                         .title vtbr - terminal microcode
       2                                
       3                                ;--
       4                                ;-- Copyright (c) 2008-2021 Sytse van Slooten
       5                                ;--
       6                                ;-- Permission is hereby granted to any person obtaining a copy of these VHDL source files and
       7                                ;-- other language source files and associated documentation files ("the materials") to use
       8                                ;-- these materials solely for personal, non-commercial purposes.
       9                                ;-- You are also granted permission to make changes to the materials, on the condition that this
      10                                ;-- copyright notice is retained unchanged.
      11                                ;--
      12                                ;-- The materials are distributed in the hope that they will be useful, but WITHOUT ANY WARRANTY;
      13                                ;-- without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
      14                                ;--
      15 000000                         lc       =.
      16 000000 000167  000774                   jmp t42
      17                                ;
      18                                ; -------------------------------------------------------------------
      19                                ;
      20                                ; misc definitions
      21                                ;
      22                                ; -------------------------------------------------------------------
      23                                ;
      24 000000                         r0       = %0
      25 000001                         r1       = %1
      26 000002                         r2       = %2
      27 000003                         r3       = %3
      28 000004                         r4       = %4
      29 000005                         r5       = %5
      30 000006                         r6       = %6
      31 000007                         r7       = %7
      32 000006                         sp       = %6
      33 000007                         pc       = %7
      34                                ;
      35                                ; serial port
      36                                ;
      37 177560                         rcsr     = 177560                 ; serial port receive csr
      38 177562                         rbuf     = 177562                 ; serial port receive buffer
      39 177564                         xcsr     = 177564                 ; serial port transmit csr
      40 177566                         xbuf     = 177566                 ; serial port transmit buffer
      41                                ;
      42                                ; vga component control registers
      43                                ;
      44 140000                         vgacur   = 140000                 ; cursor address - pointer to cursor position in buffer space
      45 140002                         vgacr    = 140002                 ; control register - flag bits
      46 140004                         vgash0   = 140004                 ; shade line 0 value
      47 140006                         vgash1   = 140006                 ; shade line 1 value
      48 140010                         vgaxp    = 140010                 ; x position for strip charts
      49 140012                         vgavtt   = 140012                 ; vt type - 100 or 105
      50 140014                         vgaact   = 140014                 ; activity counter
      51 140014                         vgaacl   = 140014                 ; activity counter low byte - count keyboard activity
      52 140015                         vgaach   = 140015                 ; activity counter high byte - count serial receive activity
      53 140016                         vgadb    = 140016                 ; debug output for logic analyzer capture
      54 140016                         vgadbl   = 140016                 ; debug output low byte
      55 140017                         vgadbh   = 140017                 ; debug output high byte
      56 140040                         vgadwh   = 140040                 ; double width/double height flags
      57                                ;
      58                                ; parser states - see vt100.net at https://vt100.net/emu/dec_ansi_parser for explanation
      59                                ;
      60 000000                         psg      = 0                      ; ground
      61 000002                         pscsip   = 2                      ; csi param
      62 000004                         pscsii   = 4                      ; csi ignore
      63 000006                         pscsin   = 6                      ; csi intermediate
      64 000010                         pscsie   = 10                     ; csi entry
      65 000012                         psei     = 12                     ; escape intermediate
      66 000014                         psesc    = 14                     ; escape
      67 000016                         psosc    = 16                     ; osc string (not used yet)
      68 000020                         psstr    = 20                     ; sos/pm/apc string (not used yet)
      69 000022                         psdcse   = 22                     ; dcs entry (not used yet)
      70 000024                         psdcsp   = 24                     ; dcs param (not used yet)
      71 000026                         psdcsi   = 26                     ; dcs ignore (not used yet)
      72 000030                         psdcsn   = 30                     ; dcs intermediate (not used yet)
      73 000032                         psdcst   = 32                     ; dcs passthrough (not used yet)
      74 000034                         psdummy  = 34                     ; dummy to make table size a power of 2
      75                                ;
      76                                ; screen coordinate constants
      77                                ;
      78 000001                         colmin   = 1                      ; the minimum column address
      79 000120                         colmax   = 120                    ; the maximum column address, 80 decimal
      80 000050                         colhmx   = 50                     ; half colmax, 40 decimal - for double-width lines
      81 000001                         rowmin   = 1                      ; minimum row number
      82 000030                         rowmax   = 30                     ; maximum row number, 24 decimal
      83 000001                         dtmarg   = 1                      ; default top margin row number
      84 000030                         dbmarg   = 30                     ; default bottom margin row number
      85 000030                         dwsize   = 30                     ; default window/scroll area size
      86                                ;
      87                                ; character set ids
      88                                ;
      89 000101                         chruk    = 101                    ; uk special set - pound signal instead of dollar
      90 000102                         chrasc   = 102                    ; default set
      91 000060                         chrgra   = 60                     ; default set with graphics instead of lower case
      92 000061                         chra1    = 61                     ; alternate rom standard (same as default for now)
      93 000062                         chra2    = 62                     ; alternate rom special (same as default for now)
      94                                ;
      95                                ; max csi sequence parameters
      96                                ;
      97 000016                         mxcsip   = 16                     ; actually: the max byte offset of the last parm.
      98                                ;
      99                                ; -------------------------------------------------------------------
     100                                ; -------------------------------------------------------------------
     101                                ;
     102                                ; writable data
     103                                ;
     104                                ; -------------------------------------------------------------------
     105                                ; -------------------------------------------------------------------
     106                                ;
     107                                ; this source is translated into vtbrt42.vhd - a blockram component that has an
     108                                ; extra trick in it: only the bytes 0-1000 are writable. writes to higher addresses
     109                                ; are silently ignored. Thus, code in the 1000 and up region can not be self modifying,
     110                                ; and all variable data must be below address 1000.
     111                                ;
     112                                ; low (writable) data layout
     113                                ;
     114                                ; +-------------------------+ 0
     115                                ; | vector area             |
     116                                ; +-------------------------+ 100
     117                                ; | rcvbuf                  |
     118                                ; | ps2buf                  |
     119                                ; +-------------------------+
     120                                ; | variables               |
     121                                ; +-------------------------+ <=700
     122                                ; | stack                   |
     123                                ; +-------------------------+ 1000
     124                                ;
     125                                ;
     126                                ;
     127                                ; -------------------------------------------------------------------
     128                                ;
     129                                ; reserve space for vectors
     130                                ;
     131                                ; the cpu that runs this is 11/20 - no mmu, no pirq, no fpu, and the highest vector on the bus
     132                                ; is for the ps/2 keyboard peripheral @ 70 - only the first 100(oct) bytes need to be reserved
     133                                ;
     134 000100                                  .=lc+100
     135                                ;
     136                                ; buffers
     137                                ;
     138 000200                         rcvbln   = 200
     139 000100                         rcvbuf:  .blkb rcvbln             ; circular buffer for characters received from the serial interface
     140 000040                         ps2bln   = 40
     141 000300                         ps2buf:  .blkb ps2bln             ; circular buffer for codes received from the keyboard
     142                                ;
     143                                ;
     144                                ;
     145 000340 000000                  rcvbfc:  .word 0                  ; actual receive buffer count
     146 000120                         rcvbhi   = 120                    ; receive buffer high water mark
     147 000020                         rcvblo   = 20                     ; receive buffer low water mark
     148 000342    000                  xoff:    .byte 0                  ; current xon/xoff state
     149 000343    000                  xoffm:   .byte 0                  ; current xon/xoff manual state
     150                                ;
     151                                ; pointers in circular buffers
     152                                ;
     153                                         .even
     154 000344 000000                  rcvcons: .word 0
     155 000346 000000                  rcvprod: .word 0
     156 000350 000000                  ps2cons: .word 0
     157 000352 000000                  ps2prod: .word 0
     158                                ;
     159                                ; -------------------------------------------------------------------
     160                                ; -------------------------------------------------------------------
     161                                ;
     162                                ; variables
     163                                ;
     164                                ; -------------------------------------------------------------------
     165                                ; -------------------------------------------------------------------
     166                                ;
     167                                ;
     168                                ; current status: cursor position, lcf, attributes, charset
     169                                ;
     170                                         .even
     171 000354 000000                  curr:    .word 0                  ; row
     172 000356 000000                  scurr:   .word 0                  ; saved row
     173 000360 000000                  curc:    .word 0                  ; col
     174 000362 000000                  scurc:   .word 0                  ; saved col
     175 000364    000                  lcf:     .byte 0                  ; last-column flag
     176 000365    000                  slcf:    .byte 0                  ; saved lcf
     177                                ;
     178                                ; atth: current attribute byte
     179                                ;
     180 000366    000                  atth:    .byte 0                  ; attribute high byte
     181 000367    000                  satth:   .byte 0                  ; saved atth
     182                                ;
     183                                ; character sets
     184                                ;
     185 000370    000                  g0set:   .byte 0                  ; set0
     186 000371    000                  g1set:   .byte 0                  ; set1
     187 000372    000                  chrset:  .byte 0                  ; current
     188 000373    000                  schrst:  .byte 0                  ; saved char set
     189                                ;
     190                                ; scroll window
     191                                ;
     192                                         .even
     193 000374 000001                  tmarg:   .word dtmarg             ; top margin
     194 000376 000030                  bmarg:   .word dbmarg             ; bottom margin
     195 000400 000030                  wsize:   .word dwsize             ; window size
     196                                ;
     197                                ; tab stops
     198                                ;
     199                                ;              1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
     200 000402    000     000     000  tabtab:  .byte 0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
         000405    000     000     000  
         000410    000     000     001  
         000413    000     000     000  
         000416    000     000     000  
         000421    000     001     000  
         000424    000     000     000  
         000427    000     000     000  
         000432    001     000     000  
         000435    000     000     000  
         000440    000     000     001  
         000443    000     000     000  
         000446    000     000     000  
         000451    000                  
     201 000452    001     000     000           .byte 1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
         000455    000     000     000  
         000460    000     000     001  
         000463    000     000     000  
         000466    000     000     000  
         000471    000     001     000  
         000474    000     000     000  
         000477    000     000     000  
         000502    001     000     000  
         000505    000     000     000  
         000510    000     000     001  
         000513    000     000     000  
         000516    000     000     000  
         000521    000                  
     202                                ;
     203                                ; keyboard state flags
     204                                ;
     205 000522    000                  ps2up:   .byte 0                  ; nonzero if last scancode was a f0 - key up event
     206 000523    000                  ps2ex:   .byte 0                  ; nonzero if last scancode was a e0 - extended key
     207 000524    000                  ps2lc:   .byte 0                  ; nonzero if left control key is down
     208 000525    000                  ps2rc:   .byte 0                  ; nonzero if right control key is down
     209 000526    000                  ps2ls:   .byte 0                  ; nonzero if left shift key is down
     210 000527    000                  ps2rs:   .byte 0                  ; nonzero if right shift key is down
     211 000530    000                  ps2cl:   .byte 0                  ; nonzero if caps lock is on
     212                                ;
     213                                ; vt52 mode flag
     214                                ;
     215 000531    000                  vt52:    .byte 0                  ; master vt52 mode flag
     216 000532    000                  vt52yl:  .byte 0                  ; temp storage for ESCYlc direct cursor address sequence
     217                                ;
     218                                ; graphics data
     219                                ;
     220 000533    000                  vt105g:  .byte 0                  ; graphics mode
     221 000534    000                  grshl1:  .byte 0                  ; shade line load flag marker
     222 000535    000                           .even
     223 000536 000000                  gpload:  .word 0                  ; address of processing routine
     224 000540 000000                  gpch1:   .word 0                  ; value of first character in sequence
     225 000542 000000                  gplx:    .word 0                  ; x-coord for loading graph memories
     226                                ;
     227                                ; mode flags
     228                                ;
     229 000544    000                  anslnm:  .byte 0                  ; line feed/new line mode
     230 000545    000                  ansins:  .byte 0                  ; insert/replace : 0=replace,1=insert
     231 000546    000                  decawm:  .byte 0                  ; autowrap mode
     232 000547    000                  decckm:  .byte 0                  ; cursor keys mode
     233 000550    000                  deckpam: .byte 0                  ; keypad application mode
     234 000551    000                  deccolm: .byte 0                  ; column mode - 80 or 132. Default 80, 132 is not supported
     235 000552    000                  decom:   .byte 0                  ; origin mode
     236                                ;
     237                                ; escape intermediate char
     238                                ;
     239 000553    000                  eichar:  .byte 0
     240                                         .even
     241                                ;
     242                                ; csi parameters
     243                                ;
     244 000554 000000                  parmc:   .word 0
     245 000556 000000  000000  000000  parmt:   .word 0,0,0,0,0,0,0,0,0  ; the raw parm values (converted from decimal characters, or default: 0)
         000564 000000  000000  000000  
         000572 000000  000000  000000  
     246 000600 000000                  parm1:   .word 0                  ; normalized parm 1 - default 1 if missing or 0
     247 000602 000000                  parm2:   .word 0                  ; normalized parm 2
     248                                ;
     249                                ; parse state
     250                                ;
     251 000604 000000                  pstate:  .word 0                       ;
     252                                ;
     253                                ; -------------------------------------------------------------------
     254                                ;
     255                                ; start of code
     256                                ;
     257                                ; -------------------------------------------------------------------
     258                                ;
     259 001000                                  .=lc+1000
     260                                t42:
     261 001000 012737  000340  177776           mov #340,@#177776        ; set psw prio to 7 - block interrupts
     262 001006 012706  001000                   mov #1000,sp
     263                                ;
     264                                ; setup receive buffers
     265                                ;
     266 001012 005067  177326                   clr rcvcons              ; consume equal produce means buffer empty
     267 001016 005067  177324                   clr rcvprod              ; receive is what we receive on our slu port
     268 001022 005067  177312                   clr rcvbfc               ; clear buffer count
     269 001026 105067  177310                   clrb xoff                ; clear xon/xoff state
     270 001032 105067  177305                   clrb xoffm               ; clear xon/xoff manual state
     271 001036 005067  177306                   clr ps2cons              ; first we consume, then we produce
     272 001042 005067  177304                   clr ps2prod              ; xmit is what we received from the ps2 port
     273                                ;
     274                                ; setup interrupt vectors
     275                                ;
     276 001046 012737  014666  000060           mov #ivecrcv,@#60        ; slu receive vector
     277 001054 012737  000340  000062           mov #340,@#62            ; 340 - isr runs disabled
     278 001062 012737  015030  000064           mov #ivecxmt,@#64        ; slu xmit vector (not used)
     279 001070 012737  000340  000066           mov #340,@#66            ; 340 - isr runs disabled
     280 001076 012737  015032  000070           mov #ivecps2,@#70        ; ps2 receive vector
     281 001104 012737  000340  000072           mov #340,@#72            ; 340 - isr runs disabled
     282 001112 012737  000100  177560           mov #100,@#rcsr          ; set interrupt enable in slu
     283 001120 012737  000100  150000           mov #100,@#150000        ; set interrupt enable in ps2
     284 001126 012737  000000  177776           mov #0,@#177776          ; allow interrupts on all levels
     285                                ;
     286                                ; setup frame buffer etc
     287                                ;
     288 001134 005067  177444                   clr pstate
     289 001140 004767  004050                   jsr pc,clrdwh            ; clear double height/double width
     290 001144 012703  100000                   mov #100000,r3           ; start of buffer
     291                                1$:
     292 001150 012723  000040                   mov #40,(r3)+            ; fill the buffer with spaces
     293 001154 020327  107400                   cmp r3,#107400           ; at the end yet?
     294 001160 001373                           bne 1$                   ; branch if no
     295                                
     296 001162 012702  015124                   mov #hello,r2            ; set up for hello world
     297 001166 012703  100000                   mov #100000,r3           ; at the start of the screen
     298                                2$:
     299 001172 112200                           movb (r2)+,r0            ; load char
     300 001174 010023                           mov r0,(r3)+             ; write in buffer
     301 001176 001375                           bne 2$                   ; end of the string done yet? branch if not
     302 001200 012743  000040                   mov #40,-(r3)            ; erase error char caused by zero terminated string
     303                                
     304 001204 022737  000151  140012           cmp #105.,@#vgavtt       ; check for vt type
     305 001212 001003                           bne 3$
     306 001214 012737  000065  100044           mov #65,@#100044         ; move type into banner
     307                                3$:
     308                                ;
     309                                ; init more
     310                                ;
     311 001222 105067  177274                   clrb ps2up               ; clear up/break status
     312 001226 105067  177271                   clrb ps2ex               ; clear extended status
     313 001232 105067  177266                   clrb ps2lc               ; clear left control
     314 001236 105067  177263                   clrb ps2rc               ; clear right control
     315 001242 105067  177260                   clrb ps2ls               ; clear left shift
     316 001246 105067  177255                   clrb ps2rs               ; clear right shift
     317 001252 105067  177252                   clrb ps2cl               ; clear caps
     318 001256 004767  012240                   jsr pc,gbclr             ; clear graph memories
     319 001262 012767  000003  177064           mov #3,curr              ; init cursor position, should probably be 1,1 at some point but the hello world is there
     320 001270 012767  000001  177062           mov #1,curc              ; init column
     321 001276 012767  000001  177052           mov #1,scurr             ; init saved row
     322 001304 012767  000001  177050           mov #1,scurc             ; init saved col
     323 001312 112767  000102  177052           movb #chrasc,chrset      ; default char set is ascii
     324 001320 112767  000102  177042           movb #chrasc,g0set       ; set g0 set to ascii default too
     325 001326 112767  000102  177035           movb #chrasc,g1set       ; set g1 set to ascii default too
     326 001334 112767  000102  177031           movb #chrasc,schrst      ; init saved char set
     327 001342 012767  000001  177024           mov #dtmarg,tmarg        ; default scroll window from line 1
     328 001350 012767  000030  177020           mov #dbmarg,bmarg        ; to 24
     329 001356 012767  000030  177014           mov #dwsize,wsize        ; init wsize
     330 001364 105067  176776                   clrb atth                ; init attribute
     331 001370 105067  176773                   clrb satth               ; init saved attribute
     332 001374 105067  177152                   clrb decom               ; clear origin mode
     333 001400 112767  000001  177140           movb #1,decawm           ; set awm, seems the most reasonable default
     334 001406 105067  177133                   clrb ansins              ; clear insert mode
     335 001412 105067  177126                   clrb anslnm              ; clear new line mode
     336 001416 105067  177127                   clrb deccolm             ; clear 132-column mode (not implemented for now)
     337 001422 105067  177121                   clrb decckm              ; clear cursor key mode (not implemented for now)
     338 001426 105067  176732                   clrb lcf                 ; clear last column flag
     339 001432 105067  176727                   clrb slcf                ; clear saved last column flag
     340 001436 105067  177071                   clrb vt105g              ; clear graphics mode flag
     341 001442 105067  177066                   clrb grshl1              ; clear shade load flag
     342 001446 105067  177057                   clrb vt52                ; clear vt52 mode flag
     343 001452 105067  177054                   clrb vt52yl              ; clear vt52 direct cursor address temp storage
     344 001456 105067  177066                   clrb deckpam             ; clear keypad application mode
     345 001462 005037  140002                   clr @#vgacr              ; set all control register flags off
     346 001466 005037  140004                   clr @#vgash0             ; clear shade line 0
     347 001472 005037  140006                   clr @#vgash1             ; clear shade line 1
     348 001476 005037  140014                   clr @#vgaact             ; clear activity counter
     349                                ;
     350                                ; mainline code
     351                                ;
     352                                4$:
     353 001502 004767  007346                   jsr pc,fba               ; get buffer address of current pos
     354 001506 010037  140000                   mov r0,@#vgacur          ; write cursor position into control register
     355                                ;
     356                                ; check keyboard for input
     357                                ;
     358 001512 004767  012170                   jsr pc,ps2getc           ; try to read keyboard
     359 001516 005700                           tst r0                   ; anything?
     360 001520 001420                           beq 6$                   ; branch if not
     361 001522 105237  140014                   incb @#vgaacl            ; show activity
     362 001526 004767  012462                   jsr pc,ps2xlt            ; try to translate scan code into character or code for routine
     363 001532 005700                           tst r0                   ; anything?
     364 001534 001412                           beq 6$                   ; branch if not
     365 001536 120127  000340                   cmpb r1,#kcminc          ; did ps2xlt return a character or a function code?
     366 001542 103403                           blo 5$                   ; branch if character
     367 001544 004767  001476                   jsr pc,kcproc            ; process key codes
     368 001550 000754                           br 4$                    ; done
     369                                5$:
     370 001552 010100                           mov r1,r0                ; regular char, move it to r0
     371 001554 004767  013234                   jsr pc,xmit              ; and xmit to the host
     372 001560 000750                           br 4$                    ; done
     373                                ;
     374                                ; check serial port for input
     375                                ;
     376                                6$:
     377 001562 004767  011766                   jsr pc,rcvgetc           ; try to read a char
     378 001566 005700                           tst r0                   ; did we get one?
     379 001570 001744                           beq 4$                   ; r0 zero means no
     380 001572 105237  140015                   incb @#vgaach            ; show activity
     381 001576 042701  177600                   bic #177600,r1           ; make sure only 7 bits left
     382 001602 004767  010224                   jsr pc,cntrl             ; process control character
     383 001606 005701                           tst r1                   ; did cntrl clear r1?
     384 001610 001734                           beq 4$                   ; yes - it dealt with the character
     385                                7$:
     386 001612 116100  015216                   movb ptrans(r1),r0       ; check state transition table
     387 001616 005700                           tst r0                   ; zero means not
     388 001620 001402                           beq 8$
     389 001622 010067  176756                   mov r0,pstate            ; load new state
     390                                8$:
     391 001626 016700  176752                   mov pstate,r0            ; load parser state
     392 001632 042700  177761                   bic #177761,r0           ; make sure even and in range
     393 001636 062700  015156                   add #ptab,r0             ; add start of table
     394 001642 011000                           mov (r0),r0              ; load address of parser routine from table
     395 001644 004710                           jsr pc,(r0)              ; go there
     396                                
     397 001646 000715                           br 4$
     398                                ;
     399                                ; -------------------------------------------------------------------
     400                                ;
     401                                ; gparse - parse graphics instructions
     402                                ;
     403                                gparse:
     404 001650 120127  000100                   cmpb r1,#100             ; @ - lowest value graphics mode designator
     405 001654 103415                           blo 10$                  ; lower?
     406 001656 120127  000114                   cmpb r1,#114             ; L - highest value
     407 001662 101012                           bhi 10$                  ; higher?
     408 001664 162701  000100                   sub #100,r1              ; base from 0
     409 001670 006301                           asl r1                   ; make word index
     410 001672 016101  002050                   mov gpt(r1),r1           ; load address
     411 001676 010167  176634                   mov r1,gpload            ; set routine
     412 001702 005067  176632                   clr gpch1
     413 001706 000456                           br 90$
     414                                10$:
     415 001710 120127  000040                   cmpb r1,#40              ; space - lowest value graphics value
     416 001714 103450                           blo 80$                  ; lower?
     417 001716 120127  000077                   cmpb r1,#77              ; ? - highest value
     418 001722 101045                           bhi 80$                  ; higher?
     419 001724 005767  176610                   tst gpch1                ; first char already set?
     420 001730 001015                           bne 20$                  ; branch if yes
     421 001732 010167  176602                   mov r1,gpch1             ; set it now
     422 001736 016700  176574                   mov gpload,r0            ; load routine address
     423 001742 020027  002132                   cmp r0,#gcr0             ; is it A?
     424 001746 001404                           beq 15$                  ; yes
     425 001750 020027  002666                   cmp r0,#gcr1             ; is it I?
     426 001754 001401                           beq 15$                  ; yes
     427 001756 000432                           br 90$                   ; not one of those, done here
     428                                15$:
     429 001760 004710                           jsr pc,(0)               ; for A or I commands, call already after the first char
     430 001762 000430                           br 90$                   ; done for now
     431                                20$:
     432 001764 042701  177740                   bic #177740,r1           ; leave only 5 bits
     433 001770 006301                           asl r1                   ; shift left 1
     434 001772 006301                           asl r1                   ; shift left 2
     435 001774 006301                           asl r1                   ; shift left 3
     436 001776 006301                           asl r1                   ; shift left 4
     437 002000 006301                           asl r1                   ; shift left 5
     438 002002 042767  177740  176530           bic #177740,gpch1        ; make sure only low 5 bits remain set in gpch1
     439 002010 066701  176524                   add gpch1,r1             ; add in low char from gpch1
     440 002014 005067  176520                   clr gpch1                ; and make sure it is cleared for the next round
     441 002020 005767  176512                   tst gpload               ; check if gpload set?
     442 002024 001404                           beq 80$                  ; no, error exit
     443 002026 016700  176504                   mov gpload,r0            ; load routine address
     444 002032 004710                           jsr pc,(r0)              ; go there
     445 002034 000403                           br 90$                   ; and done here
     446                                80$:
     447 002036 005067  176476                   clr gpch1                ; clear first char, start from start
     448 002042 000207                           rts pc                   ; unhappy return
     449                                90$:
     450 002044 005000                           clr r0                   ; show we handled things
     451 002046 000207                           rts pc                   ; happy return path
     452                                ;
     453                                ; -------------------------------------------------------------------
     454                                ;
     455                                ; routine table for graphics parser
     456                                ;
     457 002050 002102                  gpt:    .word gsh                 ; @ - shade line
     458 002052 002132                          .word gcr0                ; A - control register 0
     459 002054 002450                          .word ggr0                ; B - graph 0
     460 002056 002522                          .word ggm0                ; C - marker 0
     461 002060 002576                          .word ggh                 ; D - horizontal line
     462 002062 002652                          .word gno                 ; E
     463 002064 002652                          .word gno                 ; F
     464 002066 002652                          .word gno                 ; G
     465 002070 002654                          .word gsx                 ; H - starting X
     466 002072 002666                          .word gcr1                ; I - control register 1
     467 002074 003054                          .word ggr1                ; J - graph 1
     468 002076 003116                          .word ggm1                ; K - marker 1
     469 002100 003172                          .word ggv                 ; L - vertical line
     470                                ;
     471                                ; -------------------------------------------------------------------
     472                                ;
     473                                ; load shade line position
     474                                ;
     475                                gsh:
     476 002102 042701  177400                   bic #177400,r1           ; mask off high bits
     477 002106 105767  176422                   tstb grshl1              ; check flag
     478 002112 001003                           bne 10$                  ; if not clear, then we're loading sh1
     479 002114 010137  140004                   mov r1,@#vgash0          ; load sh0
     480 002120 000403                           br 90$
     481                                10$:
     482 002122 010137  140006                   mov r1,@#vgash1          ; load sh1
     483 002126 000400                           br 90$
     484                                90$:
     485 002130 000207                           rts pc
     486                                ;
     487                                ; -------------------------------------------------------------------
     488                                ;
     489                                ; cr0
     490                                ;
     491                                gcr0:
     492 002132 032701  000001                   bit #1,r1                ; check master enable bit
     493 002136 001404                           beq 10$                  ; branch if not on
     494 002140 052737  000001  140002           bis #1,@#vgacr           ; set it in the control register
     495 002146 000403                           br 11$
     496                                10$:
     497 002150 042737  000001  140002           bic #1,@#vgacr           ; clear it
     498                                11$:
     499                                ;
     500 002156 032701  000002                   bit #2,r1                ; graph0 enable bit
     501 002162 001404                           beq 20$                  ; branch if not on
     502 002164 052737  000002  140002           bis #2,@#vgacr           ; set it in the control register
     503 002172 000403                           br 21$
     504                                20$:
     505 002174 042737  000002  140002           bic #2,@#vgacr           ; clear it
     506                                21$:
     507                                ;
     508 002202 032701  000004                   bit #4,r1                ; graph1 enable bit
     509 002206 001404                           beq 30$                  ; branch if not on
     510 002210 052737  000004  140002           bis #4,@#vgacr           ; set it in the control register
     511 002216 000403                           br 31$
     512                                30$:
     513 002220 042737  000004  140002           bic #4,@#vgacr           ; clear it
     514                                31$:
     515                                ;
     516 002226 032701  000010                   bit #10,r1               ; hist0 enable bit
     517 002232 001404                           beq 40$                  ; branch if not on
     518 002234 052737  000010  140002           bis #10,@#vgacr          ; set it in the control register
     519 002242 000403                           br 41$
     520                                40$:
     521 002244 042737  000010  140002           bic #10,@#vgacr          ; clear it
     522                                41$:
     523                                ;
     524 002252 032701  000020                   bit #20,r1               ; hist1 enable bit
     525 002256 001404                           beq 50$                  ; branch if not on
     526 002260 052737  000020  140002           bis #20,@#vgacr          ; set it in the control register
     527 002266 000403                           br 51$
     528                                50$:
     529 002270 042737  000020  140002           bic #20,@#vgacr          ; clear it
     530                                51$:
     531                                ;
     532 002276 032701  000100                   bit #100,r1              ; graph0 ref shade line 0
     533 002302 001404                           beq 60$                  ; branch if not on
     534 002304 052737  002000  140002           bis #2000,@#vgacr        ; set it in the control register
     535 002312 000403                           br 61$
     536                                60$:
     537 002314 042737  002000  140002           bic #2000,@#vgacr        ; clear it
     538                                61$:
     539                                ;
     540 002322 005767  176212                   tst gpch1                ; check if the gpch1 is nonzero - then we've been called vt52-style, and then there is no 3rd byte
     541 002326 001047                           bne 999$                 ; branch if so
     542                                ;
     543 002330 032701  000200                   bit #200,r1              ; graph1 ref shade line 1
     544 002334 001404                           beq 70$                  ; branch if not on
     545 002336 052737  004000  140002           bis #4000,@#vgacr        ; set it in the control register
     546 002344 000403                           br 71$
     547                                70$:
     548 002346 042737  004000  140002           bic #4000,@#vgacr        ; clear it
     549                                71$:
     550                                ;
     551 002354 032701  000040                   bit #40,r1               ; set up to load shade line 0 or 1?
     552 002360 001404                           beq 80$                  ; branch if not on
     553 002362 112767  000001  176144           movb #1,grshl1           ; set flag
     554 002370 000402                           br 81$
     555                                80$:
     556 002372 105067  176136                   clrb grshl1              ; clear flag
     557                                81$:
     558                                ;
     559 002376 032701  000400                   bit #400,r1              ; single strip
     560 002402 001404                           beq 90$                  ; branch if not on
     561 002404 052737  010000  140002           bis #10000,@#vgacr       ; set it in the control register
     562 002412 000403                           br 91$
     563                                90$:
     564 002414 042737  010000  140002           bic #10000,@#vgacr       ; clear it
     565                                91$:
     566                                ;
     567 002422 032701  001000                   bit #1000,r1             ; dual strip
     568 002426 001404                           beq 100$                 ; branch if not on
     569 002430 052737  020000  140002           bis #20000,@#vgacr       ; set it in the control register
     570 002436 000403                           br 101$
     571                                100$:
     572 002440 042737  020000  140002           bic #20000,@#vgacr       ; clear it
     573                                101$:
     574                                ;
     575                                999$:
     576 002446 000207                           rts pc
     577                                ;
     578                                ; -------------------------------------------------------------------
     579                                ;
     580                                ; load graph0
     581                                ;
     582                                ggr0:
     583 002450 016700  176066                   mov gplx,r0              ; load last x coordinate
     584 002454 006300                           asl r0                   ; make word index
     585 002456 042700  176000                   bic #176000,r0           ; make doubly sure no inappropriate bits left
     586 002462 052700  110000                   bis #110000,r0           ; set bits for graph0
     587 002466 110110                           movb r1,(r0)             ; put it there
     588 002470 032737  020000  140002           bit #20000,@#vgacr       ; check the control register for dual strip mode
     589 002476 001010                           bne 10$                  ; dual strip - suspend update x coord until graph1 is loaded
     590 002500 005267  176036                   inc gplx                 ; increment x coord
     591 002504 042767  177000  176030           bic #177000,gplx         ; mask off anything over 511
     592 002512 016737  176024  140010           mov gplx,@#vgaxp         ; copy gplx into the control register
     593                                10$:
     594 002520 000207                           rts pc
     595                                ;
     596                                ; -------------------------------------------------------------------
     597                                ;
     598                                ; load graph markers 0
     599                                ;
     600                                ggm0:
     601 002522 022701  000777                   cmp #511.,r1             ; check for max value
     602 002526 103410                           blo 10$                  ; go to setting marks if higher
     603 002530 006301                           asl r1                   ; word index
     604 002532 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     605 002536 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     606 002542 142711  000001                   bicb #1,(r1)             ; clear the bit
     607 002546 000412                           br 90$
     608                                10$:
     609 002550 042701  177000                   bic #177000,r1           ; mask off high bits
     610 002554 006301                           asl r1                   ; word index
     611 002556 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     612 002562 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     613 002566 152711  000001                   bisb #1,(r1)             ; set the bit
     614 002572 000400                           br 90$
     615                                90$:
     616 002574 000207                           rts pc
     617                                ;
     618                                ; -------------------------------------------------------------------
     619                                ;
     620                                ; load or clear horizontal lines
     621                                ;
     622                                ggh:
     623 002576 022701  000777                   cmp #511.,r1             ; check for max value
     624 002602 103410                           blo 10$                  ; go to setting marks if higher
     625 002604 006301                           asl r1                   ; word index
     626 002606 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     627 002612 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     628 002616 142711  000010                   bicb #10,(r1)            ; clear the bit
     629 002622 000412                           br 90$
     630                                10$:
     631 002624 042701  177000                   bic #177000,r1           ; mask off high bits
     632 002630 006301                           asl r1                   ; word index
     633 002632 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     634 002636 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     635 002642 152711  000010                   bisb #10,(r1)            ; set the bit
     636 002646 000400                           br 90$
     637                                90$:
     638 002650 000207                           rts pc
     639                                ;
     640                                ; -------------------------------------------------------------------
     641                                ;
     642                                ; dummy placeholder
     643                                ;
     644                                gno:
     645 002652 000207                           rts pc
     646                                ;
     647                                ; -------------------------------------------------------------------
     648                                ;
     649                                ; set x coord for graph0/1 loading
     650                                ;
     651                                gsx:
     652 002654 010167  175662                   mov r1,gplx              ; store value in gplx, that's all there is to it
     653 002660 010137  140010                   mov r1,@#vgaxp           ; and set it in the control register too
     654 002664 000207                           rts pc
     655                                ;
     656                                ; -------------------------------------------------------------------
     657                                ;
     658                                ; process control register 1
     659                                ;
     660                                gcr1:
     661                                ;
     662 002666 032701  000001                   bit #1,r1                ; hline enable bit
     663 002672 001404                           beq 10$                  ; branch if not on
     664 002674 052737  000040  140002           bis #40,@#vgacr          ; set it in the control register
     665 002702 000403                           br 11$
     666                                10$:
     667 002704 042737  000040  140002           bic #40,@#vgacr          ; clear it
     668                                11$:
     669                                ;
     670 002712 032701  000002                   bit #2,r1                ; vline enable bit
     671 002716 001404                           beq 20$                  ; branch if not on
     672 002720 052737  000100  140002           bis #100,@#vgacr         ; set it in the control register
     673 002726 000403                           br 21$
     674                                20$:
     675 002730 042737  000100  140002           bic #100,@#vgacr          ; clear it
     676                                21$:
     677                                ;
     678 002736 032701  000004                   bit #4,r1                ; marker0 enable bit
     679 002742 001404                           beq 30$                  ; branch if not on
     680 002744 052737  000400  140002           bis #400,@#vgacr         ; set it in the control register
     681 002752 000403                           br 31$
     682                                30$:
     683 002754 042737  000400  140002           bic #400,@#vgacr         ; clear it
     684                                31$:
     685                                ;
     686 002762 032701  000010                   bit #10,r1               ; marker1 enable bit
     687 002766 001404                           beq 40$                  ; branch if not on
     688 002770 052737  001000  140002           bis #1000,@#vgacr        ; set it in the control register
     689 002776 000403                           br 41$
     690                                40$:
     691 003000 042737  001000  140002           bic #1000,@#vgacr        ; clear it
     692                                41$:
     693                                ;
     694 003006 032701  000020                   bit #20,r1               ; graph memories reset bit
     695 003012 001402                           beq 50$                  ; branch if not on
     696 003014 004767  010502                   jsr pc,gbclr             ; clear graph memories
     697                                50$:
     698                                ;
     699 003020 005767  175514                   tst gpch1                ; check for 3rd byte?
     700 003024 001012                           bne 999$                 ; if gpch1 is nonzero, then we're called for two bytes
     701                                ;
     702 003026 032701  000040                   bit #40,r1               ; rectangle/square bit
     703 003032 001404                           beq 60$                  ; branch if not on
     704 003034 052737  100000  140002           bis #100000,@#vgacr      ; set it
     705 003042 000403                           br 61$
     706                                60$:
     707 003044 042737  100000  140002           bic #100000,@#vgacr      ; clear it
     708                                61$:
     709                                ;
     710                                999$:
     711 003052 000207                           rts pc
     712                                ;
     713                                ; -------------------------------------------------------------------
     714                                ;
     715                                ; load graph1
     716                                ;
     717                                ggr1:
     718 003054 016700  175462                   mov gplx,r0              ; load last x coordinate
     719 003060 006300                           asl r0                   ; make word index
     720 003062 042700  176000                   bic #176000,r0           ; make doubly sure no inappropriate bits left
     721 003066 052700  112000                   bis #112000,r0           ; set bits for graph1
     722 003072 110110                           movb r1,(r0)             ; put it there
     723 003074 005267  175442                   inc gplx                 ; increment x coord
     724 003100 042767  177000  175434           bic #177000,gplx         ; mask off anything over 511
     725 003106 016737  175430  140010           mov gplx,@#vgaxp         ; copy gplx into the control register
     726 003114 000207                           rts pc
     727                                ;
     728                                ; -------------------------------------------------------------------
     729                                ;
     730                                ; load graph markers 1
     731                                ;
     732                                ggm1:
     733 003116 022701  000777                   cmp #511.,r1             ; check for max value
     734 003122 103410                           blo 10$                  ; go to setting marks if higher
     735 003124 006301                           asl r1                   ; word index
     736 003126 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     737 003132 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     738 003136 142711  000002                   bicb #2,(r1)             ; clear the bit
     739 003142 000412                           br 90$
     740                                10$:
     741 003144 042701  177000                   bic #177000,r1           ; mask off high bits
     742 003150 006301                           asl r1                   ; word index
     743 003152 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     744 003156 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     745 003162 152711  000002                   bisb #2,(r1)             ; set the bit
     746 003166 000400                           br 90$
     747                                90$:
     748 003170 000207                           rts pc
     749                                ;
     750                                ; -------------------------------------------------------------------
     751                                ;
     752                                ; load or clear vertical lines
     753                                ;
     754                                ggv:
     755 003172 022701  000777                   cmp #511.,r1             ; check for max value
     756 003176 103410                           blo 10$                  ; go to setting marks if higher
     757 003200 006301                           asl r1                   ; word index
     758 003202 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     759 003206 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     760 003212 142711  000004                   bicb #4,(r1)             ; clear the bit
     761 003216 000412                           br 90$
     762                                10$:
     763 003220 042701  177000                   bic #177000,r1           ; mask off high bits
     764 003224 006301                           asl r1                   ; word index
     765 003226 042701  176000                   bic #176000,r1           ; make sure only the low 10 bits are left
     766 003232 052701  110001                   bis #110001,r1           ; set bits for graph0/marker0 buffer, upper byte
     767 003236 152711  000004                   bisb #4,(r1)             ; set the bit
     768 003242 000400                           br 90$
     769                                90$:
     770 003244 000207                           rts pc
     771                                ;
     772                                ; -------------------------------------------------------------------
     773                                ;
     774                                ; kcproc - deal with keystrokes that require to xmit mult bytes
     775                                ;
     776                                kcproc:
     777 003246 042701  177400                   bic #177400,r1
     778 003252 162701  000340                   sub #kcminc,r1           ; subtract offset from code
     779 003256 042701  177700                   bic #177700,r1           ; make sure only 6 bits left
     780 003262 006301                           asl r1                   ; make word index
     781 003264 016100  004704                   mov kctab(r1),r0         ; find address of routine
     782 003270 004710                           jsr pc,(r0)              ; go there
     783 003272 000207                           rts pc
     784                                ;
     785                                ; left arrow
     786                                ;
     787                                fclar:
     788 003274 004767  001270                   jsr pc,xmitcsi           ; ESC [
     789 003300 012700  000104                   mov #104,r0              ; D
     790 003304 004767  011504                   jsr pc,xmit
     791 003310 000207                           rts pc
     792                                ;
     793                                ; down arrow
     794                                ;
     795                                fcdar:
     796 003312 004767  001252                   jsr pc,xmitcsi           ; ESC [
     797 003316 012700  000102                   mov #102,r0              ; B
     798 003322 004767  011466                   jsr pc,xmit
     799 003326 000207                           rts pc
     800                                ;
     801                                ; right arrow
     802                                ;
     803                                fcrar:
     804 003330 004767  001234                   jsr pc,xmitcsi           ; ESC [
     805 003334 012700  000103                   mov #103,r0              ; C
     806 003340 004767  011450                   jsr pc,xmit
     807 003344 000207                           rts pc
     808                                ;
     809                                ; up arrow
     810                                ;
     811                                fcuar:
     812 003346 004767  001216                   jsr pc,xmitcsi           ; ESC [
     813 003352 012700  000101                   mov #101,r0              ; A
     814 003356 004767  011432                   jsr pc,xmit
     815 003362 000207                           rts pc
     816                                ;
     817                                ; page down - there's no such thing on a real vt, so let's just do 20 down arrows
     818                                ;
     819                                fcpgdn:
     820 003364 012701  000024                   mov #20.,r1
     821                                10$:
     822 003370 004767  001174                   jsr pc,xmitcsi           ; ESC [
     823 003374 012700  000102                   mov #102,r0              ; B
     824 003400 004767  011410                   jsr pc,xmit
     825 003404 005301                           dec r1
     826 003406 001370                           bne 10$
     827 003410 000207                           rts pc
     828                                ;
     829                                ; page up - there's no such thing on a real vt, so let's just do 20 up arrows
     830                                ;
     831                                fcpgup:
     832 003412 012701  000024                   mov #20.,r1              ; weirdly, from the tests I've done it seems esc[20A is not accepted inbound. Hence 20 times esc[A
     833                                10$:
     834 003416 004767  001146                   jsr pc,xmitcsi           ; ESC [
     835 003422 012700  000101                   mov #101,r0              ; A
     836 003426 004767  011362                   jsr pc,xmit
     837 003432 005301                           dec r1
     838 003434 001370                           bne 10$
     839 003436 000207                           rts pc
     840                                ;
     841                                ; enter - either just cr, or crlf
     842                                ;
     843                                fcentr:
     844 003440 012700  000015                   mov #15,r0               ; cr
     845 003444 004767  011344                   jsr pc,xmit
     846 003450 005767  175070                   tst anslnm
     847 003454 001404                           beq 10$
     848 003456 012700  000012                   mov #12,r0               ; lf
     849 003462 004767  011326                   jsr pc,xmit
     850                                10$:
     851 003466 000207                           rts pc
     852                                ;
     853                                ; numlock - F1
     854                                ;
     855                                fcnlck:
     856 003470 012700  000033                   mov #33,r0               ; escape
     857 003474 004767  011314                   jsr pc,xmit
     858 003500 105767  175025                   tstb vt52                ; vt52 mode?
     859 003504 001004                           bne 52$                  ; yes, skip capital o
     860 003506 012700  000117                   mov #117,r0              ; capital o
     861 003512 004767  011276                   jsr pc,xmit
     862                                52$:
     863 003516 012700  000120                   mov #120,r0              ; capital p
     864 003522 004767  011266                   jsr pc,xmit
     865 003526 000207                           rts pc
     866                                ;
     867                                ; num pad div / - F2
     868                                ;
     869                                fcndiv:
     870 003530 012700  000033                   mov #33,r0               ; escape
     871 003534 004767  011254                   jsr pc,xmit
     872 003540 105767  174765                   tstb vt52                ; vt52 mode?
     873 003544 001004                           bne 52$                  ; yes, skip capital o
     874 003546 012700  000117                   mov #117,r0              ; capital o
     875 003552 004767  011236                   jsr pc,xmit
     876                                52$:
     877 003556 012700  000121                   mov #121,r0              ; capital q
     878 003562 004767  011226                   jsr pc,xmit
     879 003566 000207                           rts pc
     880                                ;
     881                                ; num pad asterisk - F3
     882                                ;
     883                                fcnast:
     884 003570 012700  000033                   mov #33,r0               ; escape
     885 003574 004767  011214                   jsr pc,xmit
     886 003600 105767  174725                   tstb vt52                ; vt52 mode?
     887 003604 001004                           bne 52$                  ; yes, skip capital o
     888 003606 012700  000117                   mov #117,r0              ; capital o
     889 003612 004767  011176                   jsr pc,xmit
     890                                52$:
     891 003616 012700  000122                   mov #122,r0              ; capital r
     892 003622 004767  011166                   jsr pc,xmit
     893 003626 000207                           rts pc
     894                                ;
     895                                ; num pad minus - F4
     896                                ;
     897                                fcnmin:
     898 003630 012700  000033                   mov #33,r0               ; escape
     899 003634 004767  011154                   jsr pc,xmit
     900 003640 105767  174665                   tstb vt52                ; vt52 mode?
     901 003644 001004                           bne 52$                  ; yes, skip capital o
     902 003646 012700  000117                   mov #117,r0              ; capital o
     903 003652 004767  011136                   jsr pc,xmit
     904                                52$:
     905 003656 012700  000123                   mov #123,r0              ; capital s
     906 003662 004767  011126                   jsr pc,xmit
     907 003666 000207                           rts pc
     908                                ;
     909                                ; num pad plus
     910                                ;
     911                                fcnpls:
     912 003670 105767  174654                   tstb deckpam             ; check keypad application mode flag
     913 003674 001005                           bne 10$                  ; on, go there
     914 003676 012700  000053                   mov #53,r0               ; plus
     915 003702 004767  011106                   jsr pc,xmit
     916 003706 000207                           rts pc
     917                                10$:                              ; not sure what to do with this yet. Nothing, for now
     918 003710 000207                           rts pc
     919                                ;
     920                                ; num pad enter
     921                                ;
     922                                fcnent:
     923 003712 105767  174632                   tstb deckpam             ; check keypad application mode flag
     924 003716 001003                           bne 10$                  ; on, go there
     925 003720 004767  177514                   jsr pc,fcentr
     926 003724 000207                           rts pc
     927                                10$:
     928 003726 004767  000710                   jsr pc,xkpad
     929 003732 012700  000115                   mov #115,r0              ; M
     930 003736 004767  011052                   jsr pc,xmit
     931 003742 000207                           rts pc
     932                                ;
     933                                ; num pad dot
     934                                ;
     935                                fcndot:
     936 003744 105767  174600                   tstb deckpam             ; check keypad application mode flag
     937 003750 001005                           bne 10$                  ; on, go there
     938 003752 012700  000056                   mov #56,r0               ; dot
     939 003756 004767  011032                   jsr pc,xmit
     940 003762 000207                           rts pc
     941                                10$:
     942 003764 004767  000652                   jsr pc,xkpad
     943 003770 012700  000156                   mov #156,r0              ; n
     944 003774 004767  011014                   jsr pc,xmit
     945 004000 000207                           rts pc
     946                                ;
     947                                ; num pad 0
     948                                ;
     949                                fcn0:
     950 004002 105767  174542                   tstb deckpam             ; check keypad application mode flag
     951 004006 001005                           bne 10$                  ; on, go there
     952 004010 012700  000060                   mov #60,r0               ; 0
     953 004014 004767  010774                   jsr pc,xmit
     954 004020 000207                           rts pc
     955                                10$:
     956 004022 004767  000614                   jsr pc,xkpad
     957 004026 012700  000160                   mov #160,r0              ; p
     958 004032 004767  010756                   jsr pc,xmit
     959 004036 000207                           rts pc
     960                                ;
     961                                ; num pad 1
     962                                ;
     963                                fcn1:
     964 004040 105767  174504                   tstb deckpam             ; check keypad application mode flag
     965 004044 001005                           bne 10$                  ; on, go there
     966 004046 012700  000061                   mov #61,r0               ; 1
     967 004052 004767  010736                   jsr pc,xmit
     968 004056 000207                           rts pc
     969                                10$:
     970 004060 004767  000556                   jsr pc,xkpad
     971 004064 012700  000161                   mov #161,r0              ; q
     972 004070 004767  010720                   jsr pc,xmit
     973 004074 000207                           rts pc
     974                                ;
     975                                ; num pad 2
     976                                ;
     977                                fcn2:
     978 004076 105767  174446                   tstb deckpam             ; check keypad application mode flag
     979 004102 001005                           bne 10$                  ; on, go there
     980 004104 012700  000062                   mov #62,r0               ; 2
     981 004110 004767  010700                   jsr pc,xmit
     982 004114 000207                           rts pc
     983                                10$:
     984 004116 004767  000520                   jsr pc,xkpad
     985 004122 012700  000162                   mov #162,r0              ; r
     986 004126 004767  010662                   jsr pc,xmit
     987 004132 000207                           rts pc
     988                                ;
     989                                ; num pad 3
     990                                ;
     991                                fcn3:
     992 004134 105767  174410                   tstb deckpam             ; check keypad application mode flag
     993 004140 001005                           bne 10$                  ; on, go there
     994 004142 012700  000063                   mov #63,r0               ; 3
     995 004146 004767  010642                   jsr pc,xmit
     996 004152 000207                           rts pc
     997                                10$:
     998 004154 004767  000462                   jsr pc,xkpad
     999 004160 012700  000163                   mov #163,r0              ; s
    1000 004164 004767  010624                   jsr pc,xmit
    1001 004170 000207                           rts pc
    1002                                ;
    1003                                ; num pad 4
    1004                                ;
    1005                                fcn4:
    1006 004172 105767  174352                   tstb deckpam             ; check keypad application mode flag
    1007 004176 001005                           bne 10$                  ; on, go there
    1008 004200 012700  000064                   mov #64,r0               ; 4
    1009 004204 004767  010604                   jsr pc,xmit
    1010 004210 000207                           rts pc
    1011                                10$:
    1012 004212 004767  000424                   jsr pc,xkpad
    1013 004216 012700  000164                   mov #164,r0              ; t
    1014 004222 004767  010566                   jsr pc,xmit
    1015 004226 000207                           rts pc
    1016                                ;
    1017                                ; num pad 5
    1018                                ;
    1019                                fcn5:
    1020 004230 105767  174314                   tstb deckpam             ; check keypad application mode flag
    1021 004234 001005                           bne 10$                  ; on, go there
    1022 004236 012700  000065                   mov #65,r0               ; 5
    1023 004242 004767  010546                   jsr pc,xmit
    1024 004246 000207                           rts pc
    1025                                10$:
    1026 004250 004767  000366                   jsr pc,xkpad
    1027 004254 012700  000165                   mov #165,r0              ; u
    1028 004260 004767  010530                   jsr pc,xmit
    1029 004264 000207                           rts pc
    1030                                ;
    1031                                ; num pad 6
    1032                                ;
    1033                                fcn6:
    1034 004266 105767  174256                   tstb deckpam             ; check keypad application mode flag
    1035 004272 001005                           bne 10$                  ; on, go there
    1036 004274 012700  000066                   mov #66,r0               ; 6
    1037 004300 004767  010510                   jsr pc,xmit
    1038 004304 000207                           rts pc
    1039                                10$:
    1040 004306 004767  000330                   jsr pc,xkpad
    1041 004312 012700  000166                   mov #166,r0              ; v
    1042 004316 004767  010472                   jsr pc,xmit
    1043 004322 000207                           rts pc
    1044                                ;
    1045                                ; num pad 7
    1046                                ;
    1047                                fcn7:
    1048 004324 105767  174220                   tstb deckpam             ; check keypad application mode flag
    1049 004330 001005                           bne 10$                  ; on, go there
    1050 004332 012700  000067                   mov #67,r0               ; 7
    1051 004336 004767  010452                   jsr pc,xmit
    1052 004342 000207                           rts pc
    1053                                10$:
    1054 004344 004767  000272                   jsr pc,xkpad
    1055 004350 012700  000167                   mov #167,r0              ; w
    1056 004354 004767  010434                   jsr pc,xmit
    1057 004360 000207                           rts pc
    1058                                ;
    1059                                ; num pad 8
    1060                                ;
    1061                                fcn8:
    1062 004362 105767  174162                   tstb deckpam             ; check keypad application mode flag
    1063 004366 001005                           bne 10$                  ; on, go there
    1064 004370 012700  000070                   mov #70,r0               ; 8
    1065 004374 004767  010414                   jsr pc,xmit
    1066 004400 000207                           rts pc
    1067                                10$:
    1068 004402 004767  000234                   jsr pc,xkpad
    1069 004406 012700  000170                   mov #170,r0              ; x
    1070 004412 004767  010376                   jsr pc,xmit
    1071 004416 000207                           rts pc
    1072                                ;
    1073                                ; num pad 9
    1074                                ;
    1075                                fcn9:
    1076 004420 105767  174124                   tstb deckpam             ; check keypad application mode flag
    1077 004424 001005                           bne 10$                  ; on, go there
    1078 004426 012700  000071                   mov #71,r0               ; 9
    1079 004432 004767  010356                   jsr pc,xmit
    1080 004436 000207                           rts pc
    1081                                10$:
    1082 004440 004767  000176                   jsr pc,xkpad
    1083 004444 012700  000171                   mov #171,r0              ; y
    1084 004450 004767  010340                   jsr pc,xmit
    1085 004454 000207                           rts pc
    1086                                ;
    1087                                ; ins
    1088                                ;
    1089                                fcins:
    1090 004456 000207                           rts pc
    1091                                ;
    1092                                ; home
    1093                                ;
    1094                                fchome:
    1095 004460 000207                           rts pc
    1096                                ;
    1097                                ; del
    1098                                ;
    1099                                fcdel:
    1100 004462 012700  000177                   mov #177,r0
    1101 004466 004767  010322                   jsr pc,xmit
    1102 004472 000207                           rts pc
    1103                                ;
    1104                                ; end
    1105                                ;
    1106                                fcend:
    1107 004474 000207                           rts pc
    1108                                ;
    1109                                ; f1
    1110                                ;
    1111                                fcf1:
    1112 004476 004767  000140                   jsr pc,xkpad
    1113 004502 012700  000120                   mov #120,r0              ; P
    1114 004506 004767  010302                   jsr pc,xmit
    1115 004512 000207                           rts pc
    1116                                ;
    1117                                ; f2
    1118                                ;
    1119                                fcf2:
    1120 004514 004767  000122                   jsr pc,xkpad
    1121 004520 012700  000121                   mov #121,r0              ; Q
    1122 004524 004767  010264                   jsr pc,xmit
    1123 004530 000207                           rts pc
    1124                                ;
    1125                                ; f3
    1126                                ;
    1127                                fcf3:
    1128 004532 004767  000104                   jsr pc,xkpad
    1129 004536 012700  000122                   mov #122,r0              ; R
    1130 004542 004767  010246                   jsr pc,xmit
    1131 004546 000207                           rts pc
    1132                                ;
    1133                                ; f4
    1134                                ;
    1135                                fcf4:
    1136 004550 004767  000066                   jsr pc,xkpad
    1137 004554 012700  000123                   mov #123,r0              ; S
    1138 004560 004767  010230                   jsr pc,xmit
    1139 004564 000207                           rts pc
    1140                                ;
    1141                                ; dummy for unused table entries
    1142                                ;
    1143                                fcnull:
    1144 004566 000207                           rts pc
    1145                                ;
    1146                                ; xmit escape-[
    1147                                ; except when in vt52 mode, then just xmit escape
    1148                                ;
    1149                                xmitcsi:
    1150 004570 012700  000033                   mov #33,r0               ; esc
    1151 004574 004767  010214                   jsr pc,xmit
    1152 004600 105767  173725                   tstb vt52                ; check for vt52 mode
    1153 004604 001015                           bne 90$                  ; skip the rest if yes
    1154 004606 105767  173735                   tstb decckm              ; cursor key mode flag set?
    1155 004612 001005                           bne 10$
    1156 004614 012700  000133                   mov #133,r0              ; [
    1157 004620 004767  010170                   jsr pc,xmit
    1158 004624 000405                           br 90$
    1159                                10$:
    1160 004626 012700  000117                   mov #117,r0              ; capital o
    1161 004632 004767  010156                   jsr pc,xmit
    1162 004636 000400                           br 90$
    1163                                90$:
    1164 004640 000207                           rts pc
    1165                                ;
    1166                                ; xmit escape-? or escape-O depending on ansi-vt52 switch for the numeric keypad
    1167                                ;
    1168                                xkpad:
    1169 004642 012700  000033                   mov #33,r0               ; escape
    1170 004646 004767  010142                   jsr pc,xmit
    1171 004652 105767  173653                   tstb vt52                ; in vt52 mode?
    1172 004656 001005                           bne 52$                  ; yes, go there
    1173 004660 012700  000117                   mov #117,r0              ; capital o
    1174 004664 004767  010124                   jsr pc,xmit
    1175 004670 000207                           rts pc
    1176                                52$:
    1177 004672 012700  000077                   mov #77,r0               ; question mark
    1178 004676 004767  010112                   jsr pc,xmit
    1179 004702 000207                           rts pc
    1180                                ;
    1181                                ; key codes for keys that need more than a one-to-one translation
    1182                                ;
    1183 000340                         kcminc   = 340
    1184 000340                         kcf4     = 340
    1185 000341                         kclar    = 341
    1186 000342                         kcdar    = 342
    1187 000343                         kcrar    = 343
    1188 000344                         kcuar    = 344
    1189 000345                         kcpgdn   = 345
    1190 000346                         kcpgup   = 346
    1191 000347                         kcentr   = 347
    1192 000350                         kcndiv   = 350
    1193 000351                         kcnlck   = 351
    1194 000352                         kcnent   = 352
    1195 000353                         kcnast   = 353
    1196 000354                         kcnmin   = 354
    1197 000355                         kcnpls   = 355
    1198 000356                         kcndot   = 356
    1199 000357                         kcn0     = 357
    1200 000360                         kcn1     = 360
    1201 000361                         kcn2     = 361
    1202 000362                         kcn3     = 362
    1203 000363                         kcn4     = 363
    1204 000364                         kcn5     = 364
    1205 000365                         kcn6     = 365
    1206 000366                         kcn7     = 366
    1207 000367                         kcn8     = 367
    1208 000370                         kcn9     = 370
    1209 000371                         kcins    = 371
    1210 000372                         kchome   = 372
    1211 000373                         kcdel    = 373
    1212 000374                         kcend    = 374
    1213 000375                         kcf1     = 375
    1214 000376                         kcf2     = 376
    1215 000377                         kcf3     = 377
    1216                                ;
    1217                                ; kctab - function table for mult-byte keys
    1218                                ;
    1219                                kctab:
    1220 004704 004550                           .word fcf4               ; 340 f4
    1221 004706 003274                           .word fclar              ; 341 left arrow
    1222 004710 003312                           .word fcdar              ; 342 down arrow
    1223 004712 003330                           .word fcrar              ; 343 right arrow
    1224 004714 003346                           .word fcuar              ; 344 up arrow
    1225 004716 003364                           .word fcpgdn             ; 345 pg dn
    1226 004720 003412                           .word fcpgup             ; 346 pg up
    1227 004722 003440                           .word fcentr             ; 347 enter
    1228 004724 003530                           .word fcndiv             ; 350 num pad div
    1229 004726 003470                           .word fcnlck             ; 351 numlock
    1230 004730 003712                           .word fcnent             ; 352 num pad enter
    1231 004732 003570                           .word fcnast             ; 353 num pad asterisk
    1232 004734 003630                           .word fcnmin             ; 354 num pad minus
    1233 004736 003670                           .word fcnpls             ; 355 num pad plus
    1234 004740 003744                           .word fcndot             ; 356 num pad dot/del
    1235 004742 004002                           .word fcn0               ; 357 num pad 0
    1236 004744 004040                           .word fcn1               ; 360 num pad 1
    1237 004746 004076                           .word fcn2               ; 361 num pad 2
    1238 004750 004134                           .word fcn3               ; 362 num pad 3
    1239 004752 004172                           .word fcn4               ; 363 num pad 4
    1240 004754 004230                           .word fcn5               ; 364 num pad 5
    1241 004756 004266                           .word fcn6               ; 365 num pad 6
    1242 004760 004324                           .word fcn7               ; 366 num pad 7
    1243 004762 004362                           .word fcn8               ; 367 num pad 7
    1244 004764 004420                           .word fcn9               ; 370 num pad 9
    1245 004766 004456                           .word fcins              ; 371 ins
    1246 004770 004460                           .word fchome             ; 372 home
    1247 004772 004462                           .word fcdel              ; 373 del
    1248 004774 004474                           .word fcend              ; 374 end
    1249 004776 004476                           .word fcf1               ; 375 f1
    1250 005000 004514                           .word fcf2               ; 376 f2
    1251 005002 004532                           .word fcf3               ; 377 f3
    1252                                ;
    1253                                ; -------------------------------------------------------------------
    1254                                ;
    1255                                ; decaln - fill buffer with E
    1256                                ;
    1257                                decaln:
    1258 005004 004767  000204                   jsr pc,clrdwh            ; clear double height/double width
    1259 005010 012700  100000                   mov #100000,r0           ; setup r0 as start address
    1260 005014 012701  107400                   mov #107400,r1           ; setup r1 as end condition
    1261                                80$:
    1262 005020 012720  000105                   mov #105,(r0)+           ; E
    1263 005024 020001                           cmp r0,r1
    1264 005026 103774                           blo 80$
    1265 005030 000207                           rts pc
    1266                                ;
    1267                                ; -------------------------------------------------------------------
    1268                                ;
    1269                                ; decdhl t - double height, top half
    1270                                ;
    1271                                decdht:
    1272 005032 016700  173316                   mov curr,r0              ; get current line
    1273 005036 005300                           dec r0                   ; subtract one to get to offset from start
    1274 005040 112760  000005  140040           movb #5,vgadwh(r0)       ; set double height bit and double width bit
    1275 005046 004767  000062                   jsr pc,adjdwh            ; adjust cursor and clear 2nd half of line
    1276 005052 000207                           rts pc
    1277                                ;
    1278                                ; -------------------------------------------------------------------
    1279                                ;
    1280                                ; decdhl b - double height, bottom half
    1281                                ;
    1282                                decdhb:
    1283 005054 016700  173274                   mov curr,r0              ; get current line
    1284 005060 005300                           dec r0                   ; subtract one to get to offset from start
    1285 005062 112760  000007  140040           movb #7,vgadwh(r0)       ; set double height plus low, and double width bits
    1286 005070 004767  000040                   jsr pc,adjdwh            ; adjust cursor and clear 2nd half of line
    1287 005074 000207                           rts pc
    1288                                ;
    1289                                ; -------------------------------------------------------------------
    1290                                ;
    1291                                ; decdwl - double width
    1292                                ;
    1293                                decdwl:
    1294 005076 016700  173252                   mov curr,r0              ; get current line
    1295 005102 005300                           dec r0                   ; subtract one to get to offset from start
    1296 005104 112760  000004  140040           movb #4,vgadwh(r0)       ; set double width bit
    1297 005112 004767  000016                   jsr pc,adjdwh            ; adjust cursor and clear 2nd half of line
    1298 005116 000207                           rts pc
    1299                                ;
    1300                                ; -------------------------------------------------------------------
    1301                                ;
    1302                                ; decswl - single width/single height
    1303                                ;
    1304                                decswl:
    1305 005120 016700  173230                   mov curr,r0              ; get current line
    1306 005124 005300                           dec r0                   ; subtract one to get to offset from start
    1307 005126 105060  140040                   clrb vgadwh(r0)          ; clear both double height and the double width bit
    1308 005132 000207                           rts pc
    1309                                ;
    1310                                ; -------------------------------------------------------------------
    1311                                ;
    1312                                ; adjdwh - adjust cursor pos and line content on changing a line to double height/width
    1313                                ;
    1314                                adjdwh:
    1315 005134 026727  173220  000050           cmp curc,#40.            ; is the cursor past column 40 decimal?
    1316 005142 101403                           blos 10$                 ; no
    1317 005144 012767  000050  173206           mov #40.,curc            ; set it at 40
    1318                                10$:
    1319 005152 016700  173176                   mov curr,r0              ; get current row
    1320 005156 010001                           mov r0,r1                ; copy
    1321 005160 005300                           dec r0                   ; correct for offset
    1322 005162 006300                           asl r0                   ; make word index
    1323 005164 016000  016516                   mov ltab(r0),r0          ; pick up the offset
    1324 005170 062700  000120                   add #80.,r0              ; add half the screen width - two bytes per pos, hence 80.
    1325 005174 006301                           asl r1                   ; word index of current line+1 - the +1 is implicit
    1326 005176 016101  016516                   mov ltab(r1),r1          ; pick up the offset
    1327                                20$:
    1328 005202 012720  000040                   mov #40,(r0)+            ; erase here
    1329 005206 020001                           cmp r0,r1                ; at the end yet?
    1330 005210 103774                           blo 20$                  ; branch if not
    1331 005212 000207                           rts pc                   ; done
    1332                                ;
    1333                                ; -------------------------------------------------------------------
    1334                                ;
    1335                                ; clrdwh - clear all double height/width bits
    1336                                ;
    1337                                clrdwh:
    1338 005214 010146                           mov r1,-(r6)             ; push r1
    1339 005216 010046                           mov r0,-(r6)             ; push r0
    1340 005220 012700  140040                   mov #vgadwh,r0           ; load start
    1341 005224 012701  140070                   mov #vgadwh+24.,r1       ; load end
    1342                                10$:
    1343 005230 005020                           clr (r0)+                ; clear (two bytes at a time)
    1344 005232 020001                           cmp r0,r1                ; at end yet?
    1345 005234 103775                           blo 10$
    1346 005236 012600                           mov (r6)+,r0             ; pop r0
    1347 005240 012601                           mov (r6)+,r1             ; pop r1
    1348 005242 000207                           rts pc
    1349                                ;
    1350                                ; -------------------------------------------------------------------
    1351                                ;
    1352                                ; clrdw0 - clear double height/width bits from (including) cursor line
    1353                                ;
    1354                                clrdw0:
    1355 005244 010146                           mov r1,-(r6)             ; push r1
    1356 005246 010046                           mov r0,-(r6)             ; push r0
    1357 005250 012700  140040                   mov #vgadwh,r0           ; load start
    1358 005254 066700  173074                   add curr,r0              ; add cursor line
    1359 005260 005300                           dec r0                   ; correct line number to offset
    1360 005262 012701  140070                   mov #vgadwh+24.,r1       ; load end
    1361                                10$:
    1362 005266 105020                           clrb (r0)+               ; clear
    1363 005270 020001                           cmp r0,r1                ; at end yet?
    1364 005272 103775                           blo 10$
    1365 005274 012600                           mov (r6)+,r0             ; pop r0
    1366 005276 012601                           mov (r6)+,r1             ; pop r1
    1367 005300 000207                           rts pc
    1368                                ;
    1369                                ; -------------------------------------------------------------------
    1370                                ;
    1371                                ; clrdw1 - clear double height/width bits up to (including) cursor line
    1372                                ;
    1373                                clrdw1:
    1374 005302 010146                           mov r1,-(r6)             ; push r1
    1375 005304 010046                           mov r0,-(r6)             ; push r0
    1376 005306 012700  140040                   mov #vgadwh,r0           ; load start
    1377 005312 010001                           mov r0,r1                ; copy
    1378 005314 066701  173034                   add curr,r1              ; add cursor line number
    1379                                10$:
    1380 005320 105020                           clrb (r0)+               ; clear
    1381 005322 020001                           cmp r0,r1                ; at end yet?
    1382 005324 103775                           blo 10$
    1383 005326 012600                           mov (r6)+,r0             ; pop r0
    1384 005330 012601                           mov (r6)+,r1             ; pop r1
    1385 005332 000207                           rts pc
    1386                                ;
    1387                                ; -------------------------------------------------------------------
    1388                                ;
    1389                                ; clrscr - clear entire screen
    1390                                ;
    1391                                clrscr:
    1392 005334 010146                           mov r1,-(r6)             ; push r1
    1393 005336 010046                           mov r0,-(r6)             ; push r0
    1394 005340 012700  100000                   mov #100000,r0           ; setup r0 as start address
    1395 005344 012701  107400                   mov #107400,r1           ; setup r1 as end condition
    1396                                10$:
    1397 005350 012720  000040                   mov #40,(r0)+            ; space, no attributes
    1398 005354 020001                           cmp r0,r1                ; reached end?
    1399 005356 103774                           blo 10$                  ; no again
    1400 005360 012767  000001  172766           mov #rowmin,curr         ; cursor to row 1
    1401 005366 012767  000001  172764           mov #colmin,curc         ; cursor to col 1
    1402 005374 105067  172764                   clrb lcf                 ; clear lcf flag
    1403 005400 004767  177610                   jsr pc,clrdwh            ; clear line attributes too
    1404 005404 012600                           mov (r6)+,r0             ; pop r0
    1405 005406 012601                           mov (r6)+,r1             ; pop r1
    1406 005410 000207                           rts pc
    1407                                ;
    1408                                ; -------------------------------------------------------------------
    1409                                ;
    1410                                ; ESC 1 - DECGON - Graphics Waveform Generator On
    1411                                ;
    1412                                esc1:
    1413 005412 022737  000151  140012           cmp #105.,@#vgavtt       ; check for vt type
    1414 005420 001003                           bne 10$                  ; not 105, skip setting graph mode
    1415 005422 112767  000001  173103           movb #1,vt105g           ; this enables the graphic parser
    1416                                10$:
    1417 005430 000207                           rts pc
    1418                                ;
    1419                                ; -------------------------------------------------------------------
    1420                                ;
    1421                                ; ESC 2 - DECGOFF - Graphics Waveform Generator Off
    1422                                ;
    1423                                esc2:
    1424 005432 105067  173075                   clrb vt105g
    1425 005436 000207                           rts pc
    1426                                ;
    1427                                ; -------------------------------------------------------------------
    1428                                ;
    1429                                ; ESC 7 - DECSC - Save Cursor
    1430                                ;
    1431                                esc7:
    1432 005440 016767  172710  172710           mov curr,scurr
    1433 005446 016767  172706  172706           mov curc,scurc
    1434 005454 116767  172704  172703           movb lcf,slcf
    1435 005462 116767  172704  172703           movb chrset,schrst
    1436 005470 116767  172672  172671           movb atth,satth
    1437 005476 000207                           rts pc
    1438                                ;
    1439                                ; -------------------------------------------------------------------
    1440                                ;
    1441                                ; ESC 8 - DECRC - Restore Cursor
    1442                                ;
    1443                                esc8:
    1444 005500 016767  172652  172646           mov scurr,curr
    1445 005506 016767  172650  172644           mov scurc,curc
    1446 005514 116767  172645  172642           movb slcf,lcf
    1447 005522 116767  172645  172642           movb schrst,chrset
    1448 005530 116767  172633  172630           movb satth,atth
    1449 005536 004767  003312                   jsr pc,fba
    1450 005542 000207                           rts pc
    1451                                ;
    1452                                ; -------------------------------------------------------------------
    1453                                ;
    1454                                ; ESC 3c - VT52 Enter ANSI Mode
    1455                                ;
    1456                                esc3c:
    1457 005544 105067  172761                   clrb vt52
    1458 005550 000207                           rts pc
    1459                                ;
    1460                                ; -------------------------------------------------------------------
    1461                                ;
    1462                                ; ESC 3d - DECKPAM set keypad application mode
    1463                                ;
    1464                                esc3d:
    1465 005552 112767  000001  172770           movb #1,deckpam
    1466 005560 000207                           rts pc
    1467                                ;
    1468                                ; -------------------------------------------------------------------
    1469                                ;
    1470                                ; ESC 3e - DECKPNM set keupad numeric mode - reset keypad application mode
    1471                                ;
    1472                                esc3e:
    1473 005562 105067  172762                   clrb deckpam
    1474 005566 000207                           rts pc
    1475                                ;
    1476                                ; -------------------------------------------------------------------
    1477                                ;
    1478                                ; ESC A - VT52 Cursor Up
    1479                                ;
    1480                                escua:
    1481 005570 005367  172560                   dec curr                 ; subtract one
    1482 005574 004767  003254                   jsr pc,fba               ; normalize
    1483 005600 000207                           rts pc
    1484                                ;
    1485                                ; -------------------------------------------------------------------
    1486                                ;
    1487                                ; ESC B - VT52 Cursor Down
    1488                                ;
    1489                                escub:
    1490 005602 005267  172546                   inc curr                 ; add one
    1491 005606 004767  003242                   jsr pc,fba               ; normalize
    1492 005612 000207                           rts pc
    1493                                ;
    1494                                ; -------------------------------------------------------------------
    1495                                ;
    1496                                ; ESC C - VT52 Cursor Right
    1497                                ;
    1498                                escuc:
    1499 005614 005267  172540                   inc curc                 ; add one
    1500 005620 004767  003230                   jsr pc,fba               ; normalize
    1501 005624 000207                           rts pc
    1502                                ;
    1503                                ; -------------------------------------------------------------------
    1504                                ;
    1505                                ; ESC D - IND - Index; VT52 Cursor Left
    1506                                ;
    1507                                escud:
    1508 005626 105767  172677                   tstb vt52                ; check for vt52 mode
    1509 005632 001014                           bne 52$                  ; on, go there
    1510 005634 026767  172540  172512           cmp wsize,curr           ; at last row?
    1511 005642 001403                           beq 10$                  ; yes
    1512 005644 005267  172504                   inc curr                 ; no, just move the cursor one down
    1513 005650 000402                           br 90$
    1514                                10$:
    1515 005652 004767  003354                   jsr pc,scrl              ; scroll the screen up
    1516                                90$:
    1517 005656 105067  172502                   clrb lcf                 ; not for vt100
    1518 005662 000207                           rts pc
    1519                                ;
    1520                                52$:
    1521 005664 005367  172470                   dec curc                 ; subtract one
    1522 005670 004767  003160                   jsr pc,fba               ; normalize
    1523 005674 000207                           rts pc
    1524                                ;
    1525                                ; -------------------------------------------------------------------
    1526                                ;
    1527                                ; ESC E - NEL - Next Line
    1528                                ;
    1529                                escue:
    1530 005676 012767  000001  172454           mov #colmin,curc         ; set first col
    1531 005704 026767  172470  172442           cmp wsize,curr           ; at last row?
    1532 005712 001403                           beq 10$                  ; yes
    1533 005714 005267  172434                   inc curr                 ; no, just move the cursor one down
    1534 005720 000402                           br 90$
    1535                                10$:
    1536 005722 004767  003304                   jsr pc,scrl              ; scroll the screen up
    1537                                90$:
    1538 005726 105067  172432                   clrb lcf                 ; not for vt100
    1539 005732 000207                           rts pc
    1540                                ;
    1541                                ; -------------------------------------------------------------------
    1542                                ;
    1543                                ; ESC F - VT52 Enter Special Graphic Character Mode
    1544                                ;
    1545                                ; dummy for now; these characters are not in the current set, nor is there space in the font rom for them
    1546                                ;
    1547                                escuf:
    1548 005734 000207                           rts pc
    1549                                ;
    1550                                ; -------------------------------------------------------------------
    1551                                ;
    1552                                ; ESC G - VT52 Exit Special Graphic Character Mode
    1553                                ;
    1554                                escug:
    1555 005736 000207                           rts pc
    1556                                ;
    1557                                ;
    1558                                ; -------------------------------------------------------------------
    1559                                ;
    1560                                ; ESC H - Set Tab; VT52 Cursor to Home
    1561                                ;
    1562                                escuh:
    1563 005740 105767  172565                   tstb vt52                ; vt52 mode on?
    1564 005744 001007                           bne 52$                  ; yes, go there
    1565 005746 016700  172406                   mov curc,r0              ; pickup current column
    1566 005752 005300                           dec r0                   ; adjust
    1567 005754 112760  000001  000402           movb #1,tabtab(r0)       ; set tab
    1568 005762 000207                           rts pc
    1569                                52$:
    1570 005764 012767  000001  172366           mov #colmin,curc         ; set home pos in current column
    1571 005772 012767  000001  172354           mov #rowmin,curr         ; set home pos in current row
    1572 006000 000207                           rts pc
    1573                                ;
    1574                                ; -------------------------------------------------------------------
    1575                                ;
    1576                                ; ESC I - VT52 Reverse Line Feed
    1577                                ;
    1578                                escui:
    1579 006002 022767  000001  172344           cmp #rowmin,curr         ; at first row?
    1580 006010 001403                           beq 10$                  ; yes
    1581 006012 005367  172336                   dec curr                 ; no, just move the cursor one up
    1582 006016 000402                           br 90$
    1583                                10$:
    1584 006020 004767  003340                   jsr pc,rscrl             ; scroll the screen down
    1585                                90$:
    1586 006024 105067  172334                   clrb lcf
    1587 006030 000207                           rts pc
    1588                                ;
    1589                                ; -------------------------------------------------------------------
    1590                                ;
    1591                                ; ESC J - VT52 Erase to End of Screen
    1592                                ;
    1593                                escuj:
    1594 006032 004767  003016                   jsr pc,fba               ; get buffer address of cursor
    1595 006036 012701  107400                   mov #107400,r1           ; setup r1 as end condition
    1596                                80$:
    1597 006042 012720  000040                   mov #40,(r0)+            ; erase here
    1598 006046 020001                           cmp r0,r1                ; done with loop?
    1599 006050 103774                           blo 80$                  ; branch if not
    1600                                90$:
    1601 006052 000207                           rts pc
    1602                                ;
    1603                                ; -------------------------------------------------------------------
    1604                                ;
    1605                                ; ESC K - VT52 Erase to End of Line
    1606                                ;
    1607                                escuk:
    1608 006054 004767  002774                   jsr pc,fba               ; get buffer address of cursor
    1609 006060 016701  172270                   mov curr,r1              ; erase from cursor to end of line; start with finding the end of the current line
    1610 006064 006301                           asl r1                   ; word index of current line+1 - the +1 is implicit
    1611 006066 016101  016516                   mov ltab(r1),r1          ; pick up the offset
    1612                                80$:
    1613 006072 012720  000040                   mov #40,(r0)+            ; erase here
    1614 006076 020001                           cmp r0,r1                ; at the end yet?
    1615 006100 103774                           blo 80$                  ; branch if not
    1616                                90$:
    1617 006102 000207                           rts pc
    1618                                ;
    1619                                ; -------------------------------------------------------------------
    1620                                ;
    1621                                ; ESC M - RI - Reverse Index
    1622                                ;
    1623                                escum:
    1624 006104 105767  172442                   tstb decom               ; is origin mode on?
    1625 006110 001007                           bne 10$                  ; yes
    1626 006112 026767  172256  172234           cmp tmarg,curr           ; at top of viewport?
    1627 006120 001412                           beq 80$                  ; yes
    1628 006122 005367  172226                   dec curr                 ; no, just move the cursor one up
    1629 006126 000411                           br 90$
    1630                                ;
    1631                                10$:
    1632 006130 022767  000001  172216           cmp #rowmin,curr         ; at first row?
    1633 006136 001403                           beq 80$                  ; yes
    1634 006140 005367  172210                   dec curr                 ; no, just move the cursor one up
    1635 006144 000402                           br 90$
    1636                                
    1637                                80$:
    1638 006146 004767  003212                   jsr pc,rscrl             ; scroll the screen down
    1639                                90$:
    1640 006152 105067  172206                   clrb lcf                 ; not for vt100
    1641 006156 000207                           rts pc
    1642                                ;
    1643                                ; -------------------------------------------------------------------
    1644                                ;
    1645                                ; ESC Z - DECID - Identify Terminal; VT52 Identify
    1646                                ;
    1647                                escuz:
    1648 006160 105767  172345                   tstb vt52                ; in vt52 mode?
    1649 006164 001003                           bne 52$                  ; branch if we are
    1650 006166 004767  001166                   jsr pc,csilc             ; go to CSI c routine
    1651 006172 000207                           rts pc                   ; done
    1652                                52$:
    1653 006174 112700  000033                   movb #33,r0              ; escape
    1654 006200 004767  006610                   jsr pc,xmit              ; send it
    1655 006204 112700  000057                   movb #57,r0              ; /
    1656 006210 004767  006600                   jsr pc,xmit              ; send it
    1657 006214 112700  000132                   movb #132,r0             ; Z
    1658 006220 004767  006570                   jsr pc,xmit              ; send it
    1659 006224 000207                           rts pc                   ; done
    1660                                ;
    1661                                ; -------------------------------------------------------------------
    1662                                ;
    1663                                ; ESC c - RIS - Reset to Initial State
    1664                                ;
    1665                                esclc:
    1666 006226 000167  172546                   jmp t42
    1667                                ;
    1668                                ; -------------------------------------------------------------------
    1669                                ;
    1670                                ; CSI @ - ICH Insert Characters (VT200)
    1671                                ;
    1672                                csiat:
    1673 006232 010246                           mov r2,-(r6)             ; push r2
    1674 006234 004767  002614                   jsr pc,fba               ; get cursor address
    1675 006240 010002                           mov r0,r2                ; move cursor address into r2
    1676                                10$:
    1677 006242 016700  172106                   mov curr,r0              ; load curr
    1678 006246 006300                           asl r0                   ; word index
    1679 006250 016000  016516                   mov ltab(r0),r0          ; get start address of next line
    1680 006254 010001                           mov r0,r1                ; copy
    1681 006256 005301                           dec r1                   ; two
    1682 006260 005301                           dec r1                   ; ... less
    1683 006262 020102                           cmp r1,r2                ; same? then we'd be on colmax
    1684 006264 001414                           beq 80$                  ; skip rest if so - no action if on last col
    1685                                60$:
    1686 006266 014140                           mov -(r1),-(r0)          ; do the move
    1687 006270 020102                           cmp r1,r2                ; compare addresses
    1688 006272 101375                           bhi 60$                  ; loop if r1>r2 still
    1689 006274 012712  000040                   mov #40,(r2)             ; insert blank, no attributes at cursor
    1690 006300 022767  000001  172272           cmp #1,parm1             ; check if we need to do more?
    1691 006306 001403                           beq 80$                  ; no, exit
    1692 006310 005367  172264                   dec parm1                ; subtract one
    1693 006314 000752                           br 10$                   ; go do another round
    1694                                80$:
    1695 006316 012602                           mov (r6)+,r2             ; pop r2
    1696 006320 000207                           rts pc
    1697                                ;
    1698                                ; -------------------------------------------------------------------
    1699                                ;
    1700                                ; CSI A - CUU Cursor Up
    1701                                ;
    1702                                csiua:
    1703 006322 166767  172252  172024           sub parm1,curr
    1704 006330 004767  002520                   jsr pc,fba
    1705 006334 105067  172024                   clrb lcf
    1706 006340 000207                           rts pc
    1707                                ;
    1708                                ; -------------------------------------------------------------------
    1709                                ;
    1710                                ; CSI B - CUD Cursor Down
    1711                                ;
    1712                                csiub:
    1713 006342 066767  172232  172004           add parm1,curr
    1714 006350 004767  002500                   jsr pc,fba
    1715 006354 105067  172004                   clrb lcf                 ; not sure about this
    1716 006360 000207                           rts pc
    1717                                ;
    1718                                ; -------------------------------------------------------------------
    1719                                ;
    1720                                ; CSI C - CUF Cursor Forward
    1721                                ;
    1722                                csiuc:
    1723 006362 066767  172212  171770           add parm1,curc
    1724 006370 004767  002460                   jsr pc,fba
    1725 006374 105067  171764                   clrb lcf                 ; not for vt100
    1726 006400 000207                           rts pc
    1727                                ;
    1728                                ; -------------------------------------------------------------------
    1729                                ;
    1730                                ; CSI D - CUD Cursor Backward
    1731                                ;
    1732                                csiud:
    1733 006402 166767  172172  171750           sub parm1,curc
    1734 006410 004767  002440                   jsr pc,fba
    1735 006414 105067  171744                   clrb lcf                ; not sure about this
    1736 006420 000207                           rts pc
    1737                                ;
    1738                                ; -------------------------------------------------------------------
    1739                                ;
    1740                                ; CSI H - CUP Cursor Position
    1741                                ;
    1742                                csiuh:
    1743 006422 016767  172152  171724           mov parm1,curr
    1744 006430 016767  172146  171722           mov parm2,curc
    1745 006436 004767  002412                   jsr pc,fba
    1746 006442 105067  171716                   clrb lcf                 ; not for vt100
    1747 006446 000207                           rts pc
    1748                                ;
    1749                                ; -------------------------------------------------------------------
    1750                                ;
    1751                                ; CSI J - ED Erase In Display
    1752                                ;
    1753                                csiuj:
    1754 006450 004767  002400                   jsr pc,fba               ; get buffer address of cursor
    1755 006454 005767  172076                   tst parmt                ; check raw parameter for zero - means from (including) cursor to end of screen
    1756 006460 001005                           bne 10$                  ; no, other form
    1757 006462 004767  176556                   jsr pc,clrdw0            ; clear double heigth/double width bits
    1758 006466 012701  107400                   mov #107400,r1           ; setup r1 as end condition
    1759 006472 000433                           br 80$
    1760                                ;
    1761                                10$:
    1762 006474 022767  000001  172054           cmp #1,parmt             ; 1? means from start of screen up to (including) cursor
    1763 006502 001007                           bne 20$                  ; no
    1764 006504 004767  176572                   jsr pc,clrdw1            ; clear double heigth/double width bits
    1765 006510 010001                           mov r0,r1                ; setup cursor buffer address as end condition
    1766 006512 005201                           inc r1                   ; add one
    1767 006514 012700  100000                   mov #100000,r0           ; setup r0 as start address
    1768 006520 000420                           br 80$
    1769                                ;
    1770                                20$:
    1771 006522 022767  000002  172026           cmp #2,parmt             ; 2? means clear whole screen
    1772 006530 001405                           beq 21$                  ; yes, deal with it
    1773 006532 022767  000003  172016           cmp #3,parmt             ; 3? this means clear everything including scrollback. Not vt100/105/200/220, but lets do it anyway.
    1774 006540 001401                           beq 21$
    1775 006542 000407                           br 80$
    1776                                21$:
    1777 006544 004767  176444                   jsr pc,clrdwh            ; clear double height/double width
    1778 006550 012700  100000                   mov #100000,r0           ; setup r0 as start address
    1779 006554 012701  107400                   mov #107400,r1           ; setup r1 as end condition
    1780 006560 000400                           br 80$
    1781                                80$:
    1782 006562 012720  000040                   mov #40,(r0)+            ; erase here
    1783 006566 020001                           cmp r0,r1
    1784 006570 103774                           blo 80$
    1785 006572 000400                           br 90$
    1786                                90$:
    1787 006574 105067  171564                   clrb lcf                 ; not for vt100
    1788 006600 000207                           rts pc
    1789                                ;
    1790                                ; -------------------------------------------------------------------
    1791                                ;
    1792                                ; CSI K - EL Erase In Line
    1793                                ;
    1794                                csiuk:
    1795 006602 004767  002246                   jsr pc,fba               ; get buffer address of cursor
    1796 006606 005767  171744                   tst parmt                ; check raw parameter for zero
    1797 006612 001006                           bne 10$                  ; no - other form
    1798 006614 016701  171534                   mov curr,r1              ; 0 or default: erase from cursor to end of line
    1799 006620 006301                           asl r1                   ; word index of current line+1 - the +1 is implicit
    1800 006622 016101  016516                   mov ltab(r1),r1          ; pick up the offset
    1801 006626 000435                           br 80$
    1802                                10$:
    1803 006630 022767  000001  171720           cmp #1,parmt             ; check raw parameter for one
    1804 006636 001011                           bne 20$                  ; no
    1805 006640 010001                           mov r0,r1                ; setup r1 as ending condition
    1806 006642 005201                           inc r1                   ; add one
    1807 006644 016700  171504                   mov curr,r0              ; 1 : erase from beginning of line to cursor
    1808 006650 005300                           dec r0                   ; start from zero
    1809 006652 006300                           asl r0                   ; word index of current line
    1810 006654 016000  016516                   mov ltab(r0),r0          ; pick up the offset
    1811 006660 000420                           br 80$
    1812                                20$:
    1813 006662 022767  000002  171666           cmp #2,parmt             ; check raw parameter for two
    1814 006670 001021                           bne 90$                  ; no - outtahere
    1815 006672 016700  171456                   mov curr,r0              ; 1 : erase from beginning of line to cursor
    1816 006676 005300                           dec r0                   ; start from zero
    1817 006700 006300                           asl r0                   ; word index of current line
    1818 006702 016000  016516                   mov ltab(r0),r0          ; pick up the offset
    1819 006706 016701  171442                   mov curr,r1              ; 0 or default: erase from cursor to end of line
    1820 006712 006301                           asl r1                   ; word index of current line+1 - the +1 is implicit
    1821 006714 016101  016516                   mov ltab(r1),r1          ; pick up the offset
    1822 006720 000400                           br 80$
    1823                                80$:
    1824 006722 012720  000040                   mov #40,(r0)+            ; erase here
    1825 006726 020001                           cmp r0,r1
    1826 006730 103774                           blo 80$
    1827 006732 000400                           br 90$
    1828                                90$:
    1829 006734 105067  171424                   clrb lcf                 ; not for vt100
    1830 006740 000207                           rts pc
    1831                                ;
    1832                                ; -------------------------------------------------------------------
    1833                                ;
    1834                                ; CSI L - IL Insert Line (VT102)
    1835                                ;
    1836                                csiul:
    1837 006742 010246                           mov r2,-(r6)             ; push r2
    1838 006744 026767  171404  171426           cmp curr,wsize           ; check if we are in the current scroll area
    1839 006752 101043                           bhi 90$                  ; no, done here - IL is not effective outside the scroll area
    1840 006754 016700  171416                   mov bmarg,r0             ; get bottom margin
    1841 006760 006300                           asl r0                   ; word index
    1842 006762 016000  016516                   mov ltab(r0),r0          ; get address of where to
    1843                                
    1844 006766 016701  171404                   mov bmarg,r1             ; get bottom margin
    1845 006772 166701  171602                   sub parm1,r1             ; minus number of lines
    1846 006776 006301                           asl r1                   ; word index
    1847 007000 016101  016516                   mov ltab(r1),r1          ; get address of where from
    1848                                
    1849 007004 016702  171364                   mov tmarg,r2             ; get top margin
    1850 007010 005302                           dec r2                   ; minus offset
    1851 007012 066702  171336                   add curr,r2              ; add current row
    1852 007016 005302                           dec r2                   ; minus offset
    1853 007020 006302                           asl r2                   ; make word index
    1854 007022 016202  016516                   mov ltab(r2),r2          ; get ending address
    1855 007026 020102                           cmp r1,r2                ; check if we're overrunning the end of the scroll region?
    1856 007030 101403                           blos 20$                 ; yes, skip the move
    1857                                10$:
    1858 007032 014140                           mov -(r1),-(r0)          ; move
    1859 007034 020102                           cmp r1,r2                ; should end move at the start of line below tmarg
    1860 007036 101375                           bhi 10$                  ; repeat
    1861                                20$:
    1862 007040 005300                           dec r0                   ; skip data byte
    1863 007042 005300                           dec r0                   ; skip attribute byte
    1864 007044 112710  000040                   movb #40,(r0)            ; clear the newly scrolled-in line - roll spaces over it; but leave attributes intact as per spec?
    1865 007050 020002                           cmp r0,r2                ; check for end
    1866 007052 101372                           bhi 20$                  ; repeat
    1867 007054 012767  000001  171276           mov #colmin,curc         ; set cursor to first column
    1868                                90$:
    1869 007062 012602                           mov (r6)+,r2             ; pop r2
    1870 007064 000207                           rts pc
    1871                                ;
    1872                                ; -------------------------------------------------------------------
    1873                                ;
    1874                                ; CSI M - DL Delete Line (VT102)
    1875                                ;
    1876                                csium:
    1877 007066 010246                           mov r2,-(r6)             ; push r2
    1878 007070 026767  171260  171302           cmp curr,wsize           ; check if we are in the current scroll area
    1879 007076 101046                           bhi 90$                  ; no, done here - DL is not effective outside the scroll area
    1880 007100 016700  171270                   mov tmarg,r0             ; get top margin
    1881 007104 066700  171244                   add curr,r0              ; add current row
    1882 007110 005300                           dec r0                   ; correct for 1 bias
    1883 007112 005300                           dec r0                   ; correct for double 1 bias
    1884 007114 010001                           mov r0,r1                ; copy to r1
    1885 007116 066701  171456                   add parm1,r1             ; add number of lines to delete
    1886 007122 016702  171252                   mov wsize,r2             ; compute max number of lines to delete
    1887 007126 166702  171222                   sub curr,r2              ; wsize-curr
    1888 007132 020201                           cmp r2,r1                ; check for illegal value
    1889 007134 103001                           bhis 10$                 ; ok, no need to correct
    1890 007136 010201                           mov r2,r1                ; correct
    1891                                10$:
    1892 007140 006301                           asl r1                   ; word index
    1893 007142 006300                           asl r0                   ; word index
    1894 007144 016101  016516                   mov ltab(r1),r1          ; get address of source
    1895 007150 016000  016516                   mov ltab(r0),r0          ; get address of target
    1896                                
    1897 007154 016702  171216                   mov bmarg,r2             ; get bottom margin
    1898 007160 006302                           asl r2                   ; make word index
    1899 007162 016202  016516                   mov ltab(r2),r2          ; get ending address
    1900                                20$:
    1901 007166 012120                           mov (r1)+,(r0)+          ; move
    1902 007170 020102                           cmp r1,r2                ; check for end
    1903 007172 103775                           blo 20$                  ; branch if not yet at end
    1904                                30$:
    1905 007174 112720  000040                   movb #40,(r0)+           ; clear the newly scrolled-in line - roll spaces over it, but leave attributes in place
    1906 007200 005200                           inc r0                   ; skip attribute
    1907 007202 020002                           cmp r0,r2                ; check for end
    1908 007204 103773                           blo 30$                  ; branch if not yet at end
    1909 007206 012767  000001  171144           mov #colmin,curc         ; set cursor to first column
    1910                                90$:
    1911 007214 012602                           mov (r6)+,r2             ; pop r2
    1912 007216 000207                           rts pc
    1913                                ;
    1914                                ; -------------------------------------------------------------------
    1915                                ;
    1916                                ; CSI P - DCH Delete Character (VT102)
    1917                                ;
    1918                                csiup:
    1919 007220 010246                           mov r2,-(r6)             ; push r2
    1920 007222 016702  171126                   mov curr,r2              ; find current row
    1921 007226 006302                           asl r2                   ; make into word index - no debiasing, because we need the start of the next line
    1922 007230 016202  016516                   mov ltab(r2),r2          ; load the address from the table
    1923 007234 004767  001614                   jsr pc,fba               ; retrieve current cursor address in r0
    1924 007240 010001                           mov r0,r1                ; copy
    1925 007242 066701  171332                   add parm1,r1             ; add number of to be deleted chars
    1926 007246 066701  171326                   add parm1,r1             ; twice, because we need a word offset
    1927 007252 020102                           cmp r1,r2                ; check we're not going to the next line
    1928 007254 103402                           blo 10$                  ; no, branch if we're ok
    1929 007256 010201                           mov r2,r1                ; yes, set start address of next line as max
    1930 007260 000403                           br 20$                   ; and skip moving
    1931                                10$:
    1932 007262 012120                           mov (r1)+,(r0)+          ; move the chars towards the cursor pos
    1933 007264 020102                           cmp r1,r2                ; check if we're there yet
    1934 007266 103775                           blo 10$                  ; no, another
    1935                                20$:
    1936 007270 012720  000040                   mov #40,(r0)+            ; clear new chars - and attributes too
    1937 007274 020002                           cmp r0,r2                ; check if we're there yet
    1938 007276 103774                           blo 20$
    1939 007300 012602                           mov (r6)+,r2             ; pop r2
    1940 007302 000207                           rts pc
    1941                                ;
    1942                                ; -------------------------------------------------------------------
    1943                                ;
    1944                                ; CSI X - ECH Erase Character (VT200)
    1945                                ;
    1946                                csiux:
    1947 007304 010246                           mov r2,-(r6)             ; push r2
    1948 007306 016702  171042                   mov curr,r2              ; find current row
    1949 007312 006302                           asl r2                   ; make into word index - no debiasing, because we need the start of the next line
    1950 007314 016202  016516                   mov ltab(r2),r2          ; load the address from the table
    1951 007320 004767  001530                   jsr pc,fba               ; retrieve current cursor address in r0
    1952 007324 010001                           mov r0,r1                ; copy
    1953 007326 066701  171246                   add parm1,r1             ; add number of to be deleted chars
    1954 007332 066701  171242                   add parm1,r1             ; twice, because we need a word offset
    1955 007336 020102                           cmp r1,r2                ; check we're not going to the next line
    1956 007340 103401                           blo 10$                  ; no, branch if we're ok
    1957 007342 010201                           mov r2,r1                ; yes, set start address of next line as max
    1958                                10$:
    1959 007344 012720  000040                   mov #40,(r0)+            ; clear the chars
    1960 007350 020001                           cmp r0,r1                ; check if we're there yet
    1961 007352 103774                           blo 10$                  ; no, another
    1962                                20$:
    1963 007354 012602                           mov (r6)+,r2             ; pop r2
    1964 007356 000207                           rts pc
    1965                                ;
    1966                                ; -------------------------------------------------------------------
    1967                                ;
    1968                                ; CSI c - DA Device Attributes
    1969                                ;
    1970                                csilc:
    1971 007360 012701  007402                   mov #csilcs,r1           ; set up start of string
    1972                                10$:
    1973 007364 112100                           movb (r1)+,r0            ; pick up byte
    1974 007366 004767  005422                   jsr pc,xmit              ; xmit it
    1975 007372 020127  007411                   cmp r1,#csilce
    1976 007376 001372                           bne 10$
    1977 007400 000207                           rts pc
    1978                                csilcs:
    1979 007402    033     133     077           .byte 33,133,77,61,73,66,143                 ; this says that we're a vt10x, with a bitmask in the char before the c - 4:graphic waveform generator (yes) 2:advanced video (yes) 1:processor option (no).
         007405    061     073     066  
         007410    143                  
    1980                                csilce:
    1981 007411    000                           .even
    1982                                ;
    1983                                ; -------------------------------------------------------------------
    1984                                ;
    1985                                ; CSI f - HVP Horizontal and Vertical Position
    1986                                ;
    1987                                csilf:
    1988 007412 004767  177004                   jsr pc,csiuh             ; csi lower case f is the same as csi upper case h
    1989 007416 000207                           rts pc
    1990                                ;
    1991                                ; -------------------------------------------------------------------
    1992                                ;
    1993                                ; CSI g - TBC Tabulation Clear
    1994                                ;
    1995                                csilg:
    1996 007420 022767  000000  171130           cmp #0,parmt             ; 0? where 0 means clear tab at current pos
    1997 007426 001006                           bne 10$                  ; no, something else
    1998 007430 016700  170724                   mov curc,r0              ; pickup current column
    1999 007434 005300                           dec r0                   ; adjust
    2000 007436 105060  000402                   clrb tabtab(r0)          ; clear tab
    2001 007442 000414                           br 90$
    2002                                10$:
    2003 007444 022767  000003  171104           cmp #3,parmt             ; clear all tabs?
    2004 007452 001010                           bne 90$                  ; no, skip
    2005 007454 012700  000120                   mov #colmax,r0           ; load max col
    2006 007460 005300                           dec r0                   ; adjust
    2007                                20$:
    2008 007462 105060  000402                   clrb tabtab(r0)          ; clear this tab
    2009 007466 005300                           dec r0                   ; move one down
    2010 007470 005700                           tst r0
    2011 007472 001373                           bne 20$                  ; done?
    2012                                90$:
    2013 007474 000207                           rts pc
    2014                                ;
    2015                                ; -------------------------------------------------------------------
    2016                                ;
    2017                                ; CSI h - Set mode
    2018                                ;
    2019                                csilh:
    2020 007476 005000                           clr r0
    2021                                5$:
    2022 007500 020067  171050                   cmp r0,parmc             ; pick up parm count, well, offset
    2023 007504 101072                           bhi 95$                  ; that far? then done
    2024 007506 016001  000556                   mov parmt(r0),r1         ; load the value
    2025 007512 022701  000024                   cmp #20.,r1              ; line feed/new line
    2026 007516 001004                           bne 10$
    2027 007520 112767  000001  171016           movb #1,anslnm           ; set
    2028 007526 000456                           br 90$
    2029                                10$:
    2030 007530 022701  000001                   cmp #1,r1                ; cursor key mode
    2031 007534 001004                           bne 20$
    2032 007536 112767  000001  171003           movb #1,decckm
    2033 007544 000447                           br 90$
    2034                                20$:
    2035 007546 022701  000003                   cmp #3,r1                ; deccolm - 80/132. We don't do 132, but... switching clears the screen, and we should definitely do that.
    2036 007552 001006                           bne 30$
    2037 007554 112767  000001  170767           movb #1,deccolm
    2038 007562 004767  175546                   jsr pc,clrscr            ; clear screen
    2039 007566 000436                           br 90$
    2040                                30$:
    2041 007570 022701  000004                   cmp #4,r1
    2042 007574 001004                           bne 40$
    2043 007576 112767  000001  170741           movb #1,ansins           ; IRM ie ansi insert mode
    2044 007604 000427                           br 90$
    2045                                40$:
    2046 007606 022701  000006                   cmp #6,r1                ; origin mode
    2047 007612 001006                           bne 50$
    2048 007614 112767  000001  170730           movb #1,decom
    2049 007622 105067  170536                   clrb lcf
    2050 007626 000416                           br 90$
    2051                                50$:
    2052 007630 022701  000007                   cmp #7,r1                ; wraparound
    2053 007634 001004                           bne 60$
    2054 007636 112767  000001  170702           movb #1,decawm
    2055 007644 000407                           br 90$
    2056                                60$:
    2057 007646 022701  000031                   cmp #25.,r1              ; DECTCEM
    2058 007652 001004                           bne 70$
    2059 007654 042737  000200  140002           bic #200,@#vgacr         ; set DECTCTEM mode clears the hide cursor bit
    2060 007662 000400                           br 90$
    2061                                70$:
    2062                                90$:
    2063 007664 005200                           inc r0                   ; inc parm index
    2064 007666 005200                           inc r0                   ; twice, it's a word
    2065 007670 000703                           br 5$                   ; go for the next round
    2066                                95$:
    2067 007672 000207                           rts pc
    2068                                ;
    2069                                ; -------------------------------------------------------------------
    2070                                ;
    2071                                ; CSI l - Reset mode
    2072                                ;
    2073                                csill:
    2074 007674 005000                           clr r0
    2075                                5$:
    2076 007676 020067  170652                   cmp r0,parmc             ; pick up parm count, well, offset
    2077 007702 101101                           bhi 95$                  ; that far? then done
    2078 007704 016001  000556                   mov parmt(r0),r1         ; load the value
    2079                                ;
    2080 007710 022701  000002                   cmp #2,r1                ; DECANM - ANSI/VT52 mode - special case for Reset Mode only
    2081 007714 001004                           bne 7$
    2082 007716 112767  000001  170605           movb #1,vt52             ; set vt52 mode. There is no corresponding set mode for this - vt52 would not know that; instead that is done by esc3c
    2083 007724 000465                           br 90$
    2084                                7$:
    2085 007726 022701  000024                   cmp #20.,r1              ; ANSI line feed/new line
    2086 007732 001004                           bne 10$
    2087 007734 112767  000000  170602           movb #0,anslnm
    2088 007742 000456                           br 90$
    2089                                10$:
    2090 007744 022701  000001                   cmp #1,r1                ; cursor key mode
    2091 007750 001004                           bne 20$
    2092 007752 112767  000000  170567           movb #0,decckm
    2093 007760 000447                           br 90$
    2094                                20$:
    2095 007762 022701  000003                   cmp #3,r1                ; deccolm - 80/132. We don't do 132, but... switching clears the screen, and we should definitely do that.
    2096 007766 001006                           bne 30$
    2097 007770 112767  000000  170553           movb #0,deccolm
    2098 007776 004767  175332                   jsr pc,clrscr            ; clear screen
    2099 010002 000436                           br 90$
    2100                                30$:
    2101 010004 022701  000004                   cmp #4,r1
    2102 010010 001004                           bne 40$
    2103 010012 112767  000000  170525           movb #0,ansins           ; IRM ie ANSI insert mode
    2104 010020 000427                           br 90$
    2105                                40$:
    2106 010022 022701  000006                   cmp #6,r1                ; origin mode
    2107 010026 001006                           bne 50$
    2108 010030 112767  000000  170514           movb #0,decom
    2109 010036 105067  170322                   clrb lcf
    2110 010042 000416                           br 90$
    2111                                50$:
    2112 010044 022701  000007                   cmp #7,r1                ; wraparound
    2113 010050 001004                           bne 60$
    2114 010052 112767  000000  170466           movb #0,decawm
    2115 010060 000407                           br 90$
    2116                                60$:
    2117 010062 022701  000031                   cmp #25.,r1              ; DECTCEM
    2118 010066 001004                           bne 70$
    2119 010070 052737  000200  140002           bis #200,@#vgacr         ; reset DECTCTEM mode sets the hide cursor bit
    2120 010076 000400                           br 90$
    2121                                70$:
    2122                                90$:
    2123 010100 005200                           inc r0                   ; inc parm index
    2124 010102 005200                           inc r0                   ; twice, it's a word
    2125 010104 000674                           br 5$                   ; go for the next round
    2126                                95$:
    2127 010106 000207                           rts pc
    2128                                ;
    2129                                ; -------------------------------------------------------------------
    2130                                ;
    2131                                ; CSI m - SGR Select Graphic Rendition
    2132                                ;
    2133                                csilm:
    2134 010110 005000                           clr r0
    2135                                10$:
    2136 010112 020067  170436                   cmp r0,parmc             ; pick up parm count, well, offset
    2137 010116 101103                           bhi 90$                  ; that far? then done
    2138 010120 016001  000556                   mov parmt(r0),r1         ; load the value
    2139 010124 022701  000000                   cmp #0,r1                ; 0 - clear attr
    2140 010130 001003                           bne 20$                  ;
    2141 010132 105067  170230                   clrb atth                ; clear
    2142 010136 000470                           br 70$
    2143                                20$:
    2144 010140 022701  000001                   cmp #1,r1                ; 1, bold
    2145 010144 001004                           bne 21$
    2146 010146 152767  000001  170212           bisb #1,atth             ; bit 0 is bold
    2147 010154 000461                           br 70$
    2148                                21$:
    2149 010156 022701  000004                   cmp #4,r1                ; 4, underscore
    2150 010162 001004                           bne 22$
    2151 010164 152767  000002  170174           bisb #2,atth             ; bit 1 is underscore
    2152 010172 000452                           br 70$
    2153                                22$:
    2154 010174 022701  000005                   cmp #5,r1                ; 5, blink
    2155 010200 001004                           bne 23$
    2156 010202 152767  000004  170156           bisb #4,atth             ; bit 2 is blink
    2157 010210 000443                           br 70$
    2158                                23$:
    2159 010212 022701  000007                   cmp #7,r1                ; 7, reverse video
    2160 010216 001004                           bne 24$
    2161 010220 152767  000010  170140           bisb #10,atth            ; bit 3 is rv
    2162 010226 000434                           br 70$
    2163                                24$:
    2164                                30$:
    2165 010230 022701  000026                   cmp #22.,r1              ; 22 *decimal, not bold
    2166 010234 001004                           bne 31$
    2167 010236 142767  000001  170122           bicb #1,atth             ; bit 0 is bold
    2168 010244 000425                           br 70$
    2169                                31$:
    2170 010246 022701  000030                   cmp #24.,r1              ; 24 *decimal, not underscore
    2171 010252 001004                           bne 32$
    2172 010254 142767  000002  170104           bicb #2,atth             ; bit 1 is underscore
    2173 010262 000416                           br 70$
    2174                                32$:
    2175 010264 022701  000031                   cmp #25.,r1              ; 25 *decimal, not blink
    2176 010270 001004                           bne 33$
    2177 010272 142767  000004  170066           bicb #4,atth             ; bit 2 is blink
    2178 010300 000407                           br 70$
    2179                                33$:
    2180 010302 022701  000033                   cmp #27.,r1              ; 27 *decimal, not reverse
    2181 010306 001004                           bne 34$
    2182 010310 142767  000010  170050           bicb #10,atth            ; bit 3 is rv
    2183 010316 000400                           br 70$
    2184                                34$:
    2185                                70$:
    2186 010320 005200                           inc r0                   ; inc parm index
    2187 010322 005200                           inc r0                   ; twice, it's a word
    2188 010324 000672                           br 10$                   ; go for the next round
    2189                                90$:
    2190 010326 000207                           rts pc
    2191                                ;
    2192                                ; -------------------------------------------------------------------
    2193                                ;
    2194                                ; CSI n - DSR Device Status Report
    2195                                ;
    2196                                csiln:
    2197 010330 022767  000005  170220           cmp #5,parmt             ; report terminal status
    2198 010336 001405                           beq 10$
    2199 010340 022767  000006  170210           cmp #6,parmt             ; report cursor position
    2200 010346 001422                           beq 20$
    2201 010350 000507                           br 90$
    2202                                10$:
    2203 010352 012700  000033                   mov #33,r0               ; esc
    2204 010356 004767  004432                   jsr pc,xmit
    2205 010362 012700  000133                   mov #133,r0              ; [
    2206 010366 004767  004422                   jsr pc,xmit
    2207 010372 012700  000060                   mov #60,r0               ; 0 - means all ok
    2208 010376 004767  004412                   jsr pc,xmit
    2209 010402 012700  000156                   mov #156,r0              ; n
    2210 010406 004767  004402                   jsr pc,xmit
    2211 010412 000466                           br 90$
    2212                                20$:
    2213 010414 012700  000033                   mov #33,r0               ; esc
    2214 010420 004767  004370                   jsr pc,xmit
    2215 010424 012700  000133                   mov #133,r0              ; [
    2216 010430 004767  004360                   jsr pc,xmit
    2217                                ;
    2218                                ; calculate row decimal position
    2219                                ;
    2220 010434 016701  167714                   mov curr,r1              ; get row
    2221 010440 005000                           clr r0                   ; keep loop counter in r0
    2222 010442 005300                           dec r0                   ; start at -1
    2223                                30$:
    2224 010444 005200                           inc r0                   ; increment loop counter
    2225 010446 162701  000012                   sub #10.,r1              ; subtract 10 decimal
    2226 010452 100374                           bpl 30$                  ; another loop?
    2227 010454 062701  000072                   add #72,r1               ; add 10 decimal to correct the last subtraction, plus 60 octal to make a char in the range 0-9
    2228 010460 005700                           tst r0                   ; loop counter zero?
    2229 010462 001404                           beq 40$                  ; yes, then skip leading zero
    2230 010464 062700  000060                   add #60,r0               ; make char in range 0-9
    2231 010470 004767  004320                   jsr pc,xmit              ; transmit
    2232                                40$:
    2233 010474 010100                           mov r1,r0                ; move calculated char into r0
    2234 010476 004767  004312                   jsr pc,xmit              ; transmit
    2235 010502 012700  000073                   mov #73,r0               ; ;
    2236 010506 004767  004302                   jsr pc,xmit
    2237                                ;
    2238                                ; now the col
    2239                                ;
    2240 010512 016701  167642                   mov curc,r1              ; get column
    2241 010516 005000                           clr r0                   ; keep loop counter in r0
    2242 010520 005300                           dec r0                   ; start at -1
    2243                                50$:
    2244 010522 005200                           inc r0                   ; inc loopcounter
    2245 010524 162701  000012                   sub #10.,r1              ; loop while subtracting 10 decimal
    2246 010530 100374                           bpl 50$                  ; need another go?
    2247 010532 062701  000072                   add #72,r1               ; add 10 decimal to correct the last subtraction, plus 60 octal to make a char in the range 0-9
    2248 010536 005700                           tst r0                   ; check loop counter for zero
    2249 010540 001404                           beq 60$                  ; if it is, it doesn't need printing - some software doesnt't handle leading zeros
    2250 010542 062700  000060                   add #60,r0               ; offset 10-unit by octal 60 to make char in the range 0-9
    2251 010546 004767  004242                   jsr pc,xmit              ; xmit 10-unit
    2252                                60$:
    2253 010552 010100                           mov r1,r0                ; move last digit char into r0
    2254 010554 004767  004234                   jsr pc,xmit              ; xmit
    2255 010560 012700  000122                   mov #122,r0              ; R
    2256 010564 004767  004224                   jsr pc,xmit
    2257                                90$:
    2258 010570 000207                           rts pc
    2259                                ;
    2260                                ; -------------------------------------------------------------------
    2261                                ;
    2262                                ; CSI r - DECSTBM - Set Top and Bottom Margins
    2263                                ;
    2264                                csilr:
    2265 010572 016700  167760                   mov parmt,r0             ; pickup first parm
    2266 010576 005700                           tst r0
    2267 010600 001417                           beq 80$
    2268 010602 016701  167752                   mov parmt+2,r1           ; pickup second parm
    2269 010606 005701                           tst r1
    2270 010610 001413                           beq 80$
    2271 010612 020001                           cmp r0,r1                ; check: top can not be greater or equal than bottom; viewport must have at least two lines
    2272 010614 103011                           bhis 80$                 ; if not, set defaults. or maybe ignore instead? FIXME
    2273 010616 010067  167552                   mov r0,tmarg             ; store top
    2274 010622 010167  167550                   mov r1,bmarg             ; store bottom
    2275 010626 160001                           sub r0,r1                ; r1=bmarg-tmarg
    2276 010630 005201                           inc r1                   ; adjust to get scroll window size
    2277 010632 010167  167542                   mov r1,wsize             ; store
    2278 010636 000411                           br 90$
    2279                                80$:
    2280 010640 012767  000001  167526           mov #dtmarg,tmarg        ; restore default
    2281 010646 012767  000030  167522           mov #dbmarg,bmarg        ; restore default
    2282 010654 012767  000030  167516           mov #dwsize,wsize        ; restore default
    2283                                90$:
    2284 010662 012700  000001                   mov #1,r0                ; load home coordinate
    2285 010666 010067  167462                   mov r0,curr              ; set cursor to home row in new viewport
    2286 010672 010067  167462                   mov r0,curc              ; set cursor to home col in new viewport
    2287 010676 004767  000152                   jsr pc,fba               ; normalize
    2288 010702 105067  167456                   clrb lcf
    2289 010706 000207                           rts pc
    2290                                ;
    2291                                ; -------------------------------------------------------------------
    2292                                ;
    2293                                ; CSI x - DECREQTPARM - Request Terminal Parameters
    2294                                ;
    2295                                csilx:
    2296 010710 022767  000000  167640           cmp #0,parmt             ; 0 - report and allow unsolicited
    2297 010716 001011                           bne 20$
    2298 010720 012701  011022                   mov #csilx0,r1
    2299                                10$:
    2300 010724 112100                           movb (r1)+,r0
    2301 010726 004767  004062                   jsr pc,xmit
    2302 010732 020127  011046                   cmp r1,#csilx1
    2303 010736 001372                           bne 10$
    2304 010740 000415                           br 90$
    2305                                20$:
    2306 010742 022767  000001  167606           cmp #1,parmt             ; 1 - report and don't allow unsolicited
    2307 010750 001011                           bne 90$
    2308 010752 012701  010776                   mov #csilxs,r1
    2309                                30$:
    2310 010756 112100                           movb (r1)+,r0
    2311 010760 004767  004030                   jsr pc,xmit
    2312 010764 020127  011022                   cmp r1,#csilxe
    2313 010770 001372                           bne 30$
    2314 010772 000400                           br 90$
    2315                                90$:
    2316 010774 000207                           rts pc
    2317                                csilxs:
    2318 010776    033     133                   .byte 33,133             ; csi
    2319 011000    063                           .ascii /3/               ; this message is a report and the terminal is only reporting on request
    2320 011001    073                           .ascii /;/               ; separator
    2321 011002    061                           .ascii /1/               ; no parity
    2322 011003    073                           .ascii /;/               ; separator
    2323 011004    061                           .ascii /1/               ; 8 bits per character
    2324 011005    073                           .ascii /;/               ; separator
    2325 011006    061     061     062           .ascii /112/             ; xspeed 9600
    2326 011011    073                           .ascii /;/               ; separator
    2327 011012    061     061     062           .ascii /112/             ; rspeed 9600
    2328 011015    073                           .ascii /;/               ; separator
    2329 011016    061                           .ascii /1/               ; multiplier
    2330 011017    073                           .ascii /;/               ; separator
    2331 011020    060                           .ascii /0/               ; flags
    2332 011021    170                           .ascii /x/               ; end
    2333                                csilxe:
    2334                                csilx0:
    2335 011022    033     133                   .byte 33,133             ; csi
    2336 011024    062                           .ascii /2/               ; this message is a report and the terminal will send unsolicited (except we won't, there's no logic for it)
    2337 011025    073                           .ascii /;/               ; separator
    2338 011026    061                           .ascii /1/               ; no parity
    2339 011027    073                           .ascii /;/               ; separator
    2340 011030    061                           .ascii /1/               ; 8 bits per character
    2341 011031    073                           .ascii /;/               ; separator
    2342 011032    061     061     062           .ascii /112/             ; xspeed 9600
    2343 011035    073                           .ascii /;/               ; separator
    2344 011036    061     061     062           .ascii /112/             ; rspeed 9600
    2345 011041    073                           .ascii /;/               ; separator
    2346 011042    061                           .ascii /1/               ; multiplier
    2347 011043    073                           .ascii /;/               ; separator
    2348 011044    060                           .ascii /0/               ; flags
    2349 011045    170                           .ascii /x/               ; end
    2350                                csilx1:
    2351                                         .even
    2352                                ;
    2353                                ; -------------------------------------------------------------------
    2354                                ;
    2355                                ; CSI y - DECTST - Invoke Confidence Test
    2356                                ;
    2357                                csily:
    2358 011046 000167  167726                   jmp t42
    2359                                ;
    2360                                ; -------------------------------------------------------------------
    2361                                ;
    2362                                ; csinul - dummy
    2363                                ;
    2364                                csinul:
    2365 011052 000207                           rts pc
    2366                                ;
    2367                                ; -------------------------------------------------------------------
    2368                                ;
    2369                                ; fba - find buffer address
    2370                                ;
    2371                                ; cursor coordinates will be normalized, returns buffer address in r0
    2372                                ; note that before coming here, signed arithmetic might have been done
    2373                                ; on curr, curc and wsize, so this routine must use the signed branches.
    2374                                ;
    2375                                fba:
    2376 011054 010146                           mov r1,-(r6)             ; push r1
    2377 011056 026727  167276  000001           cmp curc,#colmin         ; not lower than min?
    2378 011064 002003                           bge 10$
    2379 011066 012767  000001  167264           mov #colmin,curc         ; set min value
    2380                                10$:
    2381 011074 026727  167260  000120           cmp curc,#colmax         ; not larger than max?
    2382 011102 003403                           ble 20$
    2383 011104 012767  000120  167246           mov #colmax,curc         ; set max value
    2384                                20$:
    2385 011112 016700  167236                   mov curr,r0
    2386 011116 020027  000001                   cmp r0,#rowmin           ; not lower than min?
    2387 011122 002004                           bge 30$
    2388 011124 012767  000001  167222           mov #rowmin,curr         ; set min
    2389 011132 000767                           br 20$                   ; go back
    2390                                30$:
    2391 011134 020027  000030                   cmp r0,#rowmax           ; not larger than max?
    2392 011140 003404                           ble 40$
    2393 011142 012767  000030  167204           mov #rowmax,curr         ; set max
    2394 011150 000760                           br 20$                   ; go back
    2395                                40$:
    2396 011152 105767  167374                   tstb decom               ; is origin mode on?
    2397 011156 001412                           beq 60$                  ; no
    2398 011160 020067  167214                   cmp r0,wsize             ; check row against window size
    2399 011164 003404                           ble 50$
    2400 011166 016700  167206                   mov wsize,r0             ; set min
    2401 011172 010067  167156                   mov r0,curr              ; normalize curr
    2402                                50$:
    2403 011176 066700  167172                   add tmarg,r0             ; add top margin to row offset
    2404 011202 005300                           dec r0                   ; correct for offset
    2405                                60$:
    2406 011204 005300                           dec r0                   ; correct for offset
    2407 011206 006300                           asl r0                   ; make word index
    2408 011210 016000  016516                   mov ltab(r0),r0          ; load address from table
    2409 011214 016701  167140                   mov curc,r1              ; get column
    2410 011220 005301                           dec r1                   ; correct
    2411 011222 006301                           asl r1                   ; make word address
    2412 011224 060100                           add r1,r0                ; add column to address
    2413 011226 012601                           mov (r6)+,r1             ; pop r1
    2414 011230 000207                           rts pc
    2415                                ;
    2416                                ; -------------------------------------------------------------------
    2417                                ;
    2418                                ; scrl - scroll up one line
    2419                                ;
    2420                                scrl:
    2421 011232 010246                           mov r2,-(r6)             ; push r2
    2422 011234 010146                           mov r1,-(r6)             ; push r1
    2423 011236 010046                           mov r0,-(r6)             ; push r0
    2424 011240 016701  167130                   mov tmarg,r1             ; get top margin
    2425 011244 010100                           mov r1,r0                ; copy
    2426 011246 005300                           dec r0                   ; minus one - r0 is now top row - 1, r1 is now row.
    2427 011250 006301                           asl r1                   ; make word index
    2428 011252 006300                           asl r0                   ; make word index
    2429 011254 016101  016516                   mov ltab(r1),r1          ; get address of from position for scroll
    2430 011260 016000  016516                   mov ltab(r0),r0          ; get address of to position for scroll
    2431 011264 016702  167106                   mov bmarg,r2             ; get bottom margin
    2432 011270 006302                           asl r2                   ; make word index
    2433 011272 016202  016516                   mov ltab(r2),r2          ; get ending address
    2434                                10$:
    2435 011276 012120                           mov (r1)+,(r0)+          ; move
    2436 011300 020102                           cmp r1,r2                ; check for end
    2437 011302 103775                           blo 10$                  ; not yet
    2438                                20$:
    2439 011304 012720  000040                   mov #40,(r0)+            ; clear the newly scrolled-in line - roll spaces over it
    2440 011310 020002                           cmp r0,r2                ; check for end
    2441 011312 103774                           blo 20$
    2442                                ;
    2443 011314 016701  167054                   mov tmarg,r1             ; get top margin
    2444 011320 010100                           mov r1,r0                ; copy
    2445 011322 005300                           dec r0                   ; minus one - r0 is now top row - 1, r1 is now row.
    2446 011324 062701  140040                   add #vgadwh,r1           ; get address of from position for scroll
    2447 011330 062700  140040                   add #vgadwh,r0           ; get address of to position for scroll
    2448 011334 016702  167036                   mov bmarg,r2             ; get bottom margin
    2449 011340 062702  140040                   add #vgadwh,r2           ; get ending address
    2450                                30$:
    2451 011344 112120                           movb (r1)+,(r0)+         ; move line attributes
    2452 011346 020102                           cmp r1,r2                ; check for end
    2453 011350 103775                           blo 30$                  ; not yet
    2454 011352 105010                           clrb (r0)                ; clear line attributes for new line
    2455                                ;
    2456 011354 012600                           mov (r6)+,r0             ; pop r0
    2457 011356 012601                           mov (r6)+,r1             ; pop r1
    2458 011360 012602                           mov (r6)+,r2             ; pop r2
    2459 011362 000207                           rts pc
    2460                                ;
    2461                                ; -------------------------------------------------------------------
    2462                                ;
    2463                                ; rscrl - scroll down one line
    2464                                ;
    2465                                rscrl:
    2466 011364 010246                           mov r2,-(r6)             ; push r2
    2467 011366 010146                           mov r1,-(r6)             ; push r1
    2468 011370 010046                           mov r0,-(r6)             ; push r0
    2469 011372 016701  167000                   mov bmarg,r1             ; get bottom margin
    2470 011376 010100                           mov r1,r0                ; copy
    2471 011400 005301                           dec r1                   ; one less; r1 is now bottom -1, r0 is bottom
    2472 011402 006301                           asl r1                   ; word index
    2473 011404 006300                           asl r0                   ; word index
    2474 011406 016101  016516                   mov ltab(r1),r1          ; get address of where from
    2475 011412 016000  016516                   mov ltab(r0),r0          ; get address of where to
    2476 011416 016702  166752                   mov tmarg,r2             ; get top margin
    2477 011422 005302                           dec r2                   ; correct
    2478 011424 006302                           asl r2                   ; make word index
    2479 011426 016202  016516                   mov ltab(r2),r2          ; get ending address
    2480                                10$:
    2481 011432 014140                           mov -(r1),-(r0)          ; move
    2482 011434 020102                           cmp r1,r2                ; should end move at the start of line below tmarg
    2483 011436 101375                           bhi 10$
    2484                                20$:
    2485 011440 012740  000040                   mov #40,-(r0)            ; clear the newly scrolled-in line - roll spaces over it
    2486 011444 020002                           cmp r0,r2                ; check for end
    2487 011446 101374                           bhi 20$
    2488                                ;
    2489 011450 016701  166722                   mov bmarg,r1             ; get bottom margin
    2490 011454 010100                           mov r1,r0                ; copy
    2491 011456 005301                           dec r1                   ; one less; r1 is now bottom -1, r0 is bottom
    2492 011460 062701  140040                   add #vgadwh,r1           ; get address of where from
    2493 011464 062700  140040                   add #vgadwh,r0           ; get address of where to
    2494 011470 016702  166700                   mov tmarg,r2             ; get top margin
    2495 011474 005302                           dec r2                   ; correct
    2496 011476 062702  140040                   add #vgadwh,r2           ; get ending address
    2497                                30$:
    2498 011502 114140                           movb -(r1),-(r0)         ; move
    2499 011504 020102                           cmp r1,r2                ; end move at the line below tmarg
    2500 011506 101375                           bhi 30$
    2501 011510 105040                           clrb -(r0)               ; clear the line attributes for the newly scrolled in line
    2502                                ;
    2503 011512 012600                           mov (r6)+,r0             ; pop r0
    2504 011514 012601                           mov (r6)+,r1             ; pop r1
    2505 011516 012602                           mov (r6)+,r2             ; pop r2
    2506 011520 000207                           rts pc
    2507                                ;
    2508                                ; -------------------------------------------------------------------
    2509                                ;
    2510                                ; dolcf
    2511                                ;
    2512                                dolcf:
    2513 011522 105767  166636                   tstb lcf                 ; is the flag on?
    2514 011526 001427                           beq 90$                  ; no, out of here
    2515 011530 105767  166775                   tstb vt52                ; check for vt52 mode
    2516 011534 001024                           bne 90$                  ; vt52 mode - no lcf processing
    2517 011536 026727  166616  000120           cmp curc,#colmax         ; check to be sure that we're in the last col
    2518 011544 001020                           bne 90$                  ; no, out of here
    2519                                ;
    2520 011546 026767  166602  166622           cmp curr,bmarg           ; so we need the next line. Are we on the last?
    2521 011554 103007                           bhis 60$                 ; yes, need to scroll
    2522 011556 012767  000001  166574           mov #colmin,curc         ; first pos on
    2523 011564 062767  000001  166562           add #1,curr              ; next line
    2524 011572 000405                           br 90$
    2525                                60$:
    2526 011574 004767  177432                   jsr pc,scrl              ; do the scroll
    2527 011600 012767  000001  166552           mov #colmin,curc         ; set the cursor back in column 1
    2528                                90$:
    2529 011606 105067  166552                   clrb lcf                 ; clear the lcf flag
    2530 011612 004767  177236                   jsr pc,fba               ; update cursor address
    2531 011616 000207                           rts pc
    2532                                ;
    2533                                ; -------------------------------------------------------------------
    2534                                ;
    2535                                ; gprint
    2536                                ;
    2537                                gprint:
    2538 011620 004767  177676                   jsr pc,dolcf             ; normalize addresses and pickup r0
    2539 011624 126727  166542  000060           cmpb chrset,#chrgra      ; graphics set current?
    2540 011632 001011                           bne 3$                   ; nope
    2541 011634 020127  000137                   cmp r1,#137              ; in graphics range?
    2542 011640 103406                           blo 3$                   ; before low bound
    2543 011642 020127  000177                   cmp r1,#177              ; del?
    2544 011646 001403                           beq 3$
    2545 011650 162701  000137                   sub #137,r1               ; shift by 137 into fontrom
    2546 011654 000412                           br 5$
    2547                                3$:
    2548 011656 126727  166510  000101           cmpb chrset,#chruk       ; uk set?
    2549 011664 001006                           bne 4$                   ; nope
    2550 011666 020127  000044                   cmp r1,#44               ; $?
    2551 011672 001003                           bne 4$
    2552 011674 012701  000036                   mov #36,r1               ; set code for pound symbol
    2553 011700 000400                           br 5$
    2554                                4$:
    2555                                5$:
    2556 011702 105767  166637                   tstb ansins              ; check if we're in insert mode?
    2557 011706 001424                           beq 9$                   ; no
    2558 011710 010046                           mov r0,-(r6)             ; push r0
    2559 011712 010146                           mov r1,-(r6)             ; push r1
    2560 011714 010246                           mov r2,-(r6)             ; push r2
    2561 011716 010002                           mov r0,r2                ; copy cursor address
    2562 011720 016700  166430                   mov curr,r0              ; load curr
    2563 011724 006300                           asl r0                   ; word index
    2564 011726 016000  016516                   mov ltab(r0),r0          ; get start address of next line
    2565 011732 010001                           mov r0,r1                ; copy
    2566 011734 005301                           dec r1                   ; two
    2567 011736 005301                           dec r1                   ; ... less
    2568 011740 020102                           cmp r1,r2                ; same? then we'd be on colmax
    2569 011742 001403                           beq 7$                   ; skip rest if so - no action if on last col
    2570                                6$:
    2571 011744 014140                           mov -(r1),-(r0)          ; do the move
    2572 011746 020102                           cmp r1,r2                ; compare addresses
    2573 011750 101375                           bhi 6$                   ; loop if r1>r2 still
    2574                                7$:
    2575 011752 012602                           mov (r6)+,r2             ; pop r2
    2576 011754 012601                           mov (r6)+,r1             ; pop r1
    2577 011756 012600                           mov (r6)+,r0             ; pop r0
    2578                                9$:
    2579 011760 110120                           movb r1,(r0)+            ; write the char
    2580 011762 116710  166400                   movb atth,(r0)           ; write the attribute bits
    2581 011766 005300                           dec r0                   ; set r0 back to where we were - not sure if that is necessary?
    2582                                ;
    2583 011770 026727  166364  000120           cmp curc,#colmax         ; space left on this line?
    2584 011776 001401                           beq 10$                  ; not quite
    2585 012000 103407                           blo 20$                  ; yes sure
    2586                                10$:
    2587 012002 105767  166540                   tstb decawm              ; check for decawm autowrap mode
    2588 012006 001410                           beq 90$                  ; if not on, no lcf processing - stay on this line
    2589 012010 112767  000001  166346           movb #1,lcf              ; set last column flag
    2590 012016 000404                           br 90$
    2591                                20$:
    2592 012020 062767  000001  166332           add #1,curc              ; next pos on same line
    2593 012026 000400                           br 90$
    2594                                90$:
    2595 012030 000207                           rts pc
    2596                                ;
    2597                                ; -------------------------------------------------------------------
    2598                                ;
    2599                                ; control character processing
    2600                                ;
    2601                                cntrl:
    2602 012032 020127  000040                   cmp r1,#40               ; control character?
    2603 012036 103010                           bhis 90$                 ; no, done here
    2604 012040 010100                           mov r1,r0                ; copy
    2605 012042 006300                           asl r0                   ; make word index
    2606 012044 016000  016216                   mov ctab(r0),r0          ; pick up address of routine
    2607 012050 005700                           tst r0                   ; zero?
    2608 012052 001402                           beq 90$                  ; yes, not handled
    2609 012054 004710                           jsr pc,(r0)              ; go there
    2610 012056 005001                           clr r1                   ; processing done
    2611                                90$:
    2612 012060 000207                           rts pc
    2613                                ;
    2614                                ; -------------------------------------------------------------------
    2615                                ;
    2616                                ; cnul - the nul control character
    2617                                ;
    2618                                cnul:
    2619 012062 000207                           rts pc
    2620                                ;
    2621                                ; -------------------------------------------------------------------
    2622                                ;
    2623                                ; cenq - enquire
    2624                                ;
    2625                                cenq:
    2626 012064 000207                           rts pc                   ; not sure I like the enq function very much. Oh well, it's here, it's tested, it's, ehh, disabled.
    2627                                
    2628 012066 022737  000151  140012           cmp #105.,@#vgavtt       ; check for vt type
    2629 012074 001411                           beq 20$                  ; 105 check, go there
    2630 012076 012701  012142                   mov #cenq0,r1            ; setup for string copy
    2631                                10$:
    2632 012102 112100                           movb (r1)+,r0            ; copy
    2633 012104 004767  002704                   jsr pc,xmit              ; xmit the character
    2634 012110 020127  012160                   cmp r1,#cenq1            ; at the end?
    2635 012114 001372                           bne 10$                  ; branch if not
    2636 012116 000207                           rts pc                   ; done here
    2637                                20$:
    2638 012120 012701  012160                   mov #cenq2,r1            ; setup for string copy, vt105 version
    2639                                30$:
    2640 012124 112100                           movb (r1)+,r0            ; get the char
    2641 012126 004767  002662                   jsr pc,xmit              ; xmit it
    2642 012132 020127  012176                   cmp r1,#cenq3            ; at the end of the string yet?
    2643 012136 001372                           bne 30$                  ; no not yet
    2644 012140 000207                           rts pc                   ; done here
    2645                                ;
    2646                                cenq0:
    2647 012142    166     164     061           .ascii /vt100[pdp2011]/
         012145    060     060     133  
         012150    160     144     160  
         012153    062     060     061  
         012156    061     135          
    2648                                cenq1:
    2649                                cenq2:
    2650 012160    166     164     061           .ascii /vt105[pdp2011]/
         012163    060     065     133  
         012166    160     144     160  
         012171    062     060     061  
         012174    061     135          
    2651                                cenq3:
    2652                                         .even
    2653                                ;
    2654                                ; -------------------------------------------------------------------
    2655                                ;
    2656                                ; cbs - backspace handler
    2657                                ;
    2658                                cbs:
    2659 012176 162767  000001  166154           sub #1,curc              ; backspace
    2660 012204 004767  176644                   jsr pc,fba               ; normalize
    2661 012210 105067  166150                   clrb lcf
    2662 012214 000207                           rts pc
    2663                                ;
    2664                                ; -------------------------------------------------------------------
    2665                                ;
    2666                                ; cht - tab handler
    2667                                ;
    2668                                cht:
    2669 012216 016700  166136                   mov curc,r0              ; get current col
    2670 012222 012701  000402                   mov #tabtab,r1           ; tab table
    2671 012226 060001                           add r0,r1                ; set offset in tabtab
    2672 012230 005301                           dec r1                   ; adjust
    2673 012232 016700  166116                   mov curr,r0              ; get row
    2674 012236 005300                           dec r0                   ; one less
    2675 012240 116000  140040                   movb vgadwh(r0),r0       ; pick up double width bits
    2676                                10$:
    2677 012244 105700                           tstb r0                  ; check if we're on a double-width line
    2678 012246 001405                           beq 12$                  ; r0 flat, so no
    2679 012250 022767  000050  166102           cmp #colhmx,curc         ; check if we're at half colmax?
    2680 012256 001412                           beq 90$                  ; yes, stop there
    2681 012260 000404                           br 14$                   ; no, do the work
    2682                                12$:
    2683 012262 022767  000120  166070           cmp #colmax,curc         ; check if at right limit?
    2684 012270 001405                           beq 90$                  ; yes, stop there
    2685                                14$:
    2686 012272 005267  166062                   inc curc                 ; move one up
    2687 012276 005201                           inc r1                   ; move tabtab pointer
    2688 012300 105711                           tstb (r1)                ; check if it is set?
    2689 012302 001760                           beq 10$                  ; no, again
    2690                                90$:
    2691 012304 004767  176544                   jsr pc,fba               ; normalize
    2692 012310 105067  166050                   clrb lcf                 ; not for vt100
    2693 012314 000207                           rts pc
    2694                                ;
    2695                                ; -------------------------------------------------------------------
    2696                                ;
    2697                                ; clf - lf handler
    2698                                ;
    2699                                clf:
    2700 012316 105767  166222                   tstb anslnm              ; new-line mode on?
    2701 012322 001403                           beq 10$                  ; no
    2702 012324 012767  000001  166026           mov #1,curc              ; set col 1 if it is on
    2703                                10$:
    2704 012332 105767  166214                   tstb decom               ; are we in origin mode?
    2705 012336 001407                           beq 15$                  ; no
    2706 012340 026767  166010  166032           cmp curr,wsize           ; then wsize would be the last line
    2707 012346 103417                           blo 20$                  ; if curr below wsize, then no need to scroll
    2708 012350 004767  176656                   jsr pc,scrl              ; do it
    2709 012354 000420                           br 90$
    2710                                15$:
    2711 012356 026767  165772  166010           cmp curr,tmarg           ; are we within the scroll area?
    2712 012364 103410                           blo 20$                  ; above
    2713 012366 026767  165762  166002           cmp curr,bmarg           ; maybe below?
    2714 012374 101004                           bhi 20$                  ; below
    2715 012376 001003                           bne 20$                  ; or not the same, also no need to scroll
    2716 012400 004767  176626                   jsr pc,scrl              ; go do
    2717 012404 000404                           br 90$
    2718                                20$:
    2719 012406 062767  000001  165740           add #1,curr
    2720 012414 000400                           br 90$
    2721                                90$:
    2722 012416 105067  165742                   clrb lcf                 ; not for vt100
    2723 012422 000207                           rts pc
    2724                                ;
    2725                                ; -------------------------------------------------------------------
    2726                                ;
    2727                                ; ccr - cr handler
    2728                                ;
    2729                                ccr:
    2730 012424 012767  000001  165726           mov #colmin,curc
    2731 012432 004767  176416                   jsr pc,fba
    2732 012436 105067  165722                   clrb lcf
    2733 012442 000207                           rts pc
    2734                                ;
    2735                                ; -------------------------------------------------------------------
    2736                                ;
    2737                                ; cso - so handler
    2738                                ;
    2739                                cso:
    2740 012444 116767  165721  165720           movb g1set,chrset
    2741 012452 000207                           rts pc
    2742                                ;
    2743                                ; -------------------------------------------------------------------
    2744                                ;
    2745                                ; csi - si handler
    2746                                ;
    2747                                csi:
    2748 012454 116767  165710  165710           movb g0set,chrset
    2749 012462 000207                           rts pc
    2750                                ;
    2751                                ; -------------------------------------------------------------------
    2752                                ;
    2753                                ; ccan - can handler FIXME 'it also causes the error character to be displayed'
    2754                                ;
    2755                                ccan:
    2756 012464 012767  000000  166112           mov #psg,pstate
    2757 012472 105067  165666                   clrb lcf                 ; FIXME, only sub should clear LCF acc documentation
    2758 012476 000207                           rts pc
    2759                                ;
    2760                                ; -------------------------------------------------------------------
    2761                                ;
    2762                                ; ground
    2763                                ;
    2764                                lsg:
    2765 012500 105767  166027                   tstb vt105g              ; check if we're in graphics mode?
    2766 012504 001403                           beq 10$                  ; no
    2767 012506 004767  167136                   jsr pc,gparse            ; go do the work
    2768 012512 000411                           br 90$
    2769                                10$:
    2770 012514 120127  000040                   cmpb r1,#40              ; control character?
    2771 012520 103406                           blo 90$                  ; yes, we don't do those here anymore
    2772 012522 120127  000177                   cmpb r1,#177             ; out of 7 bit range?
    2773 012526 103003                           bhis 90$                 ; yes
    2774                                ;
    2775                                ; regular printable characters
    2776                                ;
    2777 012530 004767  177064                   jsr pc,gprint
    2778 012534 000400                           br 90$
    2779                                ;
    2780                                ; exit
    2781                                ;
    2782                                90$:
    2783 012536 000207                           rts pc
    2784                                ;
    2785                                ; -------------------------------------------------------------------
    2786                                ;
    2787                                ; csi param
    2788                                ;
    2789                                lscsip:
    2790 012540 120127  000100                   cmpb r1,#100             ; is this the ending char of the csi sequence?
    2791 012544 103440                           blo 20$                  ; no
    2792 012546 120127  000177                   cmpb r1,#177             ; yes but check it is in range
    2793 012552 103035                           bhis 20$                 ; no, probably an error
    2794 012554 042701  177700                   bic #177700,r1           ; make sure only lowest 6 bits left
    2795 012560 006301                           asl r1                   ; mult by 2
    2796 012562 062701  016316                   add #csitab,r1           ; add start of table
    2797 012566 011101                           mov (r1),r1              ; load address of routine from table
    2798 012570 016767  165762  166002           mov parmt,parm1          ; make normalized copy of 1st parm
    2799 012576 005767  165776                   tst parm1
    2800 012602 001003                           bne 5$
    2801 012604 012767  000001  165766           mov #1,parm1             ; set default
    2802                                5$:
    2803 012612 016767  165742  165762           mov parmt+2,parm2        ; make normalized copy of 2nd parm - more isn't necessary, only the editor commands need normalizing
    2804 012620 005767  165756                   tst parm2
    2805 012624 001003                           bne 6$
    2806 012626 012767  000001  165746           mov #1,parm2
    2807                                6$:
    2808 012634 004711                           jsr pc,(r1)              ; go to the csi routine
    2809 012636 012767  000000  165740           mov #psg,pstate          ; back to ground
    2810 012644 000446                           br 90$
    2811                                ;
    2812                                20$:
    2813 012646 120127  000060                   cmpb r1,#60              ; 30 0
    2814 012652 103431                           blo 30$
    2815 012654 120127  000071                   cmpb r1,#71              ; 39 9
    2816 012660 101026                           bhi 30$
    2817 012662 016700  165666                   mov parmc,r0             ; load parm count
    2818 012666 020027  000016                   cmp r0,#mxcsip           ; check for reasonable value
    2819 012672 103402                           blo 22$                  ; ok?
    2820 012674 012700  000016                   mov #mxcsip,r0           ; if not, load largest offset we can handle
    2821                                22$:
    2822 012700 016002  000556                   mov parmt(r0),r2         ; load old value
    2823 012704 006302                           asl r2                   ; multiply by 10, the hard way. Possibly cheaper than moving to a cpu model that has eis.
    2824 012706 006302                           asl r2
    2825 012710 006302                           asl r2
    2826 012712 066002  000556                   add parmt(r0),r2
    2827 012716 066002  000556                   add parmt(r0),r2
    2828 012722 042701  177760                   bic #177760,r1           ; clear irrelevant bits in the input char
    2829 012726 060102                           add r1,r2                ; add to the total
    2830 012730 010260  000556                   mov r2,parmt(r0)         ; store back
    2831 012734 000412                           br 90$
    2832                                ;
    2833                                30$:
    2834 012736 120127  000073                   cmpb r1,#73              ; 3b ;
    2835 012742 001004                           bne 40$
    2836 012744 062767  000002  165602           add #2,parmc
    2837 012752 000403                           br 90$
    2838                                40$:
    2839 012754 120127  000077                   cmpb r1,#77              ; 3f ?
    2840 012760 001000                           bne 50$
    2841                                ;
    2842                                ; FIXME, I think I can probably get away with ignoring the question mark in ESC[? kind of sequences. If not, then the next plan is to store them in the parm list.
    2843                                ;
    2844                                50$:
    2845                                90$:
    2846 012762 000207                           rts pc
    2847                                ;
    2848                                ; csi ignore
    2849                                ;
    2850                                lscsii:
    2851 012764 012767  000000  165612           mov #psg,pstate
    2852 012772 000207                           rts pc
    2853                                ;
    2854                                ; csi intermediate
    2855                                ;
    2856                                lscsin:
    2857 012774 012767  000000  165602           mov #psg,pstate
    2858 013002 000207                           rts pc
    2859                                ;
    2860                                ; csi entry
    2861                                ;
    2862                                lscsie:
    2863 013004 005067  165544                   clr parmc
    2864 013010 012700  000556                   mov #parmt,r0            ; setup for loop
    2865                                5$:
    2866 013014 005020                           clr (r0)+                ; clear parm
    2867 013016 020027  000576                   cmp r0,#parmt+mxcsip+2   ; hmm this had better be right
    2868 013022 001374                           bne 5$                   ; loop
    2869 013024 120127  000072                   cmpb r1,#72              ; 3a -> transition to csi ignore
    2870 013030 001004                           bne 10$
    2871 013032 012767  000004  165544           mov #pscsii,pstate
    2872 013040 000414                           br 90$
    2873                                10$:
    2874 013042 120127  000060                   cmpb r1,#60              ; 30
    2875 013046 103411                           blo 20$
    2876 013050 120127  000176                   cmpb r1,#176             ; 7e
    2877 013054 101006                           bhi 20$
    2878 013056 012767  000002  165520           mov #pscsip,pstate       ; between 30 and 3f inclusive, except 3a that we tested before; and 40-7e too
    2879 013064 004767  177450                   jsr pc,lscsip            ; and process this character too
    2880 013070 000400                           br 90$
    2881                                20$:
    2882                                90$:
    2883 013072 000207                           rts pc
    2884                                ;
    2885                                ; escape intermediate
    2886                                ;
    2887                                ; I might be able to get away with just mapping this directly from the table and skipping this state. But maybe for later expansion to higher number vt...
    2888                                ;
    2889                                lsei:
    2890 013074 126727  165453  000043           cmpb eichar,#43          ; 23, #
    2891 013102 001036                           bne 20$
    2892 013104 120127  000070                   cmpb r1,#70              ; # 8 - DECALN
    2893 013110 001003                           bne 12$
    2894 013112 004767  171666                   jsr pc,decaln
    2895 013116 000506                           br 90$
    2896                                12$:
    2897 013120 120127  000063                   cmpb r1,#63              ; # 3 - DECDHL top
    2898 013124 001003                           bne 14$
    2899 013126 004767  171700                   jsr pc,decdht
    2900 013132 000500                           br 90$
    2901                                14$:
    2902 013134 120127  000064                   cmpb r1,#64              ; # 4 - DECDHL bottom
    2903 013140 001003                           bne 16$
    2904 013142 004767  171706                   jsr pc,decdhb
    2905 013146 000472                           br 90$
    2906                                16$:
    2907 013150 120127  000065                   cmpb r1,#65              ; # 5 - DECSWL
    2908 013154 001003                           bne 18$
    2909 013156 004767  171736                   jsr pc,decswl
    2910 013162 000464                           br 90$
    2911                                18$:
    2912 013164 120127  000066                   cmpb r1,#66              ; # 6 - DECDWL
    2913 013170 001003                           bne 20$
    2914 013172 004767  171700                   jsr pc,decdwl
    2915 013176 000456                           br 90$
    2916                                20$:
    2917 013200 126727  165347  000050           cmpb eichar,#50          ; 50, ( means font g0 switch
    2918 013206 001005                           bne 30$
    2919 013210 110167  165154                   movb r1,g0set            ; store
    2920 013214 110167  165152                   movb r1,chrset           ; and activate too
    2921 013220 000445                           br 90$
    2922                                30$:
    2923 013222 126727  165325  000051           cmpb eichar,#51          ; 51, ) means font g1 switch
    2924 013230 001005                           bne 40$
    2925 013232 110167  165133                   movb r1,g1set            ; store
    2926 013236 110167  165130                   movb r1,chrset           ; and activate too
    2927 013242 000434                           br 90$
    2928                                40$:
    2929 013244 126727  165303  000131           cmpb eichar,#131         ; Y; VT52 direct cursor address
    2930 013252 001030                           bne 50$                  ; no, check next option
    2931 013254 105767  165251                   tstb vt52                ; check if in vt52 mode?
    2932 013260 001425                           beq 90$                  ; no - that's an error, exit and reset mode to ground
    2933 013262 105767  165244                   tstb vt52yl              ; has the l in ESC-Ylc been set already
    2934 013266 001005                           bne 42$                  ; yes, skip setting it now
    2935 013270 162701  000037                   sub #37,r1               ; debase row number
    2936 013274 110167  165232                   movb r1,vt52yl           ; store it for now
    2937 013300 000420                           br 99$                   ; done, but leave state as is
    2938                                42$:
    2939 013302 162701  000037                   sub #37,r1               ; debase column number
    2940 013306 010167  165046                   mov r1,curc              ; set it in current column
    2941 013312 116701  165214                   movb vt52yl,r1           ; pick up the saved row
    2942 013316 010167  165032                   mov r1,curr              ; set the stored row number
    2943 013322 105067  165204                   clrb vt52yl              ; clear yl for next round
    2944 013326 004767  175522                   jsr pc,fba               ; make sure row and col are normalized
    2945 013332 000400                           br 90$
    2946                                50$:
    2947                                90$:
    2948 013334 012767  000000  165242           mov #psg,pstate
    2949                                99$:
    2950 013342 000207                           rts pc
    2951                                ;
    2952                                ; escape
    2953                                ;
    2954                                lsesc:
    2955 013344 120127  000033                   cmpb r1,#33              ; 1b
    2956 013350 001001                           bne 10$
    2957 013352 000422                           br 90$                   ; ignore
    2958                                10$:
    2959 013354 110167  165173                   movb r1,eichar           ; save the char
    2960 013360 010100                           mov r1,r0                ; make index
    2961 013362 042700  177600                   bic #177600,r0           ; make sure only low 7 bits left
    2962 013366 006300                           asl r0                   ; word index
    2963 013370 016000  015616                   mov esctab(r0),r0        ; get the value
    2964 013374 020027  000100                   cmp r0,#100              ; state value or routine address?
    2965 013400 103003                           bhis 20$                 ; branch for routine
    2966 013402 010067  165176                   mov r0,pstate            ; set new state
    2967 013406 000404                           br 90$
    2968                                20$:
    2969 013410 004710                           jsr pc,(r0)              ; go to esc routine
    2970 013412 012767  000000  165164           mov #psg,pstate          ; set ground
    2971                                90$:
    2972 013420 000207                           rts pc
    2973                                ;
    2974                                ; osc string
    2975                                ;
    2976                                lsosc:
    2977 013422 012767  000000  165154           mov #psg,pstate
    2978 013430 000207                           rts pc
    2979                                ;
    2980                                ; sos/pm/apc string
    2981                                ;
    2982                                lsstr:
    2983 013432 012767  000000  165144           mov #psg,pstate
    2984 013440 000207                           rts pc
    2985                                ;
    2986                                ; dcs entry
    2987                                ;
    2988                                lsdcse:
    2989 013442 012767  000000  165134           mov #psg,pstate
    2990 013450 000207                           rts pc
    2991                                ;
    2992                                ; dcs param
    2993                                ;
    2994                                lsdcsp:
    2995 013452 012767  000000  165124           mov #psg,pstate
    2996 013460 000207                           rts pc
    2997                                ;
    2998                                ; dcs ignore
    2999                                ;
    3000                                lsdcsi:
    3001 013462 012767  000000  165114           mov #psg,pstate
    3002 013470 000207                           rts pc
    3003                                ;
    3004                                ; dcs intermediate
    3005                                ;
    3006                                lsdcsn:
    3007 013472 012767  000000  165104           mov #psg,pstate
    3008 013500 000207                           rts pc
    3009                                ;
    3010                                ; dcs passthrough
    3011                                ;
    3012                                lsdcst:
    3013 013502 012767  000000  165074           mov #psg,pstate
    3014 013510 000207                           rts pc
    3015                                ;
    3016                                ; error/dummy state
    3017                                ;
    3018                                lsdummy:
    3019 013512 012767  000000  165064           mov #psg,pstate
    3020 013520 000207                           rts pc
    3021                                ;
    3022                                ; gbclr - clear the graph buffers
    3023                                ;
    3024                                gbclr:
    3025 013522 010246                           mov r2,-(r6)                  ; push r2
    3026 013524 010146                           mov r1,-(r6)                  ; push r1
    3027 013526 005000                           clr r0                        ; zero
    3028 013530 012701  110000                   mov #110000,r1                ; start of graph0
    3029 013534 012702  114000                   mov #114000,r2                ; end of graph1
    3030                                10$:
    3031 013540 010021                           mov r0,(r1)+                  ; loop over buffer; word write so this clears both graph points and markers
    3032 013542 020201                           cmp r2,r1                     ; check for end
    3033 013544 001375                           bne 10$                       ; branch if not yet
    3034                                80$:
    3035 013546 012601                           mov (r6)+,r1                  ; pop r1
    3036 013550 012602                           mov (r6)+,r2                  ; pop r2
    3037 013552 000207                           rts pc
    3038                                ;
    3039                                ; rcvgetc - routine to consume a character from the slu rcv buf. Clobbers r0,r1; r0 is nonzero if a character is produced in r1
    3040                                ;
    3041                                rcvgetc:
    3042 013554 012737  000340  177776           mov #340,@#177776             ; disable interrupts
    3043 013562 016700  164560                   mov rcvprod,r0                ; get produce pointer in r0
    3044 013566 016701  164552                   mov rcvcons,r1                ; get consume pointer in r1
    3045 013572 020001                           cmp r0,r1                     ; equal?
    3046 013574 001002                           bne 10$                       ; no, continue
    3047 013576 005000                           clr r0                        ; equal, signal buffer was empty
    3048 013600 000436                           br 90$                        ; goto exit
    3049                                10$:
    3050 013602 005367  164532                   dec rcvbfc                    ; decrement buffer count
    3051 013606 005200                           inc r0                        ; increment produce pointer - we're producing
    3052 013610 020027  000200                   cmp r0,#rcvbln                ; need to wrap?
    3053 013614 103401                           blo 20$                       ; no, jump
    3054 013616 005000                           clr r0                        ; wrap in buffer
    3055                                20$:
    3056 013620 010067  164522                   mov r0,rcvprod                ; store updated produce pointer
    3057 013624 062700  000100                   add #rcvbuf,r0                ; add address to offset
    3058 013630 111001                           movb (r0),r1                  ; load byte into r1; r0 - success flag - is certain to be nonzero after using it as the address
    3059 013632 042701  177400                   bic #177400,r1                ; make sure upper byte is clear
    3060                                ;
    3061 013636 105767  164500                   tstb xoff                     ; check xoff state
    3062 013642 001415                           beq 30$                       ; not on, nothing to do
    3063 013644 026727  164470  000020           cmp rcvbfc,#rcvblo            ; check against low water mark
    3064 013652 103011                           bhis 30$                      ; still over, then branch
    3065 013654 105767  164463                   tstb xoffm                    ; check xoff-manual state
    3066 013660 001006                           bne 30$                       ; on, then don't send xon automatically
    3067 013662 012700  000021                   mov #21,r0                    ; load dc1/control-q
    3068 013666 004767  001122                   jsr pc,xmit                   ; send it
    3069 013672 105067  164444                   clrb xoff                     ; clear flag
    3070                                30$:
    3071                                90$:
    3072 013676 012737  000000  177776           mov #0,@#177776               ; enable interrupts
    3073 013704 000207                           rts pc
    3074                                ;
    3075                                ; ps2getc - routine to consume a character from the ps2 rcv buf. Clobbers r0,r1; r0 is nonzero if a character is produced in r1
    3076                                ;
    3077                                ps2getc:
    3078 013706 012737  000340  177776           mov #340,@#177776             ; disable interrupts
    3079 013714 016700  164432                   mov ps2prod,r0                ; get produce pointer in r0
    3080 013720 016701  164424                   mov ps2cons,r1                ; get consume pointer in r1
    3081 013724 020001                           cmp r0,r1                     ; equal?
    3082 013726 001002                           bne 10$                       ; no, continue
    3083 013730 005000                           clr r0                        ; equal, signal buffer was empty
    3084 013732 000414                           br 90$                        ; goto exit
    3085                                10$:
    3086 013734 005200                           inc r0                        ; increment produce pointer - we're producing
    3087 013736 020027  000040                   cmp r0,#ps2bln                ; need to wrap?
    3088 013742 103401                           blo 20$                       ; no, jump
    3089 013744 005000                           clr r0                        ; wrap in buffer
    3090                                20$:
    3091 013746 010067  164400                   mov r0,ps2prod                ; store updated produce pointer
    3092 013752 062700  000300                   add #ps2buf,r0                ; add address to offset
    3093 013756 111001                           movb (r0),r1                  ; load byte into r1; r0 - success flag - is certain to be nonzero after using it as the address
    3094 013760 042701  177400                   bic #177400,r1                ; make sure upper byte is clear
    3095                                90$:
    3096 013764 012737  000000  177776           mov #0,@#177776               ; enable interrupts
    3097 013772 000207                           rts pc
    3098                                ;
    3099                                ; ps2xku - routine to maintain status flags for key up events
    3100                                ;
    3101                                ps2xku:
    3102 013774 120127  000024                   cmpb r1,#24                   ; left control
    3103 014000 001011                           bne 14$
    3104 014002 105767  164515                   tstb ps2ex
    3105 014006 001003                           bne 10$
    3106 014010 105067  164510                   clrb ps2lc
    3107 014014 000415                           br 20$
    3108                                10$:
    3109 014016 105067  164503                   clrb ps2rc
    3110 014022 000412                           br 20$
    3111                                14$:
    3112 014024 120127  000022                   cmpb r1,#22                   ; left shift
    3113 014030 001002                           bne 18$
    3114 014032 105067  164470                   clrb ps2ls
    3115                                18$:
    3116 014036 120127  000131                   cmpb r1,#131                  ; right shift
    3117 014042 001002                           bne 20$
    3118 014044 105067  164457                   clrb ps2rs
    3119                                20$:
    3120 014050 000207                           rts pc
    3121                                ;
    3122                                ; ps2xkd - routine to maintain status flags for key down events
    3123                                ;
    3124                                ps2xkd:
    3125 014052 010100                           mov r1,r0                     ; set return code to nonzero
    3126 014054 120127  000024                   cmpb r1,#24                   ; left control, or right control if extended flag is on
    3127 014060 001015                           bne 14$
    3128 014062 105767  164435                   tstb ps2ex                    ; extended flag on?
    3129 014066 001005                           bne 10$
    3130 014070 112767  000001  164426           movb #1,ps2lc                 ; hex 14 - left control down
    3131 014076 005000                           clr r0
    3132 014100 000444                           br 90$
    3133                                10$:
    3134 014102 112767  000001  164415           movb #1,ps2rc                 ; hex e0 14 - right control down
    3135 014110 005000                           clr r0
    3136 014112 000437                           br 90$
    3137                                14$:
    3138 014114 120127  000022                   cmpb r1,#22                   ; left shift
    3139 014120 001005                           bne 18$
    3140 014122 112767  000001  164376           movb #1,ps2ls
    3141 014130 005000                           clr r0
    3142 014132 000427                           br 90$
    3143                                18$:
    3144 014134 120127  000131                   cmpb r1,#131                  ; right shift
    3145 014140 001005                           bne 20$
    3146 014142 112767  000001  164357           movb #1,ps2rs
    3147 014150 005000                           clr r0
    3148 014152 000417                           br 90$
    3149                                20$:
    3150 014154 120127  000130                   cmpb r1,#130                  ; caps lock
    3151 014160 001014                           bne 30$
    3152 014162 105767  164342                   tstb ps2cl
    3153 014166 001404                           beq 25$
    3154 014170 105067  164334                   clrb ps2cl
    3155 014174 005000                           clr r0
    3156 014176 000405                           br 90$
    3157                                25$:
    3158 014200 112767  000001  164322           movb #1,ps2cl
    3159 014206 005000                           clr r0
    3160 014210 000400                           br 90$
    3161                                30$:
    3162                                90$:
    3163 014212 000207                           rts pc
    3164                                ;
    3165                                ; ps2xlt - routine to translate ps2 scan code to ascii. Input scancode in r1; output code or ascii in r1, r0 nonzero if valid
    3166                                ;
    3167                                ps2xlt:
    3168 014214 105767  164302                   tstb ps2up                    ; check up flag
    3169 014220 001410                           beq 1$                        ; skip if not set
    3170 014222 004767  177546                   jsr pc,ps2xku                 ; call routine for break processing - all others can be skipped
    3171 014226 105067  164270                   clrb ps2up                    ; clear up flag
    3172 014232 105067  164265                   clrb ps2ex                    ; clear ext flag
    3173                                ;         br 99$                        ; done, no production
    3174 014236 005000                           clr r0                        ; set flag for no production
    3175 014240 000207                           rts pc                        ; return
    3176                                
    3177                                1$:
    3178 014242 120127  000340                   cmpb r1,#340                  ; check if the current code is e0
    3179 014246 001004                           bne 2$
    3180 014250 110167  164247                   movb r1,ps2ex                 ; set marker
    3181                                ;         br 99$                        ; done, no production
    3182 014254 005000                           clr r0                        ; set flag for no production
    3183 014256 000207                           rts pc                        ; return
    3184                                2$:
    3185 014260 120127  000360                   cmpb r1,#360                  ; check if the current code is f0
    3186 014264 001004                           bne 3$
    3187 014266 110167  164230                   movb r1,ps2up                 ; set marker
    3188                                ;         br 99$                        ; done, no production
    3189 014272 005000                           clr r0                        ; set flag for no production
    3190 014274 000207                           rts pc                        ; return
    3191                                3$:
    3192                                10$:
    3193 014276 105767  164221                   tstb ps2ex                    ; extended key code flag set?
    3194 014302 001422                           beq 12$                       ; no
    3195 014304 105767  164212                   tstb ps2up                    ; key up flag set?
    3196 014310 001164                           bne 99$                       ; already did those, done here
    3197 014312 004767  177534                   jsr pc,ps2xkd                 ; check for extended key down. Right control only, really
    3198 014316 105067  164201                   clrb ps2ex                    ; clear the extended code flag
    3199 014322 005700                           tst r0                        ; did we get anything?
    3200 014324 001556                           beq 99$                       ; done, no production
    3201 014326 105067  164171                   clrb ps2ex                    ; clear extended key code flag
    3202 014332 042701  177600                   bic #177600,r1                ; mask to low 7 bits
    3203 014336 116101  017200                   movb ps2tb3(r1),r1            ; load the code
    3204 014342 105701                           tstb r1                       ; check if we got anything
    3205 014344 001401                           beq 12$                       ; no
    3206 014346 000542                           br 98$                        ; done, exit with result
    3207                                12$:
    3208 014350 120127  000360                   cmpb r1,#360                  ; key up - f0?
    3209 014354 001004                           bne 14$                       ; no
    3210 014356 112767  000001  164136           movb #1,ps2up                 ; set flag
    3211 014364 000536                           br 99$
    3212                                14$:
    3213 014366 120127  000340                   cmpb r1,#340                  ; extended key - e0?
    3214 014372 001004                           bne 16$                       ; no
    3215 014374 112767  000001  164121           movb #1,ps2ex                 ; set flag
    3216 014402 000527                           br 99$
    3217                                16$:
    3218 014404 004767  177442                   jsr pc,ps2xkd                 ; process key down status events
    3219 014410 005700                           tst r0                        ; result?
    3220 014412 001001                           bne 18$                       ; no
    3221 014414 000522                           br 99$
    3222                                18$:
    3223 014416 132701  000200                   bitb #200,r1                  ; check if bit is set
    3224 014422 001117                           bne 99$                       ; yes, skip rest - don't know what to do with it
    3225                                20$:
    3226 014424 042701  177600                   bic #177600,r1                ; mask to low 7 bits
    3227 014430 105767  164070                   tstb ps2lc                    ; left control down?
    3228 014434 001004                           bne 30$                       ; yes
    3229 014436 105767  164063                   tstb ps2rc                    ; right control down?
    3230 014442 001001                           bne 30$                       ; yes
    3231 014444 000460                           br 60$                        ; neither control key active, onwards
    3232                                30$:
    3233 014446 105767  164054                   tstb ps2ls                    ; left shift down?
    3234 014452 001006                           bne 32$                       ; yes, load from shifted table
    3235 014454 105767  164047                   tstb ps2rs                    ; right shift down?
    3236 014460 001003                           bne 32$                       ; yes, load from shifted table
    3237 014462 116101  016600                   movb ps2tb1(r1),r1            ; load byte from unshifted table
    3238 014466 000402                           br 33$                        ; skip forward
    3239                                32$:
    3240 014470 116101  017000                   movb ps2tb2(r1),r1            ; load from shifted table
    3241                                33$:
    3242 014474 105701                           tstb r1                       ; was something nonzero there?
    3243 014476 001471                           beq 99$                       ; no, then done without result
    3244 014500 120127  000141                   cmpb r1,#141                  ; lower case a
    3245 014504 103424                           blo 40$                       ; below? then check the other ranges
    3246 014506 120127  000172                   cmpb r1,#172                  ; lower case z
    3247 014512 101063                           bhi 99$                       ; over? then done without result
    3248 014514 162701  000140                   sub #140,r1                   ; controllify
    3249 014520 120127  000023                   cmpb r1,#23                   ; is it xoff/ctrl-s?
    3250 014524 001003                           bne 35$                       ; no, continue
    3251 014526 105267  163611                   incb xoffm                    ; set xoff-manual flag
    3252 014532 000410                           br 39$                        ; done
    3253                                35$:
    3254 014534 120127  000021                   cmpb r1,#21                   ; is it xon/ctrl-q?
    3255 014540 001005                           bne 39$                       ; no, continue
    3256 014542 105067  163575                   clrb xoffm                    ; clear xoff-manual flag
    3257 014546 105067  163570                   clrb xoff                     ; and also clear xoff flag
    3258 014552 000400                           br 39$                        ; done
    3259                                39$:
    3260 014554 000437                           br 98$                        ; exit and produce
    3261                                40$:
    3262 014556 120127  000100                   cmpb r1,#100                  ; @
    3263 014562 001406                           beq 41$                       ; equal? then go
    3264 014564 120127  000133                   cmpb r1,#133                  ; [
    3265 014570 103434                           blo 99$                       ; lower? then no result
    3266 014572 120127  000137                   cmpb r1,#137                  ; _
    3267 014576 101031                           bhi 99$                       ; higher? then no result
    3268                                41$:
    3269 014600 162701  000100                   sub #100,r1                   ; controllify
    3270 014604 000423                           br 98$                        ; exit and produce
    3271                                60$:
    3272 014606 105767  163714                   tstb ps2ls                    ; left shift down?
    3273 014612 001011                           bne 70$                       ; yes
    3274 014614 105767  163707                   tstb ps2rs                    ; right shift down?
    3275 014620 001006                           bne 70$                       ; yes
    3276 014622 105767  163702                   tstb ps2cl                    ; caps lock on?
    3277 014626 001003                           bne 70$                       ; yes
    3278 014630 116101  016600                   movb ps2tb1(r1),r1            ; load from regular translate table
    3279 014634 000402                           br 72$
    3280                                70$:
    3281 014636 116101  017000                   movb ps2tb2(r1),r1            ; load from shifted translate table
    3282                                72$:
    3283 014642 042701  177400                   bic #177400,r1                ; clear upper byte
    3284 014646 105701                           tstb r1                       ; was something nonzero there?
    3285 014650 001404                           beq 99$                       ; no - finished
    3286 014652 000400                           br 98$
    3287                                
    3288                                98$:                                   ; exit path, code translated, make sure r0 is nonzero
    3289 014654 012700  000001                   mov #1,r0
    3290 014660 000207                           rts pc
    3291                                
    3292                                99$:                                   ; exit path, no code - make sure r0 is zero
    3293 014662 005000                           clr r0
    3294 014664 000207                           rts pc
    3295                                
    3296                                ;
    3297                                ; interrupt service routine - receive from slu
    3298                                ;
    3299                                ivecrcv:
    3300 014666 105737  177560                   tstb @#rcsr                   ; check slu - did we really receive something?
    3301 014672 100044                           bpl 90$                       ; positive means ready bit is not set
    3302 014674 010046                           mov r0,-(sp)                  ; save r0
    3303 014676 010146                           mov r1,-(sp)                  ; save r1
    3304                                
    3305 014700 113701  177562                   movb @#rbuf,r1                ; copy received character into r1 - this also resets the receiver for the next byte
    3306                                
    3307 014704 016700  163434                   mov rcvcons,r0                ; get consume pointer in r0
    3308 014710 005200                           inc r0                        ; increment consume pointer - we're about to consume
    3309 014712 020027  000200                   cmp r0,#rcvbln                ; check for max size of buffer
    3310 014716 103401                           blo 20$                       ; less?
    3311 014720 005000                           clr r0                        ; if not less, then start at zero
    3312                                20$:
    3313 014722 020067  163420                   cmp r0,rcvprod                ; after incrementing consume, produce and consume should not be the same - that would mean a buffer overrun
    3314 014726 001407                           beq 80$                       ; skip storing if buffer overrun
    3315 014730 005267  163404                   inc rcvbfc                    ; increment buffer count
    3316 014734 010067  163404                   mov r0,rcvcons                ; update consume pointer
    3317 014740 062700  000100                   add #rcvbuf,r0                ; add base to pointer
    3318 014744 110110                           movb r1,(r0)                  ; store the received character into buffer
    3319                                80$:
    3320 014746 026727  163366  000120           cmp rcvbfc,#rcvbhi            ; above high water mark?
    3321 014754 103411                           blo 85$                       ; no, go on
    3322 014756 105767  163360                   tstb xoff                     ; are we in xoff state already?
    3323 014762 001006                           bne 85$                       ; yes, don't send again
    3324 014764 105267  163352                   incb xoff                     ; set xoff flag
    3325 014770 012700  000023                   mov #23,r0                    ; load ctrl-s/dc3
    3326 014774 004767  000014                   jsr pc,xmit                   ; send
    3327                                85$:
    3328 015000 012601                           mov (sp)+,r1                  ; restore r1
    3329 015002 012600                           mov (sp)+,r0                  ; restore r0
    3330                                90$:
    3331 015004 012737  000100  177560           mov #100,@#rcsr               ; make sure interrupt enable is set again
    3332 015012 000002                           rti
    3333                                ;
    3334                                ; xmit - for now, the bare minimum to get stuff out. May need to be reworked to a queue and interrupt thing later
    3335                                ;
    3336                                xmit:
    3337                                10$:
    3338 015014 105737  177564                   tstb @#xcsr                   ; check if xmit ready bit is set
    3339 015020 100375                           bpl 10$                       ; jump if not
    3340 015022 110037  177566                   movb r0,@#xbuf                ; write the xmit register
    3341 015026 000207                           rts pc
    3342                                ;
    3343                                ; interrupt service routine - slu xmit
    3344                                ;
    3345                                ivecxmt:
    3346 015030 000002                           rti
    3347                                
    3348                                ;
    3349                                ; interrupt service routine - receive from ps2
    3350                                ;
    3351                                ivecps2:
    3352 015032 105737  150000                   tstb @#150000                 ; check ps2 - did we really receive something?
    3353 015036 100026                           bpl 90$                       ; positive means ready bit is not set
    3354 015040 010046                           mov r0,-(sp)                  ; save r0
    3355 015042 010146                           mov r1,-(sp)                  ; save r1
    3356                                
    3357 015044 016700  163300                   mov ps2cons,r0                ; get consume pointer in r0
    3358 015050 016701  163276                   mov ps2prod,r1                ; get produce pointer in r1
    3359 015054 005200                           inc r0                        ; increment consume pointer - we're about to consume
    3360 015056 020027  000040                   cmp r0,#ps2bln                ; check for max size of buffer
    3361 015062 103401                           blo 20$                       ; less?
    3362 015064 005000                           clr r0                        ; if yes, then start at zero
    3363                                20$:
    3364 015066 020001                           cmp r0,r1                     ; after incrementing consume, produce and consume should not be the same - that would mean a buffer overrun
    3365 015070 001407                           beq 80$                       ; skip storing if buffer overrun
    3366                                
    3367 015072 010067  163252                   mov r0,ps2cons                ; update consume pointer
    3368 015076 113701  150002                   movb @#150002,r1              ; copy received character into r1
    3369 015102 062700  000300                   add #ps2buf,r0                ; add base to pointer
    3370 015106 110110                           movb r1,(r0)                  ; store into buffer
    3371                                
    3372                                80$:
    3373 015110 012601                           mov (sp)+,r1                  ; restore r1
    3374 015112 012600                           mov (sp)+,r0                  ; restore r0
    3375                                90$:
    3376 015114 012737  000100  150000           mov #100,@#150000             ; make sure interrupt enable is set again
    3377 015122 000002                           rti
    3378                                
    3379 015124    110     145     154  hello:   .asciz /Hello, world: vt100 t42 /
         015127    154     157     054  
         015132    040     167     157  
         015135    162     154     144  
         015140    072     040     166  
         015143    164     061     060  
         015146    060     040     164  
         015151    064     062     040  
         015154    000                  
    3380                                
    3381 015155    000                           .even
    3382                                ;
    3383                                ; parser jump table
    3384                                ;
    3385 015156 012500                  ptab:    .word lsg                ; parse state: ground                     ; 0
    3386 015160 012540                           .word lscsip             ; parse state: csi param                  ; 2
    3387 015162 012764                           .word lscsii             ; parse state: csi ignore                 ; 4
    3388 015164 012774                           .word lscsin             ; parse state: csi intermediate           ; 6
    3389 015166 013004                           .word lscsie             ; parse state: csi entry                  ; 10
    3390 015170 013074                           .word lsei               ; parse state: escape intermediate        ; 12
    3391 015172 013344                           .word lsesc              ; parse state: escape                     ; 14
    3392 015174 013422                           .word lsosc              ; parse state: osc string                 ; 16
    3393 015176 013432                           .word lsstr              ; parse state: sos/pm/apc string          ; 20
    3394 015200 013442                           .word lsdcse             ; parse state: dcs entry                  ; 22
    3395 015202 013452                           .word lsdcsp             ; parse state: dcs param                  ; 24
    3396 015204 013462                           .word lsdcsi             ; parse state: dcs ignore                 ; 26
    3397 015206 013472                           .word lsdcsn             ; parse state: dcs intermediate           ; 30
    3398 015210 013502                           .word lsdcst             ; parse state: dcs passthrough            ; 32
    3399 015212 013512                           .word lsdummy            ; parse state: dummy                      ; 34
    3400 015214 013512                           .word lsdummy            ; parse state: dummy                      ; 36
    3401                                ;
    3402                                ; table for state transitions from anywhere
    3403                                ;
    3404                                ptrans:
    3405                                ;                   0      1      2      3      4      5      6      7      8      9      a      b      c      d      e      f
    3406 015216    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 00-0f
         015221    000     000     000  
         015224    000     000     000  
         015227    000     000     000  
         015232    000     000     000  
         015235    000                  
    3407 015236    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,   psg,     0,   psg, psesc,     0,     0,     0,     0   ; 10-1f
         015241    000     000     000  
         015244    000     000     000  
         015247    000     000     014  
         015252    000     000     000  
         015255    000                  
    3408 015256    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 20-2f
         015261    000     000     000  
         015264    000     000     000  
         015267    000     000     000  
         015272    000     000     000  
         015275    000                  
    3409 015276    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 30-3f
         015301    000     000     000  
         015304    000     000     000  
         015307    000     000     000  
         015312    000     000     000  
         015315    000                  
    3410 015316    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 40-4f
         015321    000     000     000  
         015324    000     000     000  
         015327    000     000     000  
         015332    000     000     000  
         015335    000                  
    3411 015336    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 50-5f
         015341    000     000     000  
         015344    000     000     000  
         015347    000     000     000  
         015352    000     000     000  
         015355    000                  
    3412 015356    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 60-6f
         015361    000     000     000  
         015364    000     000     000  
         015367    000     000     000  
         015372    000     000     000  
         015375    000                  
    3413 015376    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 70-7f
         015401    000     000     000  
         015404    000     000     000  
         015407    000     000     000  
         015412    000     000     000  
         015415    000                  
    3414 015416    000     000     000           .byte    psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg,   psg   ; 80-8f
         015421    000     000     000  
         015424    000     000     000  
         015427    000     000     000  
         015432    000     000     000  
         015435    000                  
    3415 015436    022     000     000           .byte psdcse,   psg,   psg,   psg,   psg,   psg,   psg,   psg, psstr,   psg,   psg,pscsie,   psg, psosc, psstr, psstr   ; 90-9f
         015441    000     000     000  
         015444    000     000     020  
         015447    000     000     010  
         015452    000     016     020  
         015455    020                  
    3416 015456    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; a0-af
         015461    000     000     000  
         015464    000     000     000  
         015467    000     000     000  
         015472    000     000     000  
         015475    000                  
    3417 015476    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; b0-bf
         015501    000     000     000  
         015504    000     000     000  
         015507    000     000     000  
         015512    000     000     000  
         015515    000                  
    3418 015516    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; c0-cf
         015521    000     000     000  
         015524    000     000     000  
         015527    000     000     000  
         015532    000     000     000  
         015535    000                  
    3419 015536    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; d0-df
         015541    000     000     000  
         015544    000     000     000  
         015547    000     000     000  
         015552    000     000     000  
         015555    000                  
    3420 015556    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; e0-ef
         015561    000     000     000  
         015564    000     000     000  
         015567    000     000     000  
         015572    000     000     000  
         015575    000                  
    3421 015576    000     000     000           .byte      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; f0-ff
         015601    000     000     000  
         015604    000     000     000  
         015607    000     000     000  
         015612    000     000     000  
         015615    000                  
    3422                                ;
    3423                                ; esctab - states and routines for escape state
    3424                                ;
    3425                                esctab:
    3426                                ;                   0      1      2      3      4      5      6      7      8      9      a      b      c      d      e      f
    3427 015616 000000  000000  000000           .word      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 00-0f
         015624 000000  000000  000000  
         015632 000000  000000  000000  
         015640 000000  000000  000000  
         015646 000000  000000  000000  
         015654 000000                  
    3428 015656 000000  000000  000000           .word      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 10-1f
         015664 000000  000000  000000  
         015672 000000  000000  000000  
         015700 000000  000000  000000  
         015706 000000  000000  000000  
         015714 000000                  
    3429 015716 000012  000012  000012           .word   psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei,  psei   ; 20-2f
         015724 000012  000012  000012  
         015732 000012  000012  000012  
         015740 000012  000012  000012  
         015746 000012  000012  000012  
         015754 000012                  
    3430 015756 000000  005412  005432           .word      0,  esc1,  esc2,     0,     0,     0,     0,  esc7,  esc8,     0,     0,     0, esc3c, esc3d, esc3e,     0   ; 30-3f
         015764 000000  000000  000000  
         015772 000000  005440  005500  
         016000 000000  000000  000000  
         016006 005544  005552  005562  
         016014 000000                  
    3431 016016 000000  005570  005602           .word      0, escua, escub, escuc, escud, escue, escuf, escug, escuh, escui, escuj, escuk,     0, escum,     0,     0   ; 40-4f
         016024 005614  005626  005676  
         016032 005734  005736  005740  
         016040 006002  006032  006054  
         016046 000000  006104  000000  
         016054 000000                  
    3432 016056 000000  000000  000000           .word      0,     0,     0,     0,     0,     0,     0,     0,     0,  psei, escuz,pscsie,     0,     0,     0,     0   ; 50-5f
         016064 000000  000000  000000  
         016072 000000  000000  000000  
         016100 000012  006160  000010  
         016106 000000  000000  000000  
         016114 000000                  
    3433 016116 000000  000000  000000           .word      0,     0,     0, esclc,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 60-6f
         016124 006226  000000  000000  
         016132 000000  000000  000000  
         016140 000000  000000  000000  
         016146 000000  000000  000000  
         016154 000000                  
    3434 016156 000000  000000  000000           .word      0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0   ; 70-7f
         016164 000000  000000  000000  
         016172 000000  000000  000000  
         016200 000000  000000  000000  
         016206 000000  000000  000000  
         016214 000000                  
    3435                                ;
    3436                                ; ctab - a routine for each control character
    3437                                ;
    3438                                ctab:
    3439 016216 012062                           .word cnul                    ; NUL - 000
    3440 016220 000000                           .word 0                       ;     - 001
    3441 016222 000000                           .word 0                       ;     - 002
    3442 016224 000000                           .word 0                       ;     - 003
    3443 016226 000000                           .word 0                       ;     - 004
    3444 016230 012064                           .word cenq                    ; ENQ - 005
    3445 016232 000000                           .word 0                       ;     - 006
    3446 016234 000000                           .word 0                       ;     - 007
    3447 016236 012176                           .word cbs                     ; BS  - 010
    3448 016240 012216                           .word cht                     ; HT  - 011
    3449 016242 012316                           .word clf                     ; LF  - 012
    3450 016244 012316                           .word clf                     ; VT  - 013
    3451 016246 012316                           .word clf                     ; FF  - 014
    3452 016250 012424                           .word ccr                     ; CR  - 015
    3453 016252 012444                           .word cso                     ; SO  - 016
    3454 016254 012454                           .word csi                     ; SI  - 017
    3455 016256 000000                           .word 0                       ;     - 020
    3456 016260 000000                           .word 0                       ; DC1 - 021 - XON
    3457 016262 000000                           .word 0                       ;     - 022
    3458 016264 000000                           .word 0                       ; DC3 - 023 - XOFF
    3459 016266 000000                           .word 0                       ;     - 024
    3460 016270 000000                           .word 0                       ;     - 025
    3461 016272 000000                           .word 0                       ;     - 026
    3462 016274 000000                           .word 0                       ;     - 027
    3463 016276 012464                           .word ccan                    ; CAN - 030
    3464 016300 000000                           .word 0                       ;     - 031
    3465 016302 012464                           .word ccan                    ; SUB - 032
    3466 016304 000000                           .word 0                       ; ESC - 033
    3467 016306 000000                           .word 0                       ;     - 034
    3468 016310 000000                           .word 0                       ;     - 035
    3469 016312 000000                           .word 0                       ;     - 036
    3470 016314 000000                           .word 0                       ;     - 037
    3471                                ;
    3472                                ; csitab - a routine for each control sequence
    3473                                ;
    3474                                csitab:
    3475 016316 006232                           .word csiat                   ; @  - 100
    3476 016320 006322                           .word csiua                   ; A  - 101
    3477 016322 006342                           .word csiub                   ; B  - 102
    3478 016324 006362                           .word csiuc                   ; C  - 103
    3479 016326 006402                           .word csiud                   ; D  - 104
    3480 016330 011052                           .word csinul                  ; E  - 105
    3481 016332 011052                           .word csinul                  ; F  - 106
    3482 016334 011052                           .word csinul                  ; G  - 107
    3483 016336 006422                           .word csiuh                   ; H  - 110
    3484 016340 011052                           .word csinul                  ; I  - 111
    3485 016342 006450                           .word csiuj                   ; J  - 112
    3486 016344 006602                           .word csiuk                   ; K  - 113
    3487 016346 006742                           .word csiul                   ; L  - 114
    3488 016350 007066                           .word csium                   ; M  - 115
    3489 016352 011052                           .word csinul                  ; N  - 115
    3490 016354 011052                           .word csinul                  ; O  - 116
    3491 016356 007220                           .word csiup                   ; P  - 120
    3492 016360 011052                           .word csinul                  ; Q  - 121
    3493 016362 011052                           .word csinul                  ; R  - 122
    3494 016364 011052                           .word csinul                  ; S  - 123
    3495 016366 011052                           .word csinul                  ; T  - 124
    3496 016370 011052                           .word csinul                  ; U  - 125
    3497 016372 011052                           .word csinul                  ; V  - 126
    3498 016374 011052                           .word csinul                  ; W  - 127
    3499 016376 007304                           .word csiux                   ; X  - 130
    3500 016400 011052                           .word csinul                  ; Y  - 131
    3501 016402 011052                           .word csinul                  ; Z  - 132
    3502 016404 011052                           .word csinul                  ; [  - 133
    3503 016406 011052                           .word csinul                  ; \  - 134
    3504 016410 011052                           .word csinul                  ; ]  - 135
    3505 016412 011052                           .word csinul                  ; ^  - 136
    3506 016414 011052                           .word csinul                  ; _  - 137
    3507 016416 011052                           .word csinul                  ; `  - 140
    3508 016420 011052                           .word csinul                  ; a  - 141
    3509 016422 011052                           .word csinul                  ; b  - 142
    3510 016424 007360                           .word csilc                   ; c  - 143
    3511 016426 011052                           .word csinul                  ; d  - 144
    3512 016430 011052                           .word csinul                  ; e  - 145
    3513 016432 007412                           .word csilf                   ; f  - 146
    3514 016434 007420                           .word csilg                   ; g  - 147
    3515 016436 007476                           .word csilh                   ; h  - 150
    3516 016440 011052                           .word csinul                  ; i  - 151
    3517 016442 011052                           .word csinul                  ; j  - 152
    3518 016444 011052                           .word csinul                  ; k  - 153
    3519 016446 007674                           .word csill                   ; l  - 154
    3520 016450 010110                           .word csilm                   ; m  - 155
    3521 016452 010330                           .word csiln                   ; n  - 156
    3522 016454 011052                           .word csinul                  ; o  - 157
    3523 016456 011052                           .word csinul                  ; p  - 160
    3524 016460 011052                           .word csinul                  ; q  - 161
    3525 016462 010572                           .word csilr                   ; r  - 162
    3526 016464 011052                           .word csinul                  ; s  - 163
    3527 016466 011052                           .word csinul                  ; t  - 164
    3528 016470 011052                           .word csinul                  ; u  - 165
    3529 016472 011052                           .word csinul                  ; v  - 166
    3530 016474 011052                           .word csinul                  ; w  - 167
    3531 016476 010710                           .word csilx                   ; x  - 170
    3532 016500 011046                           .word csily                   ; y  - 171
    3533 016502 011052                           .word csinul                  ; z  - 172
    3534 016504 011052                           .word csinul                  ; {  - 173
    3535 016506 011052                           .word csinul                  ; |  - 174
    3536 016510 011052                           .word csinul                  ; }  - 175
    3537 016512 011052                           .word csinul                  ; ~  - 176
    3538 016514 011052                           .word csinul                  ; DEL  - 177
    3539                                ;
    3540                                ; ltab: a table of the starting address of each line within the buffer
    3541                                ;
    3542                                ltab:
    3543 016516 100000                           .word 100000                  ; line 1
    3544 016520 100240                           .word 100240                  ; line 2
    3545 016522 100500                           .word 100500                  ; line 3
    3546 016524 100740                           .word 100740                  ; line 4
    3547 016526 101200                           .word 101200                  ; line 5
    3548 016530 101440                           .word 101440                  ; line 6
    3549 016532 101700                           .word 101700                  ; line 7
    3550 016534 102140                           .word 102140                  ; line 8
    3551 016536 102400                           .word 102400                  ; line 9
    3552 016540 102640                           .word 102640                  ; line 10
    3553 016542 103100                           .word 103100                  ; line 11
    3554 016544 103340                           .word 103340                  ; line 12
    3555 016546 103600                           .word 103600                  ; line 13
    3556 016550 104040                           .word 104040                  ; line 14
    3557 016552 104300                           .word 104300                  ; line 15
    3558 016554 104540                           .word 104540                  ; line 16
    3559 016556 105000                           .word 105000                  ; line 17
    3560 016560 105240                           .word 105240                  ; line 18
    3561 016562 105500                           .word 105500                  ; line 19
    3562 016564 105740                           .word 105740                  ; line 20
    3563 016566 106200                           .word 106200                  ; line 21
    3564 016570 106440                           .word 106440                  ; line 22
    3565 016572 106700                           .word 106700                  ; line 23
    3566 016574 107140                           .word 107140                  ; line 24
    3567 016576 107400                           .word 107400                  ; line 25
    3568                                ;
    3569                                ; ps2 scancode translate table - normal case
    3570                                ;
    3571                                ps2tb1:
    3572 016600    000                           .byte 0                       ; 00 - unused
    3573 016601    000                           .byte 0                       ; 01 - f9
    3574 016602    000                           .byte 0                       ; 02 -
    3575 016603    000                           .byte 0                       ; 03 - f5
    3576 016604    377                           .byte kcf3                    ; 04 - f3
    3577 016605    375                           .byte kcf1                    ; 05 - f1
    3578 016606    376                           .byte kcf2                    ; 06 - f2
    3579 016607    000                           .byte 0                       ; 07 - f12
    3580 016610    000                           .byte 0                       ; 08 -
    3581 016611    000                           .byte 0                       ; 09 - f10
    3582 016612    000                           .byte 0                       ; 0a - f8
    3583 016613    000                           .byte 0                       ; 0b - f6
    3584 016614    340                           .byte kcf4                    ; 0c - f4
    3585 016615    011                           .ascii <11>                   ; 0d - tab
    3586 016616    140                           .ascii /`/                    ; 0e - backtick/tilde
    3587 016617    000                           .byte 0                       ; 0f -
    3588 016620    000                           .byte 0                       ; 10 -
    3589 016621    000                           .byte 0                       ; 11 -
    3590 016622    000                           .byte 0                       ; 12 -
    3591 016623    000                           .byte 0                       ; 13 -
    3592 016624    000                           .byte 0                       ; 14 -
    3593 016625    161                           .ascii /q/                    ; 15 - q
    3594 016626    061                           .ascii /1/                    ; 16 - 1
    3595 016627    000                           .byte 0                       ; 17 -
    3596 016630    000                           .byte 0                       ; 18 -
    3597 016631    000                           .byte 0                       ; 19 -
    3598 016632    172                           .ascii /z/                    ; 1a - z
    3599 016633    163                           .ascii /s/                    ; 1b - s
    3600 016634    141                           .ascii /a/                    ; 1c - a
    3601 016635    167                           .ascii /w/                    ; 1d - w
    3602 016636    062                           .ascii /2/                    ; 1e - 2
    3603 016637    000                           .byte 0                       ; 1f -
    3604 016640    000                           .byte 0                       ; 20 -
    3605 016641    143                           .ascii /c/                    ; 21 - c
    3606 016642    170                           .ascii /x/                    ; 22 - x
    3607 016643    144                           .ascii /d/                    ; 23 - d
    3608 016644    145                           .ascii /e/                    ; 24 - e
    3609 016645    064                           .ascii /4/                    ; 25 - 4
    3610 016646    063                           .ascii /3/                    ; 26 - 3
    3611 016647    000                           .byte 0                       ; 27 -
    3612 016650    000                           .byte 0                       ; 28 -
    3613 016651    040                           .ascii / /                    ; 29 - space
    3614 016652    166                           .ascii /v/                    ; 2a - v
    3615 016653    146                           .ascii /f/                    ; 2b - f
    3616 016654    164                           .ascii /t/                    ; 2c - t
    3617 016655    162                           .ascii /r/                    ; 2d - r
    3618 016656    065                           .ascii /5/                    ; 2e - 5
    3619 016657    000                           .byte 0                       ; 2f -
    3620 016660    000                           .byte 0                       ; 30 -
    3621 016661    156                           .ascii /n/                    ; 31 - n
    3622 016662    142                           .ascii /b/                    ; 32 - b
    3623 016663    150                           .ascii /h/                    ; 33 - h
    3624 016664    147                           .ascii /g/                    ; 34 - g
    3625 016665    171                           .ascii /y/                    ; 35 - y
    3626 016666    066                           .ascii /6/                    ; 36 - 6
    3627 016667    000                           .byte 0                       ; 37 -
    3628 016670    000                           .byte 0                       ; 38 -
    3629 016671    000                           .byte 0                       ; 39 -
    3630 016672    155                           .ascii /m/                    ; 3a - m
    3631 016673    152                           .ascii /j/                    ; 3b - j
    3632 016674    165                           .ascii /u/                    ; 3c - u
    3633 016675    067                           .ascii /7/                    ; 3d - 7
    3634 016676    070                           .ascii /8/                    ; 3e - 8
    3635 016677    000                           .byte 0                       ; 3f -
    3636 016700    000                           .byte 0                       ; 40 -
    3637 016701    054                           .ascii /,/                    ; 41 - comma, lt
    3638 016702    153                           .ascii /k/                    ; 42 - k
    3639 016703    151                           .ascii /i/                    ; 43 - i
    3640 016704    157                           .ascii /o/                    ; 44 - o
    3641 016705    060                           .ascii /0/                    ; 45 - 0
    3642 016706    071                           .ascii /9/                    ; 46 - 9
    3643 016707    000                           .byte 0                       ; 47 -
    3644 016710    000                           .byte 0                       ; 48 -
    3645 016711    056                           .ascii /./                    ; 49 - period, gt
    3646 016712    057                           .byte 57                      ; 4a - slash, question mark
    3647 016713    154                           .ascii /l/                    ; 4b - l
    3648 016714    073                           .ascii /;/                    ; 4c - semicolon, colon
    3649 016715    160                           .ascii /p/                    ; 4d - p
    3650 016716    055                           .ascii /-/                    ; 4e - minus, underscore
    3651 016717    000                           .byte 0                       ; 4f -
    3652 016720    000                           .byte 0                       ; 50 -
    3653 016721    000                           .byte 0                       ; 51 -
    3654 016722    047                           .ascii /'/                    ; 52 - quote, double quote
    3655 016723    000                           .byte 0                       ; 53 -
    3656 016724    133                           .ascii /[/                    ; 54 - left square bracket, left curly bracket
    3657 016725    075                           .ascii /=/                    ; 55 - equals, plus
    3658 016726    000                           .byte 0                       ; 56 -
    3659 016727    000                           .byte 0                       ; 57 -
    3660 016730    000                           .byte 0                       ; 58 - caps lock
    3661 016731    000                           .byte 0                       ; 59 - right shift
    3662 016732    347                           .byte kcentr                  ; 5a - enter
    3663 016733    135                           .ascii /]/                    ; 5b - right square bracket, right curly bracket
    3664 016734    000                           .byte 0                       ; 5c -
    3665 016735    134                           .ascii /\/                    ; 5d - backslash, vertical bar
    3666 016736    000                           .byte 0                       ; 5e -
    3667 016737    000                           .byte 0                       ; 5f -
    3668 016740    000                           .byte 0                       ; 60 -
    3669 016741    000                           .byte 0                       ; 61 -
    3670 016742    000                           .byte 0                       ; 62 -
    3671 016743    000                           .byte 0                       ; 63 -
    3672 016744    000                           .byte 0                       ; 64 -
    3673 016745    000                           .byte 0                       ; 65 -
    3674 016746    177                           .ascii <177>                  ; 66 - backspace - sends del
    3675 016747    000                           .byte 0                       ; 67 -
    3676 016750    000                           .byte 0                       ; 68 -
    3677 016751    360                           .byte kcn1                    ; 69 - num pad 1
    3678 016752    000                           .byte 0                       ; 6a -
    3679 016753    363                           .byte kcn4                    ; 6b - num pad 4
    3680 016754    366                           .byte kcn7                    ; 6c - num pad 7
    3681 016755    000                           .byte 0                       ; 6d -
    3682 016756    000                           .byte 0                       ; 6e -
    3683 016757    000                           .byte 0                       ; 6f -
    3684 016760    357                           .byte kcn0                    ; 70 - num pad 0
    3685 016761    356                           .byte kcndot                  ; 71 - num pad dot
    3686 016762    361                           .byte kcn2                    ; 72 - num pad 2
    3687 016763    364                           .byte kcn5                    ; 73 - num pad 5
    3688 016764    365                           .byte kcn6                    ; 74 - num pad 6
    3689 016765    367                           .byte kcn8                    ; 75 - num pad 8
    3690 016766    033                           .ascii <33>                   ; 76 - escape
    3691 016767    351                           .byte kcnlck                  ; 77 - num lock
    3692 016770    000                           .byte 0                       ; 78 - f11
    3693 016771    355                           .byte kcnpls                  ; 79 - num pad plus
    3694 016772    362                           .byte kcn3                    ; 7a - num pad 3
    3695 016773    354                           .byte kcnmin                  ; 7b - num pad minus
    3696 016774    353                           .byte kcnast                  ; 7c - num pad asterisk
    3697 016775    370                           .byte kcn9                    ; 7d - num pad 9
    3698 016776    000                           .byte 0                       ; 7e -
    3699 016777    000                           .byte 0                       ; 7f -
    3700                                ;
    3701                                ; ps2 scancode translate table - shifted case
    3702                                ;
    3703                                ps2tb2:
    3704 017000    000                           .byte 0                       ; 00 - unused
    3705 017001    000                           .byte 0                       ; 01 - f9
    3706 017002    000                           .byte 0                       ; 02 -
    3707 017003    000                           .byte 0                       ; 03 - f5
    3708 017004    000                           .byte 0                       ; 04 - f3
    3709 017005    000                           .byte 0                       ; 05 - f1
    3710 017006    000                           .byte 0                       ; 06 - f2
    3711 017007    000                           .byte 0                       ; 07 - f12
    3712 017010    000                           .byte 0                       ; 08 -
    3713 017011    000                           .byte 0                       ; 09 - f10
    3714 017012    000                           .byte 0                       ; 0a - f8
    3715 017013    000                           .byte 0                       ; 0b - f6
    3716 017014    000                           .byte 0                       ; 0c - f4
    3717 017015    011                           .ascii <11>                   ; 0d - tab
    3718 017016    176                           .ascii /~/                    ; 0e - backtick/tilde
    3719 017017    000                           .byte 0                       ; 0f -
    3720 017020    000                           .byte 0                       ; 10 -
    3721 017021    000                           .byte 0                       ; 11 -
    3722 017022    000                           .byte 0                       ; 12 -
    3723 017023    000                           .byte 0                       ; 13 -
    3724 017024    000                           .byte 0                       ; 14 -
    3725 017025    121                           .ascii /Q/                    ; 15 - q
    3726 017026    041                           .ascii /!/                    ; 16 - 1
    3727 017027    000                           .byte 0                       ; 17 -
    3728 017030    000                           .byte 0                       ; 18 -
    3729 017031    000                           .byte 0                       ; 19 -
    3730 017032    132                           .ascii /Z/                    ; 1a - z
    3731 017033    123                           .ascii /S/                    ; 1b - s
    3732 017034    101                           .ascii /A/                    ; 1c - a
    3733 017035    127                           .ascii /W/                    ; 1d - w
    3734 017036    100                           .ascii /@/                    ; 1e - 2
    3735 017037    000                           .byte 0                       ; 1f -
    3736 017040    000                           .byte 0                       ; 20 -
    3737 017041    103                           .ascii /C/                    ; 21 - c
    3738 017042    130                           .ascii /X/                    ; 22 - x
    3739 017043    104                           .ascii /D/                    ; 23 - d
    3740 017044    105                           .ascii /E/                    ; 24 - e
    3741 017045    044                           .ascii /$/                    ; 25 - 4
    3742 017046    043                           .ascii /#/                    ; 26 - 3
    3743 017047    000                           .byte 0                       ; 27 -
    3744 017050    000                           .byte 0                       ; 28 -
    3745 017051    040                           .ascii / /                    ; 29 - space
    3746 017052    126                           .ascii /V/                    ; 2a - v
    3747 017053    106                           .ascii /F/                    ; 2b - f
    3748 017054    124                           .ascii /T/                    ; 2c - t
    3749 017055    122                           .ascii /R/                    ; 2d - r
    3750 017056    045                           .ascii /%/                    ; 2e - 5
    3751 017057    000                           .byte 0                       ; 2f -
    3752 017060    000                           .byte 0                       ; 30 -
    3753 017061    116                           .ascii /N/                    ; 31 - n
    3754 017062    102                           .ascii /B/                    ; 32 - b
    3755 017063    110                           .ascii /H/                    ; 33 - h
    3756 017064    107                           .ascii /G/                    ; 34 - g
    3757 017065    131                           .ascii /Y/                    ; 35 - y
    3758 017066    136                           .ascii /^/                    ; 36 - 6
    3759 017067    000                           .byte 0                       ; 37 -
    3760 017070    000                           .byte 0                       ; 38 -
    3761 017071    000                           .byte 0                       ; 39 -
    3762 017072    115                           .ascii /M/                    ; 3a - m
    3763 017073    112                           .ascii /J/                    ; 3b - j
    3764 017074    125                           .ascii /U/                    ; 3c - u
    3765 017075    046                           .ascii /&/                    ; 3d - 7
    3766 017076    052                           .byte 52                      ; 3e - 8     asterisk - can't use the ascii code here, it messes up the editor
    3767 017077    000                           .byte 0                       ; 3f -
    3768 017100    000                           .byte 0                       ; 40 -
    3769 017101    074                           .ascii /</                    ; 41 - comma, lt
    3770 017102    113                           .ascii /K/                    ; 42 - k
    3771 017103    111                           .ascii /I/                    ; 43 - i
    3772 017104    117                           .ascii /O/                    ; 44 - o
    3773 017105    051                           .ascii /)/                    ; 45 - 0
    3774 017106    050                           .ascii /(/                    ; 46 - 9
    3775 017107    000                           .byte 0                       ; 47 -
    3776 017110    000                           .byte 0                       ; 48 -
    3777 017111    076                           .ascii />/                    ; 49 - period, gt
    3778 017112    077                           .ascii /?/                    ; 4a - slash, question mark
    3779 017113    114                           .ascii /L/                    ; 4b - l
    3780 017114    072                           .ascii /:/                    ; 4c - semicolon, colon
    3781 017115    120                           .ascii /P/                    ; 4d - p
    3782 017116    137                           .ascii /_/                    ; 4e - minus, underscore
    3783 017117    000                           .byte 0                       ; 4f -
    3784 017120    000                           .byte 0                       ; 50 -
    3785 017121    000                           .byte 0                       ; 51 -
    3786 017122    042                           .byte 42                      ; 52 - quote, double quote - can't use the ascii code here, it messes up the editor
    3787 017123    000                           .byte 0                       ; 53 -
    3788 017124    173                           .ascii /{/                    ; 54 - left square bracket, left curly bracket
    3789 017125    053                           .ascii /+/                    ; 55 - equals, plus
    3790 017126    000                           .byte 0                       ; 56 -
    3791 017127    000                           .byte 0                       ; 57 -
    3792 017130    000                           .byte 0                       ; 58 - caps lock
    3793 017131    000                           .byte 0                       ; 59 -
    3794 017132    015                           .ascii <15>                   ; 5a - enter
    3795 017133    175                           .ascii /}/                    ; 5b - right square bracket, right curly bracket
    3796 017134    000                           .byte 0                       ; 5c -
    3797 017135    174                           .ascii /|/                    ; 5d - backslash, vertical bar
    3798 017136    000                           .byte 0                       ; 5e -
    3799 017137    000                           .byte 0                       ; 5f -
    3800 017140    000                           .byte 0                       ; 60 -
    3801 017141    000                           .byte 0                       ; 61 -
    3802 017142    000                           .byte 0                       ; 62 -
    3803 017143    000                           .byte 0                       ; 63 -
    3804 017144    000                           .byte 0                       ; 64 -
    3805 017145    000                           .byte 0                       ; 65 -
    3806 017146    010                           .ascii <10>                   ; 66 - backspace
    3807 017147    000                           .byte 0                       ; 67 -
    3808 017150    000                           .byte 0                       ; 68 -
    3809 017151    000                           .byte 0                       ; 69 -
    3810 017152    000                           .byte 0                       ; 6a -
    3811 017153    000                           .byte 0                       ; 6b -
    3812 017154    000                           .byte 0                       ; 6c -
    3813 017155    000                           .byte 0                       ; 6d -
    3814 017156    000                           .byte 0                       ; 6e -
    3815 017157    000                           .byte 0                       ; 6f -
    3816 017160    000                           .byte 0                       ; 70 -
    3817 017161    000                           .byte 0                       ; 71 -
    3818 017162    000                           .byte 0                       ; 72 -
    3819 017163    000                           .byte 0                       ; 73 -
    3820 017164    000                           .byte 0                       ; 74 -
    3821 017165    000                           .byte 0                       ; 75 -
    3822 017166    033                           .ascii <33>                   ; 76 - escape
    3823 017167    000                           .byte 0                       ; 77 -
    3824 017170    000                           .byte 0                       ; 78 - f11
    3825 017171    000                           .byte 0                       ; 79 -
    3826 017172    000                           .byte 0                       ; 7a -
    3827 017173    000                           .byte 0                       ; 7b -
    3828 017174    000                           .byte 0                       ; 7c -
    3829 017175    000                           .byte 0                       ; 7d -
    3830 017176    000                           .byte 0                       ; 7e -
    3831 017177    000                           .byte 0                       ; 7f -
    3832                                ;
    3833                                ; ps2 scancode translate table - extended case
    3834                                ;
    3835                                ps2tb3:
    3836 017200    000                           .byte 0                       ; 00 -
    3837 017201    000                           .byte 0                       ; 01 -
    3838 017202    000                           .byte 0                       ; 02 -
    3839 017203    000                           .byte 0                       ; 03 -
    3840 017204    000                           .byte 0                       ; 04 -
    3841 017205    000                           .byte 0                       ; 05 -
    3842 017206    000                           .byte 0                       ; 06 -
    3843 017207    000                           .byte 0                       ; 07 -
    3844 017210    000                           .byte 0                       ; 08 -
    3845 017211    000                           .byte 0                       ; 09 -
    3846 017212    000                           .byte 0                       ; 0a -
    3847 017213    000                           .byte 0                       ; 0b -
    3848 017214    000                           .byte 0                       ; 0c -
    3849 017215    000                           .byte 0                       ; 0d -
    3850 017216    000                           .byte 0                       ; 0e -
    3851 017217    000                           .byte 0                       ; 0f -
    3852 017220    000                           .byte 0                       ; 10 -
    3853 017221    000                           .byte 0                       ; 11 -
    3854 017222    000                           .byte 0                       ; 12 -
    3855 017223    000                           .byte 0                       ; 13 -
    3856 017224    000                           .byte 0                       ; 14 -
    3857 017225    000                           .byte 0                       ; 15 -
    3858 017226    000                           .byte 0                       ; 16 -
    3859 017227    000                           .byte 0                       ; 17 -
    3860 017230    000                           .byte 0                       ; 18 -
    3861 017231    000                           .byte 0                       ; 19 -
    3862 017232    000                           .byte 0                       ; 1a -
    3863 017233    000                           .byte 0                       ; 1b -
    3864 017234    000                           .byte 0                       ; 1c -
    3865 017235    000                           .byte 0                       ; 1d -
    3866 017236    000                           .byte 0                       ; 1e -
    3867 017237    000                           .byte 0                       ; 1f -
    3868 017240    000                           .byte 0                       ; 20 -
    3869 017241    000                           .byte 0                       ; 21 -
    3870 017242    000                           .byte 0                       ; 22 -
    3871 017243    000                           .byte 0                       ; 23 -
    3872 017244    000                           .byte 0                       ; 24 -
    3873 017245    000                           .byte 0                       ; 25 -
    3874 017246    000                           .byte 0                       ; 26 -
    3875 017247    000                           .byte 0                       ; 27 -
    3876 017250    000                           .byte 0                       ; 28 -
    3877 017251    000                           .byte 0                       ; 29 -
    3878 017252    000                           .byte 0                       ; 2a -
    3879 017253    000                           .byte 0                       ; 2b -
    3880 017254    000                           .byte 0                       ; 2c -
    3881 017255    000                           .byte 0                       ; 2d -
    3882 017256    000                           .byte 0                       ; 2e -
    3883 017257    000                           .byte 0                       ; 2f -
    3884 017260    000                           .byte 0                       ; 30 -
    3885 017261    000                           .byte 0                       ; 31 -
    3886 017262    000                           .byte 0                       ; 32 -
    3887 017263    000                           .byte 0                       ; 33 -
    3888 017264    000                           .byte 0                       ; 34 -
    3889 017265    000                           .byte 0                       ; 35 -
    3890 017266    000                           .byte 0                       ; 36 -
    3891 017267    000                           .byte 0                       ; 37 -
    3892 017270    000                           .byte 0                       ; 38 -
    3893 017271    000                           .byte 0                       ; 39 -
    3894 017272    000                           .byte 0                       ; 3a -
    3895 017273    000                           .byte 0                       ; 3b -
    3896 017274    000                           .byte 0                       ; 3c -
    3897 017275    000                           .byte 0                       ; 3d -
    3898 017276    000                           .byte 0                       ; 3e -
    3899 017277    000                           .byte 0                       ; 3f -
    3900 017300    000                           .byte 0                       ; 40 -
    3901 017301    000                           .byte 0                       ; 41 -
    3902 017302    000                           .byte 0                       ; 42 -
    3903 017303    000                           .byte 0                       ; 43 -
    3904 017304    000                           .byte 0                       ; 44 -
    3905 017305    000                           .byte 0                       ; 45 -
    3906 017306    000                           .byte 0                       ; 46 -
    3907 017307    000                           .byte 0                       ; 47 -
    3908 017310    000                           .byte 0                       ; 48 -
    3909 017311    000                           .byte 0                       ; 49 -
    3910 017312    350                           .byte kcndiv                  ; 4a - keypad slash
    3911 017313    000                           .byte 0                       ; 4b -
    3912 017314    000                           .byte 0                       ; 4c -
    3913 017315    000                           .byte 0                       ; 4d -
    3914 017316    000                           .byte 0                       ; 4e -
    3915 017317    000                           .byte 0                       ; 4f -
    3916 017320    000                           .byte 0                       ; 50 -
    3917 017321    000                           .byte 0                       ; 51 -
    3918 017322    000                           .byte 0                       ; 52 -
    3919 017323    000                           .byte 0                       ; 53 -
    3920 017324    000                           .byte 0                       ; 54 -
    3921 017325    000                           .byte 0                       ; 55 -
    3922 017326    000                           .byte 0                       ; 56 -
    3923 017327    000                           .byte 0                       ; 57 -
    3924 017330    000                           .byte 0                       ; 58 -
    3925 017331    000                           .byte 0                       ; 59 -
    3926 017332    352                           .byte kcnent                  ; 5a - keypad enter
    3927 017333    000                           .byte 0                       ; 5b -
    3928 017334    000                           .byte 0                       ; 5c -
    3929 017335    000                           .byte 0                       ; 5d -
    3930 017336    000                           .byte 0                       ; 5e -
    3931 017337    000                           .byte 0                       ; 5f -
    3932 017340    000                           .byte 0                       ; 60 -
    3933 017341    000                           .byte 0                       ; 61 -
    3934 017342    000                           .byte 0                       ; 62 -
    3935 017343    000                           .byte 0                       ; 63 -
    3936 017344    000                           .byte 0                       ; 64 -
    3937 017345    000                           .byte 0                       ; 65 -
    3938 017346    000                           .byte 0                       ; 66 -
    3939 017347    000                           .byte 0                       ; 67 -
    3940 017350    000                           .byte 0                       ; 68 -
    3941 017351    374                           .byte kcend                   ; 69 - end
    3942 017352    000                           .byte 0                       ; 6a -
    3943 017353    341                           .byte kclar                   ; 6b - left arrow
    3944 017354    372                           .byte kchome                  ; 6c - home
    3945 017355    000                           .byte 0                       ; 6d -
    3946 017356    000                           .byte 0                       ; 6e -
    3947 017357    000                           .byte 0                       ; 6f -
    3948 017360    371                           .byte kcins                   ; 70 - insert
    3949 017361    373                           .byte kcdel                   ; 71 - delete
    3950 017362    342                           .byte kcdar                   ; 72 - down arrow
    3951 017363    000                           .byte 0                       ; 73 -
    3952 017364    343                           .byte kcrar                   ; 74 - right arrow
    3953 017365    344                           .byte kcuar                   ; 75 - up arrow
    3954 017366    000                           .byte 0                       ; 76 -
    3955 017367    000                           .byte 0                       ; 77 -
    3956 017370    000                           .byte 0                       ; 78 - f11
    3957 017371    000                           .byte 0                       ; 79 -
    3958 017372    345                           .byte kcpgdn                  ; 7a - pg dn
    3959 017373    000                           .byte 0                       ; 7b -
    3960 017374    000                           .byte 0                       ; 7c -
    3961 017375    346                           .byte kcpgup                  ; 7d - pg up
    3962 017376    000                           .byte 0                       ; 7e -
    3963 017377    000                           .byte 0                       ; 7f -
    3963                                
