       1                                         .title test45 - xu proof of concept code
       2                                
       3                                ;--
       4                                ;-- Copyright (c) 2008-2021 Sytse van Slooten
       5                                ;--
       6                                ;-- Permission is hereby granted to any person obtaining a copy of these VHDL source files and
       7                                ;-- other language source files and associated documentation files ("the materials") to use
       8                                ;-- these materials solely for personal, non-commercial purposes.
       9                                ;-- You are also granted permission to make changes to the materials, on the condition that this
      10                                ;-- copyright notice is retained unchanged.
      11                                ;--
      12                                ;-- The materials are distributed in the hope that they will be useful, but WITHOUT ANY WARRANTY;
      13                                ;-- without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
      14                                ;--
      15                                ;
      16                                ;
      17                                ;
      18 000000 000167  000774                   jmp t45
      19                                ;
      20                                ; reserve space for vectors, stack space
      21                                ;
      22 000004                                  .blkw 376
      23                                ;
      24                                ; misc definitions
      25                                ;
      26 000011                         ht       = 11
      27 000012                         lf       = 12
      28 000015                         cr       = 15
      29 177776                         ps       = 177776
      30                                ;
      31                                ; encx24j600 names
      32                                ;
      33 000040                         rcru     = 40
      34 000042                         wcru     = 42
      35 000044                         bfsu     = 44
      36 000046                         bfcu     = 46
      37 000052                         wgpdata  = 52
      38 000054                         rrxdata  = 54
      39 000300                         b0sel    = 300
      40 000314                         setpktdec = 314
      41                                ;
      42 000000                         etxst    = 0
      43 000002                         etxlen   = 2
      44 000004                         erxst    = 4
      45 000006                         erxtail  = 6
      46 000032                         estat    = 32
      47 000036                         econ1    = 36
      48 000064                         erxfcon  = 64
      49 000066                         eudast   = 66
      50 000100                         macon1   = 100
      51 000156                         econ2    = 156
      52 000140                         maadr3   = 140
      53 000164                         eidled   = 164
      54 000210                         egpwrpt  = 210
      55 000212                         erxrdpt  = 212
      56                                ;
      57                                ; general purpose register definitions
      58                                ;
      59 000000                         r0       = %0
      60 000001                         r1       = %1
      61 000002                         r2       = %2
      62 000003                         r3       = %3
      63 000004                         r4       = %4
      64 000005                         r5       = %5
      65 000006                         r6       = %6
      66 000007                         r7       = %7
      67 000006                         sp       = %6
      68 000007                         pc       = %7
      69                                ;
      70                                ; macros
      71                                ;
      72                                         .macro xubl f,fl,t,tl                   ; xubl : busmaster device to dma bits from the xu cpu memory to the spi
      73                                         jsr    pc,xubl
      74                                         .word  f                                ; f  : from address - write to spi
      75                                         .word  fl                               ; fl : from length in bits, multiple of 8 (lower three bits are ignored)
      76                                         .word  t                                ; t  : to address - read from spi
      77                                         .word  tl                               ; tl : to length in bits, multiple of 8 (lower three bits are ignored)
      78                                         .endm
      79                                ;
      80                                         .macro xubm u,u18,x,l
      81                                         jsr    pc,xubm
      82                                         .word  u
      83                                         .word  u18
      84                                         .word  x
      85                                         .word  l
      86                                         .endm
      87                                ;
      88                                         .macro xasciz w
      89                                         jsr    pc,xasciz
      90                                         .asciz /w/
      91                                         .even
      92                                         .endm
      93                                ;
      94                                         .macro xascil w
      95                                         jsr    pc,xasciz
      96                                         .ascii /w/
      97                                         .asciz <15><12>
      98                                         .even
      99                                         .endm
     100                                ;
     101                                         .macro xascnl
     102                                         jsr    pc,xasciz
     103                                         .asciz <15><12>
     104                                         .even
     105                                         .endm
     106                                ;
     107                                         .macro xbhx w,l
     108                                         jsr    pc,xbhx
     109                                         .word  w
     110                                         .word  l
     111                                         .endm
     112                                ;
     113                                         .macro xwhx w,l
     114                                         jsr    pc,xwhx
     115                                         .word  w
     116                                         .word  l
     117                                         .endm
     118                                ;
     119                                ; start of code
     120                                ;
     121                                t45:
     122 001000 012737  000340  177776           mov    #340,@#177776          ; set psw prio to 7 - block interrupts
     123 001006 012706  001000                   mov    #1000,sp               ; setup stack
     124 001012 005067  013542                   clr    dogtick                ; clear watchdog count
     125 001016 012737  014466  000100           mov    #dog,@#100             ; setup vector for watchdog
     126 001024 012737  000340  000102           mov    #340,@#102             ; psw for watchdog vector
     127 001032 012737  000100  177546           mov    #100,@#177546          ; enable clock interrupt
     128                                ;
     129                                ; init ourselves
     130                                ;
     131 001040 004767  013254                   jsr    pc,init                ; setup variable values
     132 001044 004767  013402                   jsr    pc,waitabit            ; delay loop
     133                                         xascil <Hello, world: xu-cpu [t45] deuna microcode>
       1 001050 004767  012560                   jsr    pc,xasciz
       2 001054    110     145     154           .ascii /Hello, world: xu-cpu [t45] deuna microcode/
         001057    154     157     054  
         001062    040     167     157  
         001065    162     154     144  
         001070    072     040     170  
         001073    165     055     143  
         001076    160     165     040  
         001101    133     164     064  
         001104    065     135     040  
         001107    144     145     165  
         001112    156     141     040  
         001115    155     151     143  
         001120    162     157     143  
         001123    157     144     145  
       3 001126    015     012     000           .asciz <15><12>
       4 001131    000                           .even
     134 001132 004767  007262                   jsr    pc,initenc             ; contact the encx24j600 and reset it
     135                                ;
     136 001136 005037  177776                   clr    @#177776               ; clear psw - this enables the watchdog interrupts
     137                                ;
     138 001142 012737  004000  174510           mov    #4000,@#174510         ; pcsr0 - dni
     139 001150 005700                           tst    r0
     140 001152 001403                           beq    5$
     141 001154 005037  174512                   clr    @#174512               ; pcsr1 - state=reset
     142 001160 000404                           br     10$
     143                                5$:
     144 001162 012737  000002  174512           mov    #2,@#174512            ; pcsr1 - state=ready
     145 001170 000400                           br     10$
     146                                ;
     147                                ; main service loop - receive packets if we're running
     148                                ;
     149                                10$:
     150 001172 005067  013362                   clr    dogtick                ; need to do this every 10 seconds, or watchdog will cause reboot
     151 001176 005767  013346                   tst    running                ; in running state?
     152 001202 001411                           beq    20$                    ; no - jump
     153 001204 004767  006050                   jsr    pc,pktin               ; process input packets
     154 001210 005767  013476                   tst    recvdw                 ; did we do any work receiving?
     155 001214 001404                           beq    20$                    ; no - jump
     156 001216 052737  020000  174510           bis    #20000,@#174510        ; set rxi
     157 001224 000762                           br     10$                    ; see if there is another frame - FIXME, check if there is an owned buffer first?
     158                                20$:
     159                                ;
     160                                ; check if the chip is ok - reading the eidled register; this serves no particular purpose other than checking if we're still talking to the chip
     161                                ; if comms was lost - including removing the chip and reconnecting it - reset it and set it up so it will work again.
     162                                ;
     163 001226 005067  010556                   clr    deidled
     164                                         xubl   reidled,20,deidled,20
       1 001232 004767  010740                   jsr    pc,xubl
       2 001236 012006                           .word  reidled                                ; reidled  : from address - write to spi
       3 001240 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 001242 012010                           .word  deidled                                ; deidled  : to address - read from spi
       5 001244 000020                           .word  20                               ; 20 : to length in bits, multiple of 8 (lower three bits are ignored)
     165 001246 005767  010536                   tst    deidled
     166 001252 001135                           bne    30$
     167                                         xascil <cannot read eidled>
       1 001254 004767  012354                   jsr    pc,xasciz
       2 001260    143     141     156           .ascii /cannot read eidled/
         001263    156     157     164  
         001266    040     162     145  
         001271    141     144     040  
         001274    145     151     144  
         001277    154     145     144  
       3 001302    015     012     000           .asciz <15><12>
       4 001305    000                           .even
     168                                ;         clr    @#174512               ; pcsr1 - state=reset  FIXME, this kills the software on bsd
     169 001306 004767  007106                   jsr    pc,initenc
     170 001312 004767  013134                   jsr    pc,waitabit
     171 001316 105767  010640                   tstb   wlaa+2                 ; check to see if the mac address was set
     172 001322 001017                           bne    22$
     173 001324 105767  010633                   tstb   wlaa+3
     174 001330 001014                           bne    22$
     175 001332 105767  010626                   tstb   wlaa+4
     176 001336 001011                           bne    22$
     177 001340 105767  010621                   tstb   wlaa+5
     178 001344 001006                           bne    22$
     179 001346 105767  010614                   tstb   wlaa+6
     180 001352 001003                           bne    22$
     181 001354 105767  010607                   tstb   wlaa+7
     182 001360 001436                           beq    23$
     183                                22$:
     184                                         xascil <restoring laa>        ; restore the mac address to what was set
       1 001362 004767  012246                   jsr    pc,xasciz
       2 001366    162     145     163           .ascii /restoring laa/
         001371    164     157     162  
         001374    151     156     147  
         001377    040     154     141  
         001402    141                  
       3 001403    015     012     000           .asciz <15><12>
       4                                         .even
     185 001406 116767  010550  010560           movb   wlaa+2,dlaa+4
     186 001414 116767  010543  010553           movb   wlaa+3,dlaa+5
     187 001422 116767  010536  010542           movb   wlaa+4,dlaa+2
     188 001430 116767  010531  010535           movb   wlaa+5,dlaa+3
     189 001436 116767  010524  010524           movb   wlaa+6,dlaa+0
     190 001444 116767  010517  010517           movb   wlaa+7,dlaa+1
     191 001452 004767  010420                   jsr    pc,setlaa
     192                                23$:
     193 001456 005767  013100                   tst    modebits
     194 001462 001417                           beq    24$
     195                                         xascil <restoring modebits>   ; restore the mode bits to what was set
       1 001464 004767  012144                   jsr    pc,xasciz
       2 001470    162     145     163           .ascii /restoring modebits/
         001473    164     157     162  
         001476    151     156     147  
         001501    040     155     157  
         001504    144     145     142  
         001507    151     164     163  
       3 001512    015     012     000           .asciz <15><12>
       4 001515    000                           .even
     196 001516 004767  011752                   jsr    pc,setmodebits
     197                                24$:
     198                                         xascil <chip reset>
       1 001522 004767  012106                   jsr    pc,xasciz
       2 001526    143     150     151           .ascii /chip reset/
         001531    160     040     162  
         001534    145     163     145  
         001537    164                  
       3 001540    015     012     000           .asciz <15><12>
       4 001543    000                           .even
     199 001544 000612                           br     10$
     200                                ;
     201                                ; check for command from host
     202                                ;
     203                                30$:
     204 001546 004767  000122                   jsr    pc,pcsrsrv             ; check pcsr register for command from host
     205 001552 013700  174512                   mov    @#174512,r0            ; get status from register
     206 001556 042700  177760                   bic    #177760,r0             ;
     207 001562 005700                           tst    r0                     ; 0 - reset, which is not ok, but the host should act on it, not us
     208 001564 001002                           bne    32$
     209 001566 000167  177400                   jmp    10$                    ; yes - jump
     210                                32$:
     211 001572 022700  000002                   cmp    #2,r0                  ; 2 - ready ie ok, but not running as in not yet had start command
     212 001576 001002                           bne    33$
     213 001600 000167  177366                   jmp    10$                    ; yes - jump
     214                                33$:
     215 001604 022700  000003                   cmp    #3,r0                  ; 3 - running
     216 001610 001002                           bne    34$
     217 001612 000167  177354                   jmp    10$                    ; yes - jump
     218                                34$:
     219                                         xasciz <pcsr1 value wrong : >
       1 001616 004767  012012                   jsr    pc,xasciz
       2 001622    160     143     163           .asciz /pcsr1 value wrong : /
         001625    162     061     040  
         001630    166     141     154  
         001633    165     145     040  
         001636    167     162     157  
         001641    156     147     040  
         001644    072     040     000  
       3 001647    000                           .even
     220                                         xwhx   174510,10
       1 001650 004767  012126                   jsr    pc,xwhx
       2 001654 174510                           .word  174510
       3 001656 000010                           .word  10
     221                                         xascil
       1 001660 004767  011750                   jsr    pc,xasciz
       2                                         .ascii //
       3 001664    015     012     000           .asciz <15><12>
       4 001667    000                           .even
     222 001670 000167  177276                   jmp    10$                    ; FIXME, come up with something slightly more sensible
     223                                ;
     224                                ; pcsrsrv - service commands issued through the pcsr registers
     225                                ;
     226                                pcsrsrv:
     227 001674 013701  174510                   mov    @#174510,r1            ; #20 bit flags if a new command is in the register
     228                                ;
     229                                ; check if the reset bit is set in pcsr0
     230                                ;
     231 001700 032701  000040                   bit    #40,r1                 ; rset bit set?
     232 001704 001404                           beq    psv100                 ; no
     233 001706 105037  174510                   clrb   @#174510               ; reset rset bit - only a byte write to the low byte does this :-)
     234 001712 000167  177062                   jmp    t45                    ; not a reboot, but fairly close
     235                                ;
     236                                ; check if the #20 bit is set - this is a bit in an unused bit field of the original deuna, that xu uses to detect that pcsr0 was written into
     237                                ;
     238                                psv100:
     239 001716 032701  000020                   bit    #20,r1                 ; cmd written bit set?
     240 001722 001002                           bne    psv110                 ; yes
     241 001724 000167  000026                   jmp    psv900                 ; no
     242                                psv110:
     243 001730 105037  174510                   clrb   @#174510               ; reset flag bit - only a byte write to the low byte does this :-)
     244 001734 042701  177760                   bic    #177760,r1             ; mask off p0cmd bit field from pcsr0
     245 001740 010167  012612                   mov    r1,p0cmd               ; store it
     246 001744 006301                           asl    r1
     247 001746 062701  002660                   add    #ptab,r1               ; add code to base of jump table
     248 001752 011101                           mov    (r1),r1
     249 001754 004711                           jsr    pc,(r1)                ; call the service routine
     250                                psv900:
     251 001756 000207                           rts pc                        ; done
     252                                ;
     253                                ; nop : the real nop, command code 0
     254                                ;
     255                                crnop:
     256                                         xasciz <pcsr0 noop : >
       1 001760 004767  011650                   jsr    pc,xasciz
       2 001764    160     143     163           .asciz /pcsr0 noop : /
         001767    162     060     040  
         001772    156     157     157  
         001775    160     040     072  
         002000    040     000          
       3                                         .even
     257                                         xwhx   174510,2
       1 002002 004767  011774                   jsr    pc,xwhx
       2 002006 174510                           .word  174510
       3 002010 000002                           .word  2
     258                                         xascil
       1 002012 004767  011616                   jsr    pc,xasciz
       2                                         .ascii //
       3 002016    015     012     000           .asciz <15><12>
       4 002021    000                           .even
     259                                         ; ? manual says no-op, and dni bit not set
     260 002022 052737  004000  174510           bis    #4000,@#174510
     261 002030 000207                           rts    pc
     262                                ;
     263                                ; nop : other command codes
     264                                ;
     265                                conop:
     266                                         xasciz <pcsr0 noopx: >
       1 002032 004767  011576                   jsr    pc,xasciz
       2 002036    160     143     163           .asciz /pcsr0 noopx: /
         002041    162     060     040  
         002044    156     157     157  
         002047    160     170     072  
         002052    040     000          
       3                                         .even
     267                                         xwhx   174510,2
       1 002054 004767  011722                   jsr    pc,xwhx
       2 002060 174510                           .word  174510
       3 002062 000002                           .word  2
     268                                         xascil
       1 002064 004767  011544                   jsr    pc,xasciz
       2                                         .ascii //
       3 002070    015     012     000           .asciz <15><12>
       4 002073    000                           .even
     269 002074 052737  004000  174510           bis    #4000,@#174510
     270 002102 000207                           rts    pc
     271                                
     272                                ;
     273                                ; cmd 1
     274                                ;
     275                                c0001:
     276                                         xasciz <pcsr0 cmd1 get pcbb : >
       1 002104 004767  011524                   jsr    pc,xasciz
       2 002110    160     143     163           .asciz /pcsr0 cmd1 get pcbb : /
         002113    162     060     040  
         002116    143     155     144  
         002121    061     040     147  
         002124    145     164     040  
         002127    160     143     142  
         002132    142     040     072  
         002135    040     000          
       3 002137    000                           .even
     277                                         xwhx   174510,10
       1 002140 004767  011636                   jsr    pc,xwhx
       2 002144 174510                           .word  174510
       3 002146 000010                           .word  10
     278                                         xascil
       1 002150 004767  011460                   jsr    pc,xasciz
       2                                         .ascii //
       3 002154    015     012     000           .asciz <15><12>
       4 002157    000                           .even
     279 002160 013767  174514  012530           mov    @#174514,pcbbl
     280 002166 013767  174516  012524           mov    @#174516,pcbbh
     281 002174 052737  004000  174510           bis    #4000,@#174510            ; dni
     282 002202 000207                           rts    pc
     283                                ;
     284                                ; cmd 2
     285                                ;
     286                                c0010:                                 ; get cmd
     287                                         xasciz <pcsr0 cmd2 get cmd: >
       1 002204 004767  011424                   jsr    pc,xasciz
       2 002210    160     143     163           .asciz /pcsr0 cmd2 get cmd: /
         002213    162     060     040  
         002216    143     155     144  
         002221    062     040     147  
         002224    145     164     040  
         002227    143     155     144  
         002232    072     040     000  
       3 002235    000                           .even
     288                                         xwhx   174510,10
       1 002236 004767  011540                   jsr    pc,xwhx
       2 002242 174510                           .word  174510
       3 002244 000010                           .word  10
     289                                         xascil
       1 002246 004767  011362                   jsr    pc,xasciz
       2                                         .ascii //
       3 002252    015     012     000           .asciz <15><12>
       4 002255    000                           .even
     290                                
     291 002256 013767  174514  000012           mov    @#174514,10$
     292 002264 013767  174516  000006           mov    @#174516,11$
     293 002272 004767  007750                   jsr    pc,xubm
     294 002276 000000                  10$:     .word  0
     295 002300 000000                  11$:     .word  0
     296 002302 014722                           .word  pcbb
     297 002304 000010                           .word  10
     298                                         xasciz <pcbb  cmd2 : >
       1 002306 004767  011322                   jsr    pc,xasciz
       2 002312    160     143     142           .asciz /pcbb  cmd2 : /
         002315    142     040     040  
         002320    143     155     144  
         002323    062     040     072  
         002326    040     000          
       3                                         .even
     299                                         xwhx   pcbb,10
       1 002330 004767  011446                   jsr    pc,xwhx
       2 002334 014722                           .word  pcbb
       3 002336 000010                           .word  10
     300                                         xascil
       1 002340 004767  011270                   jsr    pc,xasciz
       2                                         .ascii //
       3 002344    015     012     000           .asciz <15><12>
       4 002347    000                           .even
     301 002350 116700  012346                   movb   pcbb,r0
     302 002354 122700  000026                   cmpb   #26,r0
     303 002360 002405                           blt    90$
     304 002362 006300                           asl    r0
     305 002364 062700  002720                   add    #fctbl,r0
     306 002370 011000                           mov    (r0),r0
     307 002372 004710                           jsr    pc,(r0)
     308                                90$:
     309 002374 000207                           rts    pc
     310                                ;
     311                                ; cmd 3 - self-test
     312                                ;
     313                                c0011:                                 ; self-test
     314 002376 052737  004000  174510           bis    #4000,@#174510            ; dni
     315 002404 000207                           rts    pc
     316                                ;
     317                                ; cmd 4 - start
     318                                ;
     319                                c0100:                                 ; start
     320                                         xasciz <pcsr0 START : >
       1 002406 004767  011222                   jsr    pc,xasciz
       2 002412    160     143     163           .asciz /pcsr0 START : /
         002415    162     060     040  
         002420    123     124     101  
         002423    122     124     040  
         002426    072     040     000  
       3 002431    000                           .even
     321                                         xwhx   174510,10
       1 002432 004767  011344                   jsr    pc,xwhx
       2 002436 174510                           .word  174510
       3 002440 000010                           .word  10
     322                                         xascil
       1 002442 004767  011166                   jsr    pc,xasciz
       2                                         .ascii //
       3 002446    015     012     000           .asciz <15><12>
       4 002451    000                           .even
     323 002452 012737  000003  174512           mov    #3,@#174512            ; set state to running, clear error bits if any
     324 002460 005767  012064                   tst    running
     325 002464 001022                           bne    90$                    ; was already running, skip resetting rings to start
     326 002466 012767  000001  012054           mov    #1,running             ; set state
     327                                ;
     328 002474 016767  012064  012124           mov    tdrbh,xcurrh              ; clear xcurr - manual 4-9
     329 002502 016767  012060  012120           mov    tdrbl,xcurrl
     330                                ;
     331 002510 016767  012064  012100           mov    rdrbh,rcurrh              ; clear rcurr - manual 4-9
     332 002516 016767  012060  012074           mov    rdrbl,rcurrl
     333                                ;
     334 002524 052737  004000  174510           bis    #4000,@#174510         ; dni
     335                                90$:
     336 002532 000207                           rts    pc
     337                                ;
     338                                ; cmd 5 - boot
     339                                ;
     340                                c0101:                                 ; boot
     341 002534 052737  004000  174510           bis    #4000,@#174510         ; dni
     342 002542 000207                           rts    pc
     343                                ;
     344                                ; cmd 8 - polling demand
     345                                ;
     346                                c1000:                                 ; pdmd
     347                                ;         xasciz <pcsr0 PDMD : >
     348                                ;         xwhx   174510,10
     349                                ;         xascil
     350 002544 004767  003430                   jsr    pc,xmitpl              ; poll xmit ring
     351 002550 005767  012140                   tst    xmitdw
     352 002554 001403                           beq    10$
     353 002556 052737  010000  174510           bis    #10000,@#174510        ; txi --- FIXME, might not even be needed to set txi
     354                                ;         jsr pc,waitabit
     355                                10$:
     356 002564 052737  004000  174510           bis    #4000,@#174510         ; dni
     357 002572 000207                           rts    pc
     358                                ;
     359                                ; cmd 15 : stop
     360                                ;
     361                                c1111:                                 ; stop
     362                                         xasciz <pcsr0 STOP : >
       1 002574 004767  011034                   jsr    pc,xasciz
       2 002600    160     143     163           .asciz /pcsr0 STOP : /
         002603    162     060     040  
         002606    123     124     117  
         002611    120     040     072  
         002614    040     000          
       3                                         .even
     363                                         xwhx   174510,10
       1 002616 004767  011160                   jsr    pc,xwhx
       2 002622 174510                           .word  174510
       3 002624 000010                           .word  10
     364                                         xascil
       1 002626 004767  011002                   jsr    pc,xasciz
       2                                         .ascii //
       3 002632    015     012     000           .asciz <15><12>
       4 002635    000                           .even
     365 002636 005067  011706                   clr    running                ; set state
     366 002642 012737  000002  174512           mov    #2,@#174512            ; set state
     367 002650 052737  004000  174510           bis    #4000,@#174510         ; dni
     368 002656 000207                           rts    pc
     369                                ;
     370                                ; command branch table
     371                                ;
     372                                ptab:
     373 002660 001760                           .word  crnop                     ; 0
     374 002662 002104                           .word  c0001                     ; 1
     375 002664 002204                           .word  c0010                     ; 2
     376 002666 002376                           .word  c0011                     ; 3
     377 002670 002406                           .word  c0100                     ; 4
     378 002672 002534                           .word  c0101                     ; 5
     379 002674 002032                           .word  conop                     ; 6
     380 002676 002032                           .word  conop                     ; 7
     381 002700 002544                           .word  c1000                     ; 10
     382 002702 002032                           .word  conop                     ; 11
     383 002704 002032                           .word  conop                     ; 12
     384 002706 002032                           .word  conop                     ; 13
     385 002710 002032                           .word  conop                     ; 14
     386 002712 002032                           .word  conop                     ; 15
     387 002714 002032                           .word  conop                     ; 16
     388 002716 002574                           .word  c1111                     ; 17
     389                                ;
     390                                ; function branch table
     391                                ;
     392 002720 003000                  fctbl:   .word  fc0
     393 002722 003032                           .word  fc1
     394 002724 003074                           .word  fc2
     395 002726 003360                           .word  fc3
     396 002730 003424                           .word  fc4
     397 002732 003572                           .word  fc5
     398 002734 003740                           .word  fc6
     399 002736 004062                           .word  fc7
     400 002740 004542                           .word  fc10
     401 002742 004730                           .word  fc11
     402 002744 005324                           .word  fc12
     403 002746 005370                           .word  fc13
     404 002750 005446                           .word  fc14
     405 002752 005550                           .word  fc15
     406 002754 005674                           .word  fc16
     407 002756 005712                           .word  fc17
     408 002760 005730                           .word  fc20
     409 002762 006002                           .word  fc21
     410 002764 006054                           .word  fc22
     411 002766 006072                           .word  fc23
     412 002770 006110                           .word  fc24
     413 002772 006126                           .word  fc25
     414 002774 006144                           .word  fc26
     415 002776 006162                           .word  fc27
     416                                ;
     417                                ; fc0 - no-op
     418                                ;
     419                                fc0:
     420                                         xascil <fc0 - noop>
       1 003000 004767  010630                   jsr    pc,xasciz
       2 003004    146     143     060           .ascii /fc0 - noop/
         003007    040     055     040  
         003012    156     157     157  
         003015    160                  
       3 003016    015     012     000           .asciz <15><12>
       4 003021    000                           .even
     421 003022 052737  004000  174510           bis    #4000,@#174510            ; dni
     422 003030 000207                           rts    pc
     423                                ;
     424                                ; fc1
     425                                ;
     426                                fc1:
     427                                         xasciz <fc1 - load and start>
       1 003032 004767  010576                   jsr    pc,xasciz
       2 003036    146     143     061           .asciz /fc1 - load and start/
         003041    040     055     040  
         003044    154     157     141  
         003047    144     040     141  
         003052    156     144     040  
         003055    163     164     141  
         003060    162     164     000  
       3 003063    000                           .even
     428 003064 052737  040000  174510           bis    #40000,@#174510           ; pcei - this function is not implemented
     429 003072 000207                           rts    pc
     430                                ;
     431                                ; fc2
     432                                ;
     433                                fc2:
     434                                         xasciz <fc2 - read default physical address >
       1 003074 004767  010534                   jsr    pc,xasciz
       2 003100    146     143     062           .asciz /fc2 - read default physical address /
         003103    040     055     040  
         003106    162     145     141  
         003111    144     040     144  
         003114    145     146     141  
         003117    165     154     164  
         003122    040     160     150  
         003125    171     163     151  
         003130    143     141     154  
         003133    040     141     144  
         003136    144     162     145  
         003141    163     163     040  
         003144    000                  
       3 003145    000                           .even
     435 003146 004767  007144                   jsr    pc,getpcbb
     436                                ;
     437                                ; the bia is in crazy-chip format
     438                                ;
     439                                         xbhx   dbia+4,1
       1 003152 004767  010526                   jsr    pc,xbhx
       2 003156 012000                           .word  dbia+4
       3 003160 000001                           .word  1
     440                                         xasciz <:>
       1 003162 004767  010446                   jsr    pc,xasciz
       2 003166    072     000                   .asciz /:/
       3                                         .even
     441                                         xbhx   dbia+5,1
       1 003170 004767  010510                   jsr    pc,xbhx
       2 003174 012001                           .word  dbia+5
       3 003176 000001                           .word  1
     442                                         xasciz <:>
       1 003200 004767  010430                   jsr    pc,xasciz
       2 003204    072     000                   .asciz /:/
       3                                         .even
     443                                         xbhx   dbia+2,1
       1 003206 004767  010472                   jsr    pc,xbhx
       2 003212 011776                           .word  dbia+2
       3 003214 000001                           .word  1
     444                                         xasciz <:>
       1 003216 004767  010412                   jsr    pc,xasciz
       2 003222    072     000                   .asciz /:/
       3                                         .even
     445                                         xbhx   dbia+3,1
       1 003224 004767  010454                   jsr    pc,xbhx
       2 003230 011777                           .word  dbia+3
       3 003232 000001                           .word  1
     446                                         xasciz <:>
       1 003234 004767  010374                   jsr    pc,xasciz
       2 003240    072     000                   .asciz /:/
       3                                         .even
     447                                         xbhx   dbia+0,1
       1 003242 004767  010436                   jsr    pc,xbhx
       2 003246 011774                           .word  dbia+0
       3 003250 000001                           .word  1
     448                                         xasciz <:>
       1 003252 004767  010356                   jsr    pc,xasciz
       2 003256    072     000                   .asciz /:/
       3                                         .even
     449                                         xbhx   dbia+1,1
       1 003260 004767  010420                   jsr    pc,xbhx
       2 003264 011775                           .word  dbia+1
       3 003266 000001                           .word  1
     450                                         xascnl
       1 003270 004767  010340                   jsr    pc,xasciz
       2 003274    015     012     000           .asciz <15><12>
       3 003277    000                           .even
     451                                
     452 003300 116767  006474  011416           movb   dbia+4,pcbb+2
     453 003306 116767  006467  011411           movb   dbia+5,pcbb+3
     454 003314 116767  006456  011404           movb   dbia+2,pcbb+4
     455 003322 116767  006451  011377           movb   dbia+3,pcbb+5
     456 003330 116767  006440  011372           movb   dbia+0,pcbb+6
     457 003336 116767  006433  011365           movb   dbia+1,pcbb+7
     458                                
     459 003344 004767  007006                   jsr    pc,putpcbb
     460 003350 052737  004000  174510           bis    #4000,@#174510            ; dni
     461 003356 000207                           rts    pc
     462                                ;
     463                                ; fc3
     464                                ;
     465                                fc3:
     466                                         xascil <fc3 - no op function>
       1 003360 004767  010250                   jsr    pc,xasciz
       2 003364    146     143     063           .ascii /fc3 - no op function/
         003367    040     055     040  
         003372    156     157     040  
         003375    157     160     040  
         003400    146     165     156  
         003403    143     164     151  
         003406    157     156          
       3 003410    015     012     000           .asciz <15><12>
       4 003413    000                           .even
     467 003414 052737  004000  174510           bis    #4000,@#174510            ; dni, ach welja
     468 003422 000207                           rts    pc
     469                                ;
     470                                ; fc4
     471                                ;
     472                                fc4:
     473                                         xasciz <fc4 - read physical address >
       1 003424 004767  010204                   jsr    pc,xasciz
       2 003430    146     143     064           .asciz /fc4 - read physical address /
         003433    040     055     040  
         003436    162     145     141  
         003441    144     040     160  
         003444    150     171     163  
         003447    151     143     141  
         003452    154     040     141  
         003455    144     144     162  
         003460    145     163     163  
         003463    040     000          
       3 003465    000                           .even
     474 003466 004767  006624                   jsr    pc,getpcbb
     475 003472 116767  006472  011224           movb   dlaa+0,pcbb+2
     476 003500 116767  006465  011217           movb   dlaa+1,pcbb+3
     477 003506 116767  006460  011212           movb   dlaa+2,pcbb+4
     478 003514 116767  006453  011205           movb   dlaa+3,pcbb+5
     479 003522 116767  006446  011200           movb   dlaa+4,pcbb+6
     480 003530 116767  006441  011173           movb   dlaa+5,pcbb+7
     481                                         xbhx   pcbb+2,6
       1 003536 004767  010142                   jsr    pc,xbhx
       2 003542 014724                           .word  pcbb+2
       3 003544 000006                           .word  6
     482                                         xascil
       1 003546 004767  010062                   jsr    pc,xasciz
       2                                         .ascii //
       3 003552    015     012     000           .asciz <15><12>
       4 003555    000                           .even
     483 003556 004767  006574                   jsr    pc,putpcbb
     484 003562 052737  004000  174510           bis    #4000,@#174510            ; dni
     485 003570 000207                           rts    pc
     486                                ;
     487                                ; fc5
     488                                ;
     489                                fc5:
     490                                         xasciz <fc5 - write physical address >
       1 003572 004767  010036                   jsr    pc,xasciz
       2 003576    146     143     065           .asciz /fc5 - write physical address /
         003601    040     055     040  
         003604    167     162     151  
         003607    164     145     040  
         003612    160     150     171  
         003615    163     151     143  
         003620    141     154     040  
         003623    141     144     144  
         003626    162     145     163  
         003631    163     040     000  
       3                                         .even
     491 003634 004767  006456                   jsr    pc,getpcbb
     492 003640 116767  011060  006322           movb   pcbb+2,dlaa+0
     493 003646 116767  011053  006315           movb   pcbb+3,dlaa+1
     494 003654 116767  011046  006310           movb   pcbb+4,dlaa+2
     495 003662 116767  011041  006303           movb   pcbb+5,dlaa+3
     496 003670 116767  011034  006276           movb   pcbb+6,dlaa+4
     497 003676 116767  011027  006271           movb   pcbb+7,dlaa+5
     498                                         xbhx   dlaa,6
       1 003704 004767  007774                   jsr    pc,xbhx
       2 003710 012170                           .word  dlaa
       3 003712 000006                           .word  6
     499                                         xascil
       1 003714 004767  007714                   jsr    pc,xasciz
       2                                         .ascii //
       3 003720    015     012     000           .asciz <15><12>
       4 003723    000                           .even
     500 003724 004767  006146                   jsr    pc,setlaa
     501 003730 052737  004000  174510           bis    #4000,@#174510            ; dni
     502 003736 000207                           rts    pc
     503                                ;
     504                                ; fc6
     505                                ;
     506                                fc6:
     507                                         xascil <fc6 - read multicast address list>
       1 003740 004767  007670                   jsr    pc,xasciz
       2 003744    146     143     066           .ascii /fc6 - read multicast address list/
         003747    040     055     040  
         003752    162     145     141  
         003755    144     040     155  
         003760    165     154     164  
         003763    151     143     141  
         003766    163     164     040  
         003771    141     144     144  
         003774    162     145     163  
         003777    163     040     154  
         004002    151     163     164  
       3 004005    015     012     000           .asciz <15><12>
       4                                         .even
     508 004010 004767  006302                   jsr    pc,getpcbb
     509 004014 116700  010707                   movb   pcbb+5,r0
     510 004020 022700  000012                   cmp    #12,r0
     511 004024 002412                           blt    90$
     512 004026 010067  010700                   mov    r0,mltreq
     513 004032 005700                           tst    r0
     514 004034 001402                           beq    80$
     515 004036 004767  007312                   jsr    pc,putmlt
     516                                80$:
     517 004042 052737  004000  174510           bis    #4000,@#174510            ; dni
     518 004050 000207                           rts    pc
     519                                90$:
     520 004052 052737  044000  174510           bis    #44000,@#174510           ; pcei - error in req
     521 004060 000207                           rts    pc
     522                                ;
     523                                ; fc7
     524                                ;
     525                                fc7:
     526                                         xasciz <fc7 - write multicast address list >             ; FIXME, incomplete - the multicast list is ignored, only the mcen bit is set in the chip to match whether or not the list contains any entries at all             ; FIXME, incomplete
       1 004062 004767  007546                   jsr    pc,xasciz
       2 004066    146     143     067           .asciz /fc7 - write multicast address list /
         004071    040     055     040  
         004074    167     162     151  
         004077    164     145     040  
         004102    155     165     154  
         004105    164     151     143  
         004110    141     163     164  
         004113    040     141     144  
         004116    144     162     145  
         004121    163     163     040  
         004124    154     151     163  
         004127    164     040     000  
       3                                         .even
     527 004132 004767  006160                   jsr    pc,getpcbb
     528 004136 116700  010565                   movb   pcbb+5,r0
     529 004142 010067  010566                   mov    r0,mltlen
     530 004146 005700                           tst    r0
     531 004150 001014                           bne    20$
     532                                         xubl   cmcen,40
       1 004152 004767  006020                   jsr    pc,xubl
       2 004156 012072                           .word  cmcen                                ; cmcen  : from address - write to spi
       3 004160 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 004162 000000                           .word                                  ;   : to address - read from spi
       5 004164 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
     533                                         xasciz <clear>
       1 004166 004767  007442                   jsr    pc,xasciz
       2 004172    143     154     145           .asciz /clear/
         004175    141     162     000  
       3                                         .even
     534 004200 000544                           br     80$
     535                                20$:
     536 004202 022700  000012                   cmp    #12,r0
     537 004206 002551                           blt    90$
     538                                         xubl   smcen,40
       1 004210 004767  005762                   jsr    pc,xubl
       2 004214 012066                           .word  smcen                                ; smcen  : from address - write to spi
       3 004216 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 004220 000000                           .word                                  ;   : to address - read from spi
       5 004222 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
     539 004224 004767  007036                   jsr    pc,getmlt
     540                                         xwhx   mltlen,2
       1 004230 004767  007546                   jsr    pc,xwhx
       2 004234 014734                           .word  mltlen
       3 004236 000002                           .word  2
     541                                         xascil
       1 004240 004767  007370                   jsr    pc,xasciz
       2                                         .ascii //
       3 004244    015     012     000           .asciz <15><12>
       4 004247    000                           .even
     542                                         xasciz <fc7        : >
       1 004250 004767  007360                   jsr    pc,xasciz
       2 004254    146     143     067           .asciz /fc7        : /
         004257    040     040     040  
         004262    040     040     040  
         004265    040     040     072  
         004270    040     000          
       3                                         .even
     543                                         xbhx   mltlist,14
       1 004272 004767  007406                   jsr    pc,xbhx
       2 004276 014736                           .word  mltlist
       3 004300 000014                           .word  14
     544                                         xascil
       1 004302 004767  007326                   jsr    pc,xasciz
       2                                         .ascii //
       3 004306    015     012     000           .asciz <15><12>
       4 004311    000                           .even
     545                                         xasciz <fc7        : >
       1 004312 004767  007316                   jsr    pc,xasciz
       2 004316    146     143     067           .asciz /fc7        : /
         004321    040     040     040  
         004324    040     040     040  
         004327    040     040     072  
         004332    040     000          
       3                                         .even
     546                                         xbhx   mltlist+14,14
       1 004334 004767  007344                   jsr    pc,xbhx
       2 004340 014752                           .word  mltlist+14
       3 004342 000014                           .word  14
     547                                         xascil
       1 004344 004767  007264                   jsr    pc,xasciz
       2                                         .ascii //
       3 004350    015     012     000           .asciz <15><12>
       4 004353    000                           .even
     548                                         xasciz <fc7        : >
       1 004354 004767  007254                   jsr    pc,xasciz
       2 004360    146     143     067           .asciz /fc7        : /
         004363    040     040     040  
         004366    040     040     040  
         004371    040     040     072  
         004374    040     000          
       3                                         .even
     549                                         xbhx   mltlist+30,14
       1 004376 004767  007302                   jsr    pc,xbhx
       2 004402 014766                           .word  mltlist+30
       3 004404 000014                           .word  14
     550                                         xascil
       1 004406 004767  007222                   jsr    pc,xasciz
       2                                         .ascii //
       3 004412    015     012     000           .asciz <15><12>
       4 004415    000                           .even
     551                                         xasciz <fc7        : >
       1 004416 004767  007212                   jsr    pc,xasciz
       2 004422    146     143     067           .asciz /fc7        : /
         004425    040     040     040  
         004430    040     040     040  
         004433    040     040     072  
         004436    040     000          
       3                                         .even
     552                                         xbhx   mltlist+44,14
       1 004440 004767  007240                   jsr    pc,xbhx
       2 004444 015002                           .word  mltlist+44
       3 004446 000014                           .word  14
     553                                         xascil
       1 004450 004767  007160                   jsr    pc,xasciz
       2                                         .ascii //
       3 004454    015     012     000           .asciz <15><12>
       4 004457    000                           .even
     554                                         xasciz <fc7        : >
       1 004460 004767  007150                   jsr    pc,xasciz
       2 004464    146     143     067           .asciz /fc7        : /
         004467    040     040     040  
         004472    040     040     040  
         004475    040     040     072  
         004500    040     000          
       3                                         .even
     555                                         xbhx   mltlist+60,14
       1 004502 004767  007176                   jsr    pc,xbhx
       2 004506 015016                           .word  mltlist+60
       3 004510 000014                           .word  14
     556                                ;         xascil
     557                                ;         xasciz <fc7        : >
     558                                ;         xbhx   mltlist+74,14
     559                                80$:
     560                                         xascil
       1 004512 004767  007116                   jsr    pc,xasciz
       2                                         .ascii //
       3 004516    015     012     000           .asciz <15><12>
       4 004521    000                           .even
     561 004522 052737  004000  174510           bis    #4000,@#174510            ; dni
     562 004530 000207                           rts    pc
     563                                90$:
     564 004532 052737  044000  174510           bis    #44000,@#174510           ; pcei - error in req
     565 004540 000207                           rts    pc
     566                                ;
     567                                ; fc10
     568                                ;
     569                                fc10:
     570                                         xascil <fc10 - read ring format >
       1 004542 004767  007066                   jsr    pc,xasciz
       2 004546    146     143     061           .ascii /fc10 - read ring format /
         004551    060     040     055  
         004554    040     162     145  
         004557    141     144     040  
         004562    162     151     156  
         004565    147     040     146  
         004570    157     162     155  
         004573    141     164     040  
       3 004576    015     012     000           .asciz <15><12>
       4 004601    000                           .even
     571 004602 004767  005510                   jsr    pc,getpcbb
     572                                ;
     573 004606 016767  007754  010220           mov    tdrbl,udbb
     574 004614 016767  007744  010214           mov    tdrbh,udbb+2
     575 004622 116767  007742  010207           movb   telen,udbb+3
     576 004630 016767  007736  010202           mov    trlen,udbb+4
     577 004636 016767  007740  010176           mov    rdrbl,udbb+6
     578 004644 016767  007730  010172           mov    rdrbh,udbb+10
     579 004652 116767  007726  010165           movb   relen,udbb+11
     580 004660 016767  007722  010160           mov    rrlen,udbb+12
     581                                ;
     582                                         xwhx   udbb,14
       1 004666 004767  007110                   jsr    pc,xwhx
       2 004672 015034                           .word  udbb
       3 004674 000014                           .word  14
     583                                         xascil
       1 004676 004767  006732                   jsr    pc,xasciz
       2                                         .ascii //
       3 004702    015     012     000           .asciz <15><12>
       4 004705    000                           .even
     584                                ;
     585 004706 012767  000014  010116           mov    #14,udbblen
     586 004714 004767  005536                   jsr    pc,putudbb
     587 004720 052737  004000  174510           bis    #4000,@#174510            ; dni
     588 004726 000207                           rts    pc
     589                                ;
     590                                ; fc11
     591                                ;
     592                                fc11:
     593                                         xasciz <fc11 - write ring format >
       1 004730 004767  006700                   jsr    pc,xasciz
       2 004734    146     143     061           .asciz /fc11 - write ring format /
         004737    061     040     055  
         004742    040     167     162  
         004745    151     164     145  
         004750    040     162     151  
         004753    156     147     040  
         004756    146     157     162  
         004761    155     141     164  
         004764    040     000          
       3                                         .even
     594 004766 004767  005324                   jsr    pc,getpcbb
     595                                ;
     596 004772 012767  000014  010032           mov    #14,udbblen
     597 005000 004767  005412                   jsr    pc,getudbb
     598                                         xwhx   udbb,14
       1 005004 004767  006772                   jsr    pc,xwhx
       2 005010 015034                           .word  udbb
       3 005012 000014                           .word  14
     599                                         xascil
       1 005014 004767  006614                   jsr    pc,xasciz
       2                                         .ascii //
       3 005020    015     012     000           .asciz <15><12>
       4 005023    000                           .even
     600                                ;
     601 005024 016767  010004  007534           mov    udbb,tdrbl
     602 005032 042767  000001  007526           bic    #1,tdrbl
     603 005040 016767  007772  007516           mov    udbb+2,tdrbh
     604 005046 042767  177774  007510           bic    #177774,tdrbh
     605 005054 116700  007757                   movb   udbb+3,r0
     606 005060 010067  007504                   mov    r0,telen
     607 005064 016767  007750  007500           mov    udbb+4,trlen
     608 005072 016767  007744  007502           mov    udbb+6,rdrbl
     609 005100 042767  000001  007474           bic    #1,rdrbl
     610 005106 016767  007732  007464           mov    udbb+10,rdrbh
     611 005114 042767  177774  007456           bic    #177774,rdrbh
     612 005122 116700  007717                   movb   udbb+11,r0
     613 005126 010067  007452                   mov    r0,relen
     614 005132 016767  007710  007446           mov    udbb+12,rrlen
     615 005140 052737  004000  174510           bis    #4000,@#174510            ; dni
     616                                ;
     617 005146 016767  007412  007452           mov    tdrbh,xcurrh              ; clear xcurr
     618 005154 016767  007406  007446           mov    tdrbl,xcurrl
     619                                ;
     620 005162 016767  007412  007426           mov    rdrbh,rcurrh              ; clear rcurr
     621 005170 016767  007406  007422           mov    rdrbl,rcurrl
     622                                ;
     623                                ; setup pointers to last buffer
     624                                ;
     625 005176 016767  007362  007370           mov    tdrbh,tdrmxh
     626 005204 016767  007356  007364           mov    tdrbl,tdrmxl
     627                                
     628 005212 016700  007354                   mov    trlen,r0
     629 005216 005300                           dec    r0
     630                                10$:
     631 005220 066767  007344  007350           add    telen,tdrmxl
     632 005226 005567  007342                   adc    tdrmxh
     633 005232 066767  007332  007336           add    telen,tdrmxl
     634 005240 005567  007330                   adc    tdrmxh
     635 005244 005300                           dec    r0
     636 005246 001364                           bne    10$
     637                                
     638 005250 016767  007324  007332           mov    rdrbh,rdrmxh
     639 005256 016767  007320  007326           mov    rdrbl,rdrmxl
     640                                
     641 005264 016700  007316                   mov    rrlen,r0
     642 005270 005300                           dec    r0
     643                                20$:
     644 005272 066767  007306  007312           add    relen,rdrmxl
     645 005300 005567  007304                   adc    rdrmxh
     646 005304 066767  007274  007300           add    relen,rdrmxl
     647 005312 005567  007272                   adc    rdrmxh
     648 005316 005300                           dec    r0
     649 005320 001364                           bne    20$
     650                                
     651 005322 000207                           rts    pc
     652                                ;
     653                                ; fc12
     654                                ;
     655                                fc12:
     656                                         xascil <fc12 - read counters>
       1 005324 004767  006304                   jsr    pc,xasciz
       2 005330    146     143     061           .ascii /fc12 - read counters/
         005333    062     040     055  
         005336    040     162     145  
         005341    141     144     040  
         005344    143     157     165  
         005347    156     164     145  
         005352    162     163          
       3 005354    015     012     000           .asciz <15><12>
       4 005357    000                           .even
     657 005360 052737  004000  174510           bis    #4000,@#174510            ; dni
     658 005366 000207                           rts    pc
     659                                ;
     660                                ; fc13
     661                                ;
     662                                fc13:
     663                                         xascil <fc13 - read and clear counters>
       1 005370 004767  006240                   jsr    pc,xasciz
       2 005374    146     143     061           .ascii /fc13 - read and clear counters/
         005377    063     040     055  
         005402    040     162     145  
         005405    141     144     040  
         005410    141     156     144  
         005413    040     143     154  
         005416    145     141     162  
         005421    040     143     157  
         005424    165     156     164  
         005427    145     162     163  
       3 005432    015     012     000           .asciz <15><12>
       4 005435    000                           .even
     664 005436 052737  004000  174510           bis    #4000,@#174510            ; dni
     665 005444 000207                           rts    pc
     666                                ;
     667                                ; fc14
     668                                ;
     669                                fc14:
     670                                         xasciz <fc14 - read mode bits >
       1 005446 004767  006162                   jsr    pc,xasciz
       2 005452    146     143     061           .asciz /fc14 - read mode bits /
         005455    064     040     055  
         005460    040     162     145  
         005463    141     144     040  
         005466    155     157     144  
         005471    145     040     142  
         005474    151     164     163  
         005477    040     000          
       3 005501    000                           .even
     671                                         xwhx   modebits,2
       1 005502 004767  006274                   jsr    pc,xwhx
       2 005506 014562                           .word  modebits
       3 005510 000002                           .word  2
     672                                         xascil
       1 005512 004767  006116                   jsr    pc,xasciz
       2                                         .ascii //
       3 005516    015     012     000           .asciz <15><12>
       4 005521    000                           .even
     673 005522 004767  004570                   jsr    pc,getpcbb
     674 005526 016767  007030  007170           mov    modebits,pcbb+2
     675 005534 004767  004616                   jsr    pc,putpcbb
     676 005540 052737  004000  174510           bis    #4000,@#174510            ; dni
     677 005546 000207                           rts    pc
     678                                ;
     679                                ; fc15
     680                                ;
     681                                fc15:
     682                                         xasciz <fc15 - write mode bits >
       1 005550 004767  006060                   jsr    pc,xasciz
       2 005554    146     143     061           .asciz /fc15 - write mode bits /
         005557    065     040     055  
         005562    040     167     162  
         005565    151     164     145  
         005570    040     155     157  
         005573    144     145     040  
         005576    142     151     164  
         005601    163     040     000  
       3                                         .even
     683                                         xwhx   modebits,2
       1 005604 004767  006172                   jsr    pc,xwhx
       2 005610 014562                           .word  modebits
       3 005612 000002                           .word  2
     684                                         xasciz ^/ -> /
       1 005614 004767  006014                   jsr    pc,xasciz
       2 005620    040     055     076           .asciz / -> /
         005623    040     000          
       3 005625    000                           .even
     685 005626 004767  004464                   jsr    pc,getpcbb
     686 005632 016767  007066  006722           mov    pcbb+2,modebits
     687                                         xwhx   modebits,2
       1 005640 004767  006136                   jsr    pc,xwhx
       2 005644 014562                           .word  modebits
       3 005646 000002                           .word  2
     688                                         xascil
       1 005650 004767  005760                   jsr    pc,xasciz
       2                                         .ascii //
       3 005654    015     012     000           .asciz <15><12>
       4 005657    000                           .even
     689                                ;
     690 005660 004767  005610                   jsr    pc,setmodebits
     691                                ;
     692 005664 052737  004000  174510           bis    #4000,@#174510            ; dni
     693 005672 000207                           rts    pc
     694                                ;
     695                                ; fc16
     696                                ;
     697                                fc16:
     698                                         xascil <fc16>
       1 005674 004767  005734                   jsr    pc,xasciz
       2 005700    146     143     061           .ascii /fc16/
         005703    066                  
       3 005704    015     012     000           .asciz <15><12>
       4 005707    000                           .even
     699 005710 000207                           rts    pc
     700                                ;
     701                                ; fc17
     702                                ;
     703                                fc17:
     704                                         xascil <fc17>
       1 005712 004767  005716                   jsr    pc,xasciz
       2 005716    146     143     061           .ascii /fc17/
         005721    067                  
       3 005722    015     012     000           .asciz <15><12>
       4 005725    000                           .even
     705 005726 000207                           rts    pc
     706                                ;
     707                                ; fc20
     708                                ;
     709                                fc20:
     710                                         xascil <fc20 - dump internal memory>
       1 005730 004767  005700                   jsr    pc,xasciz
       2 005734    146     143     062           .ascii /fc20 - dump internal memory/
         005737    060     040     055  
         005742    040     144     165  
         005745    155     160     040  
         005750    151     156     164  
         005753    145     162     156  
         005756    141     154     040  
         005761    155     145     155  
         005764    157     162     171  
       3 005767    015     012     000           .asciz <15><12>
       4                                         .even
     711 005772 052737  044000  174510           bis    #44000,@#174510           ; pcei - this function is not implemented
     712 006000 000207                           rts    pc
     713                                ;
     714                                ; fc21
     715                                ;
     716                                fc21:
     717                                         xascil <fc21 - load internal memory>
       1 006002 004767  005626                   jsr    pc,xasciz
       2 006006    146     143     062           .ascii /fc21 - load internal memory/
         006011    061     040     055  
         006014    040     154     157  
         006017    141     144     040  
         006022    151     156     164  
         006025    145     162     156  
         006030    141     154     040  
         006033    155     145     155  
         006036    157     162     171  
       3 006041    015     012     000           .asciz <15><12>
       4                                         .even
     718 006044 052737  044000  174510           bis    #44000,@#174510           ; pcei - this function is not implemented
     719 006052 000207                           rts    pc
     720                                ;
     721                                ; fc22
     722                                ;
     723                                fc22:
     724                                         xascil <fc22>
       1 006054 004767  005554                   jsr    pc,xasciz
       2 006060    146     143     062           .ascii /fc22/
         006063    062                  
       3 006064    015     012     000           .asciz <15><12>
       4 006067    000                           .even
     725 006070 000207                           rts    pc
     726                                ;
     727                                ; fc23
     728                                ;
     729                                fc23:
     730                                         xascil <fc23>
       1 006072 004767  005536                   jsr    pc,xasciz
       2 006076    146     143     062           .ascii /fc23/
         006101    063                  
       3 006102    015     012     000           .asciz <15><12>
       4 006105    000                           .even
     731 006106 000207                           rts    pc
     732                                ;
     733                                ; fc24
     734                                ;
     735                                fc24:
     736                                         xascil <fc24>
       1 006110 004767  005520                   jsr    pc,xasciz
       2 006114    146     143     062           .ascii /fc24/
         006117    064                  
       3 006120    015     012     000           .asciz <15><12>
       4 006123    000                           .even
     737 006124 000207                           rts    pc
     738                                ;
     739                                ; fc25
     740                                ;
     741                                fc25:
     742                                         xascil <fc25>
       1 006126 004767  005502                   jsr    pc,xasciz
       2 006132    146     143     062           .ascii /fc25/
         006135    065                  
       3 006136    015     012     000           .asciz <15><12>
       4 006141    000                           .even
     743 006142 000207                           rts    pc
     744                                ;
     745                                ; fc26
     746                                ;
     747                                fc26:
     748                                         xascil <fc26>
       1 006144 004767  005464                   jsr    pc,xasciz
       2 006150    146     143     062           .ascii /fc26/
         006153    066                  
       3 006154    015     012     000           .asciz <15><12>
       4 006157    000                           .even
     749 006160 000207                           rts    pc
     750                                ;
     751                                ; fc27
     752                                ;
     753                                fc27:
     754                                         xascil <fc27>
       1 006162 004767  005446                   jsr    pc,xasciz
       2 006166    146     143     062           .ascii /fc27/
         006171    067                  
       3 006172    015     012     000           .asciz <15><12>
       4 006175    000                           .even
     755 006176 000207                           rts    pc
     756                                ;
     757                                ; xmitpl : poll xmit ring for entries with own set
     758                                ;
     759                                xmitpl:
     760 006200 005067  006510                   clr    xmitdw
     761                                ;         tst    running
     762                                ;         bne    xpl010
     763                                ;         jmp    xpl990
     764                                xpl010:
     765 006204 005767  006420                   tst    xcurrl
     766 006210 001005                           bne    xpl020
     767 006212 005767  006410                   tst    xcurrh
     768 006216 001002                           bne    xpl020
     769 006220 000167  000214                   jmp    xpl990
     770                                xpl020:
     771 006224 010046                           mov    r0,-(sp)
     772                                ;
     773                                ;         xasciz <xmit poll  : >
     774                                ;         xwhx   xcurrh,2
     775                                ;         xwhx   xcurrl,2
     776                                ;         xascil
     777                                ;
     778 006226 016767  006376  006404           mov    xcurrl,xolddl
     779 006234 016767  006366  006374           mov    xcurrh,xolddh
     780 006242 005067  006346                   clr    xplrun
     781                                ;
     782                                xpl200:
     783 006246 004767  004620                   jsr    pc,getxcnh                        ; get xcurr and next header
     784                                
     785 006252 032767  100000  006376           bit    #100000,xdre+4                   ; own bit set?
     786 006260 001001                           bne    xpl210
     787                                ;         xascil <not own, end>
     788 006262 000465                           br     xpl900                           ; not set - end run
     789                                
     790                                xpl210:
     791                                ;         xasciz <xmitpl ent : >
     792                                ;         xwhx   xcurrh,2
     793                                ;         xwhx   xcurrl,2
     794                                ;         xasciz < >
     795                                ;         xwhx   xdre,10
     796                                
     797 006264 005767  006324                   tst    xplrun
     798 006270 001401                           beq    xpl220                           ; not continuation
     799                                ;         xasciz <cont >
     800 006272 000412                           br     xpl320
     801                                
     802                                xpl220:
     803 006274 032767  001000  006354           bit    #1000,xdre+4                     ; stp bit set?
     804 006302 001001                           bne    xpl300                           ; yes
     805                                ;         xascil <skip >
     806 006304 000423                           br     xpl340                           ; own, but not stp in the first message - skip/rel
     807                                
     808                                xpl300:
     809                                ;         xasciz <start >
     810 006306 012767  000001  006300           mov    #1,xplrun
     811 006314 004767  000122                   jsr    pc,xmitst
     812                                ;
     813                                ; 320 - if we get here, we have either the start bit in this buffer, or it is a chained buffer and we already saw start
     814                                ;
     815                                xpl320:
     816 006320 032767  000400  006330           bit    #400,xdre+4                      ; enp bit set?
     817 006326 001402                           beq    xpl330                           ; no
     818 006330 005067  006260                   clr    xplrun
     819                                ;         xasciz <end >
     820                                
     821                                xpl330:
     822                                ;         xascil
     823 006334 004767  000254                   jsr    pc,xmitld
     824 006340 032767  000400  006310           bit    #400,xdre+4                      ; enp bit set?
     825 006346 001402                           beq    xpl340                           ; no
     826 006350 004767  000134                   jsr    pc,xmitxx
     827                                xpl340:
     828 006354 004767  000630                   jsr    pc,xmitrb
     829                                xpl350:
     830                                ;         xasciz <xmitpl rel : >
     831                                ;         xwhx   xcurrh,2
     832                                ;         xwhx   xcurrl,2
     833                                ;         xasciz < >
     834                                ;         xwhx   xdre,10
     835                                ;         xascil
     836                                ;
     837                                ; advance to next entry and loop back, if all entries have not been done yet
     838                                ;
     839                                xpl700:
     840 006360 026767  006250  006252           cmp    xnextl,xolddl
     841 006366 001013                           bne    xpl710
     842 006370 026767  006236  006240           cmp    xnexth,xolddh
     843 006376 001007                           bne    xpl710
     844 006400 016767  006230  006222           mov    xnextl,xcurrl
     845 006406 016767  006220  006212           mov    xnexth,xcurrh
     846 006414 000410                           br     xpl900                    ; looped round, end of run
     847                                xpl710:
     848 006416 016767  006212  006204           mov    xnextl,xcurrl
     849 006424 016767  006202  006174           mov    xnexth,xcurrh
     850 006432 000167  177610                   jmp    xpl200
     851                                ;
     852                                ; exit
     853                                ;
     854                                xpl900:
     855 006436 012600                           mov    (sp)+,r0
     856                                xpl990:
     857 006440 000207                           rts    pc
     858                                ;
     859                                ; xmitst: do starting things re transmission, amongst others to the chip
     860                                ;
     861                                xmitst:
     862                                ;
     863                                ; set egpwr pointer to zero
     864                                ;
     865                                         xubl   wegpwr,40
       1 006442 004767  003530                   jsr    pc,xubl
       2 006446 006500                           .word  wegpwr                                ; wegpwr  : from address - write to spi
       3 006450 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 006452 000000                           .word                                  ;   : to address - read from spi
       5 006454 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
     866                                         xubl   wetxst,40
       1 006456 004767  003514                   jsr    pc,xubl
       2 006462 006504                           .word  wetxst                                ; wetxst  : from address - write to spi
       3 006464 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 006466 000000                           .word                                  ;   : to address - read from spi
       5 006470 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
     867 006472 005067  006144                   clr    xmitlen
     868 006476 000207                           rts    pc
     869                                ;
     870                                         .even
     871 006500    042     210     000  wegpwr:  .byte wcru,egpwrpt,0,0
         006503    000                  
     872                                         .even
     873 006504    042     000     000  wetxst:  .byte wcru,etxst,0,0
         006507    000                  
     874                                ;
     875                                ; xmitxx: do ending things re transmission, including causing the chip to transmit
     876                                ;
     877                                xmitxx:
     878 006510 005767  006130                   tst    xmitmch
     879 006514 001403                           beq    10$
     880 006516 052767  020000  006132           bis    #20000,xdre+4
     881                                10$:
     882 006524 016767  006112  000060           mov    xmitlen,wetxlen+2
     883                                         xubl   wetxlen,40
       1 006532 004767  003440                   jsr    pc,xubl
       2 006536 006610                           .word  wetxlen                                ; wetxlen  : from address - write to spi
       3 006540 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 006542 000000                           .word                                  ;   : to address - read from spi
       5 006544 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
     884                                ;
     885                                         xubl   tecon1,40
       1 006546 004767  003424                   jsr    pc,xubl
       2 006552 012036                           .word  tecon1                                ; tecon1  : from address - write to spi
       3 006554 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 006556 000000                           .word                                  ;   : to address - read from spi
       5 006560 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
     886                                20$:
     887                                         xubl   recon1,20,decon1,20              ; set econ1 bit 1, this causes the chip to transmit.
       1 006562 004767  003410                   jsr    pc,xubl
       2 006566 012026                           .word  recon1                                ; recon1  : from address - write to spi
       3 006570 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 006572 012030                           .word  decon1                                ; decon1  : to address - read from spi
       5 006574 000020                           .word  20                               ; 20 : to length in bits, multiple of 8 (lower three bits are ignored)
     888                                ;         xasciz <econ1      : >
     889                                ;         xbhx   decon1,2
     890                                ;         xascnl
     891                                
     892 006576 132767  000002  003224           bitb   #2,decon1                        ; check if econ1 bit 1 is cleared; this means the chip is done transmitting.
     893 006604 001366                           bne    20$
     894 006606 000207                           rts    pc
     895                                         .even
     896 006610    042     002     000  wetxlen: .byte wcru,etxlen,0,0
         006613    000                  
     897                                ;
     898                                ; xmitld: load bytes from current buffer
     899                                ;
     900                                xmitld:
     901 006614 010046                           mov    r0,-(sp)
     902 006616 010146                           mov    r1,-(sp)
     903 006620 010246                           mov    r2,-(sp)
     904 006622 010346                           mov    r3,-(sp)
     905 006624 010446                           mov    r4,-(sp)
     906                                
     907 006626 016703  006020                   mov    xdre+0,r3                        ; load slen into r3
     908 006632 016701  006016                   mov    xdre+2,r1                        ; load segb
     909 006636 042701  000001                   bic    #1,r1                            ; clean segb l      ; FIXME, we're disregarding byte alignment here
     910 006642 016702  006010                   mov    xdre+4,r2                        ; load segb h
     911 006646 042702  177774                   bic    #177774,r2                       ; clean segb h
     912                                
     913                                10$:
     914 006652 010300                           mov    r3,r0                            ; copy remainder of slen
     915 006654 022703  000020                   cmp    #20,r3                           ; is the actual length left > 20
     916 006660 002002                           bge    20$                              ; no
     917 006662 012700  000020                   mov    #20,r0                           ; set length for this run
     918                                20$:
     919                                ;         xasciz <xmitld buf : >
     920                                ;         mov    r2,buf
     921                                ;         mov    r1,buf+2
     922                                ;         xwhx   buf,4
     923 006666 010004                           mov    r0,r4
     924 006670 032704  000001                   bit    #1,r4
     925 006674 001001                           bne    22$
     926                                ;         xasciz < >
     927 006676 000401                           br     23$
     928                                22$:
     929                                ;         xasciz <!>
     930 006700 005204                           inc    r4                                ; make length an even number
     931                                23$:
     932                                ;         xasciz <xubm       : >
     933                                
     934                                ;         mov    r2,workw
     935                                ;         xwhx   workw,2
     936                                ;         mov    r1,workw
     937                                ;         xwhx   workw,2
     938                                ;         xasciz < >
     939                                ;         mov    r4,workw
     940                                ;         xwhx   workw,2
     941                                ;         xasciz < >
     942                                ;         mov    xmitlen,workw
     943                                ;         xwhx   workw,2
     944                                ;         xascil
     945                                
     946                                ;
     947                                ; setup xubm for transfer from main system core to our buffer - length limited by logic above to 16 bytes
     948                                ;
     949 006702 010137  177100                   mov    r1,@#177100
     950 006706 010237  177102                   mov    r2,@#177102
     951 006712 012737  015142  177104           mov    #buf+2,@#177104
     952 006720 112737  000000  177107           movb   #0,@#177107
     953 006726 110437  177106                   movb   r4,@#177106
     954                                
     955 006732 005767  005704                   tst    xmitlen                          ; check if this is the first part of the frame? then we need to set the mac address into the buffer
     956 006736 001057                           bne    26$
     957                                ;
     958                                ; set mch bit for transmit ring entry
     959                                ;
     960 006740 005067  005700                   clr    xmitmch
     961 006744 126767  003220  006170           cmpb   dlaa+0,buf+2
     962 006752 001027                           bne    25$
     963 006754 126767  003211  006161           cmpb   dlaa+1,buf+3
     964 006762 001023                           bne    25$
     965 006764 126767  003202  006152           cmpb   dlaa+2,buf+4
     966 006772 001017                           bne    25$
     967 006774 126767  003173  006143           cmpb   dlaa+3,buf+5
     968 007002 001013                           bne    25$
     969 007004 126767  003164  006134           cmpb   dlaa+4,buf+6
     970 007012 001007                           bne    25$
     971 007014 126767  003155  006125           cmpb   dlaa+5,buf+7
     972 007022 001003                           bne    25$
     973 007024 012767  000001  005612           mov    #1,xmitmch
     974                                ;
     975                                ; set our own address into the frame
     976                                ;
     977                                25$:
     978 007032 116767  003132  006110           movb   dlaa+0,buf+10
     979 007040 116767  003125  006103           movb   dlaa+1,buf+11
     980 007046 116767  003120  006076           movb   dlaa+2,buf+12
     981 007054 116767  003113  006071           movb   dlaa+3,buf+13
     982 007062 116767  003106  006064           movb   dlaa+4,buf+14
     983 007070 116767  003101  006057           movb   dlaa+5,buf+15
     984                                ;         xasciz <xmitld fib : >
     985                                ;         xbhx   buf+2,6
     986                                ;         xasciz < : >
     987                                ;         xbhx   buf+10,6
     988                                ;         xascil
     989                                26$:
     990 007076 060067  005540                   add    r0,xmitlen
     991                                
     992                                30$:
     993 007102 112767  000300  006030           movb   #b0sel,buf
     994 007110 112767  000052  006023           movb   #wgpdata,buf+1
     995 007116 010004                           mov    r0,r4
     996 007120 005204                           inc    r4
     997 007122 005204                           inc    r4
     998 007124 006304                           asl    r4
     999 007126 006304                           asl    r4
    1000 007130 006304                           asl    r4
    1001 007132 010467  000006                   mov    r4,31$          ; set the number of bits in the parm list
    1002 007136 004767  003034                   jsr    pc,xubl
    1003 007142 015140                           .word  buf
    1004 007144 000000                  31$:     .word  0
    1005 007146 000000                           .word  0
    1006 007150 000000                           .word  0
    1007                                
    1008                                40$:
    1009                                ;         mov    r0,41$
    1010                                ;         jsr    pc,xbhx
    1011                                ;         .word  buf+2
    1012                                ;41$:     .word  0
    1013                                ;         xascil
    1014                                42$:
    1015                                
    1016 007152 060001                           add    r0,r1                            ; add length of run to low
    1017 007154 005502                           adc    r2                               ; carry to high
    1018                                
    1019 007156 022703  000020                   cmp    #20,r3
    1020 007162 002004                           bge    50$
    1021 007164 162703  000020                   sub    #20,r3
    1022 007170 000167  177456                   jmp    10$
    1023                                50$:
    1024 007174 012604                           mov    (sp)+,r4
    1025 007176 012603                           mov    (sp)+,r3
    1026 007200 012602                           mov    (sp)+,r2
    1027 007202 012601                           mov    (sp)+,r1
    1028 007204 012600                           mov    (sp)+,r0
    1029 007206 000207                           rts    pc
    1030                                ;
    1031                                ; xmitrb: release current buffer from xmit ring
    1032                                ;
    1033                                xmitrb:
    1034 007210 032767  000400  005440           bit    #400,xdre+4                      ; enp bit set?
    1035 007216 001012                           bne    30$                              ; yes
    1036 007220 032767  100000  005440           bit    #100000,xdre+14                  ; own bit set in next buffer?
    1037 007226 001006                           bne    30$                              ; yes
    1038                                ;
    1039                                ; not end, and the next buffer is not owned. Must release the buffer and set error codes
    1040                                ;
    1041 007230 052767  040000  005420           bis    #40000,xdre+4                   ; err summary bit
    1042 007236 052767  100000  005414           bis    #100000,xdre+6                  ; set bufl
    1043                                ;
    1044                                ; reset own and write back
    1045                                ;
    1046                                30$:
    1047 007244 042767  100000  005404           bic    #100000,xdre+4                  ; clear own
    1048 007252 004767  003524                   jsr    pc,putxdre                      ; write back
    1049 007256 000207                           rts    pc
    1050                                ;
    1051                                ; pktin: deal with packets incoming on the encx24j600
    1052                                ;
    1053                                pktin:
    1054 007260 010046                           mov    r0,-(sp)
    1055 007262 010146                           mov    r1,-(sp)
    1056 007264 010246                           mov    r2,-(sp)
    1057 007266 010346                           mov    r3,-(sp)
    1058 007270 010446                           mov    r4,-(sp)
    1059 007272 010546                           mov    r5,-(sp)
    1060 007274 005067  005412                   clr    recvdw                 ; clear flag, did not do any work yet
    1061                                ;
    1062                                ; check if there is a free buffer on the receive ring. If there isn't, skip - and hope that the encx24j600 has enough space to buffer
    1063                                ;
    1064 007300 005767  005314                   tst    rcurrl                 ; ring pointer valid?
    1065 007304 001005                           bne    10$                    ; yes
    1066 007306 005767  005304                   tst    rcurrh                 ; ring pointer valid?
    1067 007312 001002                           bne    10$                    ; yes
    1068 007314 000167  000220                   jmp    90$                    ; no - can't even check buffer space yet
    1069                                ;
    1070                                ; read estat
    1071                                ;
    1072                                10$:
    1073                                         xubl   restat,20,destat,20
       1 007320 004767  002652                   jsr    pc,xubl
       2 007324 012002                           .word  restat                                ; restat  : from address - write to spi
       3 007326 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 007330 012004                           .word  destat                                ; destat  : to address - read from spi
       5 007332 000020                           .word  20                               ; 20 : to length in bits, multiple of 8 (lower three bits are ignored)
    1074 007334 116767  002444  005572           movb   destat,pktcnt
    1075 007342 105767  005566                   tstb   pktcnt
    1076 007346 001002                           bne    15$
    1077 007350 000167  000164                   jmp    90$
    1078                                ;
    1079                                ; check if there is a buffer free
    1080                                ;
    1081                                15$:
    1082 007354 004767  003136                   jsr    pc,getrdre             ; might be current, but refresh just to be sure
    1083 007360 032767  100000  005310           bit    #100000,rdre+4         ; own?
    1084 007366 001464                           beq    90$                    ; not own - skip pktin
    1085                                ;
    1086                                ; process read pointer in chip
    1087                                ;
    1088 007370 016767  005156  000164           mov    npp,werxrdpt+2
    1089                                         xubl   werxrdpt,40            ; set erxrdpt to the value of npp
       1 007376 004767  002574                   jsr    pc,xubl
       2 007402 007560                           .word  werxrdpt                                ; werxrdpt  : from address - write to spi
       3 007404 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 007406 000000                           .word                                  ;   : to address - read from spi
       5 007410 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
    1090                                         xubl   rnpp,20,dnpp,20        ; read first two bytes - pointer to the new npp
       1 007412 004767  002560                   jsr    pc,xubl
       2 007416 007564                           .word  rnpp                                ; rnpp  : from address - write to spi
       3 007420 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 007422 007566                           .word  dnpp                                ; dnpp  : to address - read from spi
       5 007424 000020                           .word  20                               ; 20 : to length in bits, multiple of 8 (lower three bits are ignored)
    1091 007426 016767  000134  005116           mov    dnpp,npp               ; copy the new npp
    1092                                ;
    1093                                ; read next 6 bytes
    1094                                ;
    1095                                         xubl   rpkth,20,dpkth,60
       1 007434 004767  002536                   jsr    pc,xubl
       2 007440 007570                           .word  rpkth                                ; rpkth  : from address - write to spi
       3 007442 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 007444 007572                           .word  dpkth                                ; dpkth  : to address - read from spi
       5 007446 000060                           .word  60                               ; 60 : to length in bits, multiple of 8 (lower three bits are ignored)
    1096                                ;         xasciz <pkt header : >
    1097                                ;         xbhx   dpkth,6
    1098                                ;         xascnl
    1099                                ;
    1100                                ; take length from header - from first two bytes
    1101                                ;
    1102 007450 016767  000116  005076           mov    dpkth,flen
    1103                                ;
    1104                                ; process frame data
    1105                                ;
    1106                                20$:
    1107 007456 004767  000122                   jsr    pc,getfr
    1108                                ;
    1109                                ; calculate new erxtail
    1110                                ;
    1111                                30$:
    1112 007462 016700  005064                   mov    npp,r0
    1113 007466 162700  000002                   sub    #2,r0
    1114 007472 022700  044000                   cmp    #44000,r0
    1115 007476 002402                           blt    31$
    1116 007500 012700  057776                   mov    #57776,r0
    1117                                31$:
    1118                                ;
    1119                                ; update erxtail - this releases the buffer in the encx24j600
    1120                                ;
    1121 007504 010067  002314                   mov    r0,werxtail+2
    1122                                         xubl   werxtail,40
       1 007510 004767  002462                   jsr    pc,xubl
       2 007514 012022                           .word  werxtail                                ; werxtail  : from address - write to spi
       3 007516 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 007520 000000                           .word                                  ;   : to address - read from spi
       5 007522 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
    1123                                ;
    1124                                ; dec pktcnt
    1125                                ;
    1126                                         xubl   decpc,20
       1 007524 004767  002446                   jsr    pc,xubl
       2 007530 007602                           .word  decpc                                ; decpc  : from address - write to spi
       3 007532 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 007534 000000                           .word                                  ;   : to address - read from spi
       5 007536 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
    1127                                ;
    1128                                ; done, exit
    1129                                ;
    1130                                90$:
    1131 007540 012605                           mov    (sp)+,r5
    1132 007542 012604                           mov    (sp)+,r4
    1133 007544 012603                           mov    (sp)+,r3
    1134 007546 012602                           mov    (sp)+,r2
    1135 007550 012601                           mov    (sp)+,r1
    1136 007552 012600                           mov    (sp)+,r0
    1137 007554 000207                           rts pc
    1138                                ;
    1139                                ; pktin data
    1140                                ;
    1141                                         .even
    1142 007556    000                  pincnt:  .byte 0
    1143                                
    1144 007557    000                           .even
    1145 007560    042     212     000  werxrdpt: .byte wcru,erxrdpt,0,0
         007563    000                  
    1146                                
    1147                                         .even
    1148 007564    300     054          rnpp:    .byte b0sel,rrxdata
    1149 007566 000000                  dnpp:    .word 0
    1150                                
    1151                                         .even
    1152 007570    300     054          rpkth:   .byte b0sel,rrxdata
    1153                                
    1154                                         .even
    1155 007572    000     000     000  dpkth:   .byte 0,0,0,0,0,0
         007575    000     000     000  
    1156                                
    1157                                         .even
    1158 007600    300     054          rdata:   .byte b0sel,rrxdata
    1159                                
    1160                                         .even
    1161 007602    300     314          decpc:   .byte b0sel,setpktdec
    1162                                ;
    1163                                ; getfr: move a frame from the chip onto the receive ring buffer
    1164                                ;
    1165                                getfr:
    1166 007604 005767  004740                   tst    running               ;; FIXME does this make sense? after all we;re coming here through pktin.
    1167 007610 001002                           bne    1$
    1168 007612 000167  000600                   jmp    99$
    1169                                1$:
    1170 007616 010046                           mov    r0,-(sp)
    1171 007620 010146                           mov    r1,-(sp)
    1172 007622 010246                           mov    r2,-(sp)
    1173 007624 010346                           mov    r3,-(sp)
    1174 007626 010446                           mov    r4,-(sp)
    1175 007630 010546                           mov    r5,-(sp)
    1176                                
    1177 007632 005767  004762                   tst    rcurrl
    1178 007636 001005                           bne    2$
    1179 007640 005767  004752                   tst    rcurrh
    1180 007644 001002                           bne    2$
    1181 007646 000167  000530                   jmp    95$
    1182                                2$:
    1183 007652 016703  004676                   mov    flen,r3
    1184 007656 005067  004764                   clr    mlen
    1185 007662 004767  002630                   jsr    pc,getrdre             ; might be current, but refresh just to be sure
    1186 007666 016702  005002                   mov    rdre+2,r2              ; segbl into r2
    1187 007672 016704  005000                   mov    rdre+4,r4              ; segbh into r4
    1188 007676 042704  177774                   bic    #177774,r4             ; clean segbh
    1189 007702 016705  004764                   mov    rdre,r5                ; slen into r5
    1190 007706 005067  004766                   clr    rdre+6                 ; start clean
    1191 007712 032767  100000  004756           bit    #100000,rdre+4         ; own?
    1192 007720 001404                           beq    5$                     ; current buffer is not own
    1193 007722 052767  001000  004746           bis    #1000,rdre+4           ; set stp
    1194 007730 000405                           br     10$
    1195                                5$:
    1196 007732 052737  002000  174510           bis    #2000,@#174510         ; rcbi
    1197 007740 000167  000436                   jmp    95$                    ; done here!
    1198                                
    1199                                10$:
    1200 007744 010300                           mov    r3,r0
    1201 007746 022703  000020                   cmp    #20,r3                 ; is the actual length left > 20
    1202 007752 002002                           bge    20$                    ; no
    1203 007754 012700  000020                   mov    #20,r0                 ; set length for this run
    1204                                20$:
    1205 007760 020500                           cmp    r5,r0
    1206 007762 002001                           bge    22$
    1207 007764 010500                           mov    r5,r0
    1208                                22$:
    1209 007766 010001                           mov    r0,r1                  ; r1 now has copy of noof bytes
    1210 007770 032701  000001                   bit    #1,r1                  ; uneven number leftover? xubl can only deal with words...
    1211 007774 001401                           beq    28$                    ; no
    1212 007776 005201                           inc    r1                     ; make even
    1213                                28$:
    1214 010000 006301                           asl    r1                     ; make into noof bits
    1215 010002 006301                           asl    r1
    1216 010004 006301                           asl    r1
    1217                                
    1218                                30$:
    1219 010006 010167  000012                   mov    r1,31$                 ; set the number of bits in the parm list
    1220 010012 004767  002160                   jsr    pc,xubl
    1221 010016 007600                           .word  rdata
    1222 010020 000020                           .word  20
    1223 010022 015140                           .word  buf
    1224 010024 000000                  31$:     .word  0
    1225                                
    1226                                40$:
    1227 010026 010001                           mov    r0,r1                  ; copy length
    1228 010030 032701  000001                   bit    #1,r1                  ; uneven number of bytes?
    1229 010034 001401                           beq    42$                    ; no
    1230 010036 005201                           inc    r1                     ; round up to the next word
    1231                                42$:
    1232 010040 010237  177100                   mov    r2,@#177100            ; dest low word addr
    1233 010044 010437  177102                   mov    r4,@#177102            ; dest high word addr
    1234 010050 012737  015140  177104           mov    #buf,@#177104          ; src addr
    1235 010056 112737  000001  177107           movb   #1,@#177107            ; direction - to xu busmaster
    1236 010064 005701                           tst    r1
    1237 010066 001402                           beq    48$
    1238 010070 110137  177106                   movb   r1,@#177106
    1239                                48$:
    1240                                ;
    1241                                ;
    1242                                ;
    1243 010074 010001                           mov    r0,r1                  ; copy length of run
    1244 010076 060102                           add    r1,r2
    1245 010100 005504                           adc    r4
    1246 010102 160105                           sub    r1,r5
    1247 010104 060167  004536                   add    r1,mlen
    1248 010110 160103                           sub    r1,r3                  ; subtract actual run length from frame length
    1249 010112 022703  000000                   cmp    #0,r3                  ; finished frame?
    1250 010116 002070                           bge    90$                    ; yes
    1251                                
    1252                                50$:
    1253 010120 020527  000000                   cmp    r5,#0                  ; buffer filled?
    1254 010124 003063                           bgt    60$
    1255                                
    1256                                ;         xascil <BAZINGA!!!!!>
    1257 010126 005767  004516                   tst    drdc                   ; can we do data chaining?
    1258 010132 001412                           beq    52$                    ; yes, go on
    1259 010134 066767  004506  004536           add    mlen,rdre+6            ; set message length - leave other bits in there intact, given that we started out at zero...
    1260 010142 052767  100000  004530           bis    #100000,rdre+6         ; set bufl
    1261 010150 052767  040000  004520           bis    #40000,rdre+4          ; set errs
    1262 010156 000450                           br     90$
    1263                                52$:
    1264                                
    1265 010160 032767  100000  004520           bit    #100000,rdre+14        ; do we own the next buffer?
    1266 010166 001012                           bne    53$                    ; yes
    1267 010170 066767  004452  004502           add    mlen,rdre+6            ; set message length - leave other bits in there intact, given that we started out at zero...
    1268 010176 052767  100000  004474           bis    #100000,rdre+6         ; set bufl
    1269 010204 052767  040000  004464           bis    #40000,rdre+4          ; set errs
    1270 010212 000432                           br     90$
    1271                                
    1272                                53$:
    1273 010214 042767  100000  004454           bic    #100000,rdre+4         ; clear own
    1274 010222 004767  002464                   jsr    pc,putrdre                      ; write back
    1275 010226 016767  004370  004362           mov    rnexth,rcurrh          ; next buffer
    1276 010234 016767  004364  004356           mov    rnextl,rcurrl
    1277 010242 004767  002250                   jsr    pc,getrdre             ; might be current, but refresh just to be sure
    1278 010246 016702  004422                   mov    rdre+2,r2              ; segbl into r2
    1279 010252 016704  004420                   mov    rdre+4,r4              ; segbh into r4
    1280 010256 042704  177774                   bic    #177774,r4             ; clean segbh
    1281 010262 016705  004404                   mov    rdre,r5                ; slen into r5
    1282 010266 005067  004406                   clr    rdre+6                 ; start clean
    1283 010272 000624                           br     10$                    ; current buffer is own - we're in business
    1284                                60$:
    1285 010274 000167  177444                   jmp    10$
    1286                                ;
    1287                                ;
    1288                                ;
    1289                                90$:
    1290 010300 032767  100000  004370           bit    #100000,rdre+4
    1291 010306 001435                           beq    95$                    ; not own
    1292 010310 052767  000400  004360           bis    #400,rdre+4            ; set enp
    1293 010316 042767  100000  004352           bic    #100000,rdre+4         ; clear own
    1294 010324 032767  100000  004346           bit    #100000,rdre+6         ; bufl already set?
    1295 010332 001003                           bne    91$                    ; yes, skip setting mlen
    1296 010334 066767  004306  004336           add    mlen,rdre+6            ; set message length - leave other bits in there intact, given that we started out at zero...
    1297                                91$:
    1298 010342 005767  004302                   tst    drdc
    1299 010346 001403                           beq    92$
    1300 010350 052767  020000  004322           bis    #20000,rdre+6          ; set nchn
    1301                                92$:
    1302 010356 004767  002330                   jsr    pc,putrdre                      ; write back
    1303 010362 016767  004234  004226           mov    rnexth,rcurrh
    1304 010370 016767  004230  004222           mov    rnextl,rcurrl
    1305 010376 004767  002114                   jsr    pc,getrdre
    1306                                95$:
    1307 010402 012605                           mov    (sp)+,r5
    1308 010404 012604                           mov    (sp)+,r4
    1309 010406 012603                           mov    (sp)+,r3
    1310 010410 012602                           mov    (sp)+,r2
    1311 010412 012601                           mov    (sp)+,r1
    1312 010414 012600                           mov    (sp)+,r0
    1313                                99$:
    1314 010416 000207                           rts    pc
    1315                                ;
    1316                                ; init encx24j600 chip connected to spi xubl peripheral on our bus - see reset procedure in encx24j600 manual, ch. 8.1
    1317                                ;
    1318                                initenc:
    1319                                ;
    1320                                ; check eudast to see if we are in touch with the chip
    1321                                ;
    1322 010420 004767  001014                   jsr    pc,chkeudast
    1323 010424 005700                           tst    r0
    1324 010426 001402                           beq    10$
    1325 010430 000167  000776                   jmp    99$
    1326                                ;
    1327                                ; read estat, bit 12 - wait until that shows the chip finished powerup
    1328                                ;
    1329                                10$:
    1330 010434 012700  000012                   mov    #10.,r0                          ; try the estat check 10 times
    1331                                11$:
    1332                                         xubl   restat,20,destat,20              ; checking if estat clkrdy (12) bit is set; this shows the chip is ready and all registers are available
       1 010440 004767  001532                   jsr    pc,xubl
       2 010444 012002                           .word  restat                                ; restat  : from address - write to spi
       3 010446 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 010450 012004                           .word  destat                                ; destat  : to address - read from spi
       5 010452 000020                           .word  20                               ; 20 : to length in bits, multiple of 8 (lower three bits are ignored)
    1333 010454 032767  010000  001322           bit    #10000,destat
    1334 010462 001025                           bne    20$
    1335                                         xasciz <estat      : >
       1 010464 004767  003144                   jsr    pc,xasciz
       2 010470    145     163     164           .asciz /estat      : /
         010473    141     164     040  
         010476    040     040     040  
         010501    040     040     072  
         010504    040     000          
       3                                         .even
    1336                                         xbhx   destat,2
       1 010506 004767  003172                   jsr    pc,xbhx
       2 010512 012004                           .word  destat
       3 010514 000002                           .word  2
    1337                                         xascnl
       1 010516 004767  003112                   jsr    pc,xasciz
       2 010522    015     012     000           .asciz <15><12>
       3 010525    000                           .even
    1338 010526 005300                           dec    r0
    1339 010530 001343                           bne    11$
    1340 010532 000167  000674                   jmp    99$
    1341                                20$:
    1342                                ;
    1343                                ; write reset bit into econ2
    1344                                ;
    1345                                         xubl   qecon2,40
       1 010536 004767  001434                   jsr    pc,xubl
       2 010542 012012                           .word  qecon2                                ; qecon2  : from address - write to spi
       3 010544 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 010546 000000                           .word                                  ;   : to address - read from spi
       5 010550 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
    1346                                ;
    1347                                ; wait
    1348                                ;
    1349 010552 004767  003674                   jsr    pc,waitabit
    1350                                ;
    1351                                ; read eudast again, see if the reset took place
    1352                                ;
    1353                                30$:
    1354                                         xubl   reudast,20,ceudast,20
       1 010556 004767  001414                   jsr    pc,xubl
       2 010562 011632                           .word  reudast                                ; reudast  : from address - write to spi
       3 010564 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 010566 011634                           .word  ceudast                                ; ceudast  : to address - read from spi
       5 010570 000020                           .word  20                               ; 20 : to length in bits, multiple of 8 (lower three bits are ignored)
    1355 010572 005767  001036                   tst    ceudast
    1356 010576 001437                           beq    40$
    1357                                         xasciz <init: eudast did not reset, value is >
       1 010600 004767  003030                   jsr    pc,xasciz
       2 010604    151     156     151           .asciz /init: eudast did not reset, value is /
         010607    164     072     040  
         010612    145     165     144  
         010615    141     163     164  
         010620    040     144     151  
         010623    144     040     156  
         010626    157     164     040  
         010631    162     145     163  
         010634    145     164     054  
         010637    040     166     141  
         010642    154     165     145  
         010645    040     151     163  
         010650    040     000          
       3                                         .even
    1358                                         xbhx   ceudast,2
       1 010652 004767  003026                   jsr    pc,xbhx
       2 010656 011634                           .word  ceudast
       3 010660 000002                           .word  2
    1359                                         xascnl
       1 010662 004767  002746                   jsr    pc,xasciz
       2 010666    015     012     000           .asciz <15><12>
       3 010671    000                           .even
    1360 010672 000167  000534                   jmp    99$
    1361                                40$:
    1362                                ;
    1363                                ; read mac addr from the chip
    1364                                ;
    1365                                         xubl   rbia,20,dbia,60
       1 010676 004767  001274                   jsr    pc,xubl
       2 010702 011754                           .word  rbia                                ; rbia  : from address - write to spi
       3 010704 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 010706 011774                           .word  dbia                                ; dbia  : to address - read from spi
       5 010710 000060                           .word  60                               ; 60 : to length in bits, multiple of 8 (lower three bits are ignored)
    1366                                         xasciz <x24j600 bia: >
       1 010712 004767  002716                   jsr    pc,xasciz
       2 010716    170     062     064           .asciz /x24j600 bia: /
         010721    152     066     060  
         010724    060     040     142  
         010727    151     141     072  
         010732    040     000          
       3                                         .even
    1367                                         xbhx   dbia+4,1
       1 010734 004767  002744                   jsr    pc,xbhx
       2 010740 012000                           .word  dbia+4
       3 010742 000001                           .word  1
    1368                                         xasciz <:>
       1 010744 004767  002664                   jsr    pc,xasciz
       2 010750    072     000                   .asciz /:/
       3                                         .even
    1369                                         xbhx   dbia+5,1
       1 010752 004767  002726                   jsr    pc,xbhx
       2 010756 012001                           .word  dbia+5
       3 010760 000001                           .word  1
    1370                                         xasciz <:>
       1 010762 004767  002646                   jsr    pc,xasciz
       2 010766    072     000                   .asciz /:/
       3                                         .even
    1371                                         xbhx   dbia+2,1
       1 010770 004767  002710                   jsr    pc,xbhx
       2 010774 011776                           .word  dbia+2
       3 010776 000001                           .word  1
    1372                                         xasciz <:>
       1 011000 004767  002630                   jsr    pc,xasciz
       2 011004    072     000                   .asciz /:/
       3                                         .even
    1373                                         xbhx   dbia+3,1
       1 011006 004767  002672                   jsr    pc,xbhx
       2 011012 011777                           .word  dbia+3
       3 011014 000001                           .word  1
    1374                                         xasciz <:>
       1 011016 004767  002612                   jsr    pc,xasciz
       2 011022    072     000                   .asciz /:/
       3                                         .even
    1375                                         xbhx   dbia+0,1
       1 011024 004767  002654                   jsr    pc,xbhx
       2 011030 011774                           .word  dbia+0
       3 011032 000001                           .word  1
    1376                                         xasciz <:>
       1 011034 004767  002574                   jsr    pc,xasciz
       2 011040    072     000                   .asciz /:/
       3                                         .even
    1377                                         xbhx   dbia+1,1
       1 011042 004767  002636                   jsr    pc,xbhx
       2 011046 011775                           .word  dbia+1
       3 011050 000001                           .word  1
    1378                                         xascnl
       1 011052 004767  002556                   jsr    pc,xasciz
       2 011056    015     012     000           .asciz <15><12>
       3 011061    000                           .even
    1379 011062 116767  000712  001100           movb   dbia+4,dlaa+0
    1380 011070 116767  000705  001073           movb   dbia+5,dlaa+1
    1381 011076 116767  000674  001066           movb   dbia+2,dlaa+2
    1382 011104 116767  000667  001061           movb   dbia+3,dlaa+3
    1383 011112 116767  000656  001054           movb   dbia+0,dlaa+4
    1384 011120 116767  000651  001047           movb   dbia+1,dlaa+5
    1385                                ;
    1386                                ; set npp, erxst to initial value
    1387                                ;
    1388 011126 012767  044000  003416           mov    #44000,npp
    1389 011134 016767  003412  000656           mov    npp,werxst+2
    1390                                         xubl   werxst,40
       1 011142 004767  001030                   jsr    pc,xubl
       2 011146 012016                           .word  werxst                                ; werxst  : from address - write to spi
       3 011150 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 011152 000000                           .word                                  ;   : to address - read from spi
       5 011154 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
    1391                                ;
    1392                                ; set erxtail
    1393                                ;
    1394 011156 012767  057776  000640           mov    #57776,werxtail+2
    1395                                         xubl   werxtail,40
       1 011164 004767  001006                   jsr    pc,xubl
       2 011170 012022                           .word  werxtail                                ; werxtail  : from address - write to spi
       3 011172 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 011174 000000                           .word                                  ;   : to address - read from spi
       5 011176 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
    1396                                ;
    1397                                ; read econ1, set rxen - enable the chip to receive frames
    1398                                ;
    1399                                         xubl   recon1,20,decon1,20
       1 011200 004767  000772                   jsr    pc,xubl
       2 011204 012026                           .word  recon1                                ; recon1  : from address - write to spi
       3 011206 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 011210 012030                           .word  decon1                                ; decon1  : to address - read from spi
       5 011212 000020                           .word  20                               ; 20 : to length in bits, multiple of 8 (lower three bits are ignored)
    1400                                         xasciz <econ1      : >
       1 011214 004767  002414                   jsr    pc,xasciz
       2 011220    145     143     157           .asciz /econ1      : /
         011223    156     061     040  
         011226    040     040     040  
         011231    040     040     072  
         011234    040     000          
       3                                         .even
    1401                                         xbhx   decon1,2
       1 011236 004767  002442                   jsr    pc,xbhx
       2 011242 012030                           .word  decon1
       3 011244 000002                           .word  2
    1402                                         xascnl
       1 011246 004767  002362                   jsr    pc,xasciz
       2 011252    015     012     000           .asciz <15><12>
       3 011255    000                           .even
    1403                                         xubl   xecon1,40
       1 011256 004767  000714                   jsr    pc,xubl
       2 011262 012032                           .word  xecon1                                ; xecon1  : from address - write to spi
       3 011264 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 011266 000000                           .word                                  ;   : to address - read from spi
       5 011270 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
    1404                                         xubl   recon1,20,decon1,20
       1 011272 004767  000700                   jsr    pc,xubl
       2 011276 012026                           .word  recon1                                ; recon1  : from address - write to spi
       3 011300 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 011302 012030                           .word  decon1                                ; decon1  : to address - read from spi
       5 011304 000020                           .word  20                               ; 20 : to length in bits, multiple of 8 (lower three bits are ignored)
    1405                                         xasciz <econ1      : >
       1 011306 004767  002322                   jsr    pc,xasciz
       2 011312    145     143     157           .asciz /econ1      : /
         011315    156     061     040  
         011320    040     040     040  
         011323    040     040     072  
         011326    040     000          
       3                                         .even
    1406                                         xbhx   decon1,2
       1 011330 004767  002350                   jsr    pc,xbhx
       2 011334 012030                           .word  decon1
       3 011336 000002                           .word  2
    1407                                         xascnl
       1 011340 004767  002270                   jsr    pc,xasciz
       2 011344    015     012     000           .asciz <15><12>
       3 011347    000                           .even
    1408                                ;
    1409                                ; read econ2
    1410                                ;
    1411                                         xubl   recon2,20,decon2,20
       1 011350 004767  000622                   jsr    pc,xubl
       2 011354 012042                           .word  recon2                                ; recon2  : from address - write to spi
       3 011356 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 011360 012044                           .word  decon2                                ; decon2  : to address - read from spi
       5 011362 000020                           .word  20                               ; 20 : to length in bits, multiple of 8 (lower three bits are ignored)
    1412                                         xasciz <econ2      : >
       1 011364 004767  002244                   jsr    pc,xasciz
       2 011370    145     143     157           .asciz /econ2      : /
         011373    156     062     040  
         011376    040     040     040  
         011401    040     040     072  
         011404    040     000          
       3                                         .even
    1413                                         xbhx   decon2,2
       1 011406 004767  002272                   jsr    pc,xbhx
       2 011412 012044                           .word  decon2
       3 011414 000002                           .word  2
    1414                                         xascnl
       1 011416 004767  002212                   jsr    pc,xasciz
       2 011422    015     012     000           .asciz <15><12>
       3 011425    000                           .even
    1415                                ;
    1416                                ; end
    1417                                ;
    1418                                90$:
    1419 011426 005000                           clr    r0
    1420 011430 000207                           rts    pc
    1421                                99$:
    1422 011432 012700  000001                   mov    #1,r0
    1423 011436 000207                           rts    pc
    1424                                ;
    1425                                ; write, read, verify eudast; to check if we are able to communicate to the encx24j600.
    1426                                ;
    1427                                chkeudast:
    1428                                10$:
    1429 011440 012700  000012                   mov    #10.,r0
    1430                                11$:
    1431 011444 012767  022522  000156           mov    #22522,weudast+2                 ; setup buffer
    1432                                         xubl   weudast,40,0,0                   ; xubl write
       1 011452 004767  000520                   jsr    pc,xubl
       2 011456 011626                           .word  weudast                                ; weudast  : from address - write to spi
       3 011460 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 011462 000000                           .word  0                                ; 0  : to address - read from spi
       5 011464 000000                           .word  0                               ; 0 : to length in bits, multiple of 8 (lower three bits are ignored)
    1433 011466 005067  000142                   clr    ceudast                          ; make sure data isnt left here
    1434                                         xubl   reudast,20,ceudast,20            ; xubl read
       1 011472 004767  000500                   jsr    pc,xubl
       2 011476 011632                           .word  reudast                                ; reudast  : from address - write to spi
       3 011500 000020                           .word  20                               ; 20 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 011502 011634                           .word  ceudast                                ; ceudast  : to address - read from spi
       5 011504 000020                           .word  20                               ; 20 : to length in bits, multiple of 8 (lower three bits are ignored)
    1435 011506 022767  022522  000120           cmp    #22522,ceudast                   ; is it the pattern we did store in the eudast
    1436 011514 001442                           beq    20$                              ; yes, worked
    1437                                         xasciz <init: eudast did not reset, value is >
       1 011516 004767  002112                   jsr    pc,xasciz
       2 011522    151     156     151           .asciz /init: eudast did not reset, value is /
         011525    164     072     040  
         011530    145     165     144  
         011533    141     163     164  
         011536    040     144     151  
         011541    144     040     156  
         011544    157     164     040  
         011547    162     145     163  
         011552    145     164     054  
         011555    040     166     141  
         011560    154     165     145  
         011563    040     151     163  
         011566    040     000          
       3                                         .even
    1438                                         xbhx   ceudast,2                        ; and value
       1 011570 004767  002110                   jsr    pc,xbhx
       2 011574 011634                           .word  ceudast
       3 011576 000002                           .word  2
    1439                                         xascnl
       1 011600 004767  002030                   jsr    pc,xasciz
       2 011604    015     012     000           .asciz <15><12>
       3 011607    000                           .even
    1440 011610 005700                           tst    r0
    1441 011612 001314                           bne    11$
    1442 011614 012700  000001                   mov    #1,r0
    1443 011620 000207                           rts    pc
    1444                                20$:
    1445 011622 005000                           clr    r0
    1446 011624 000207                           rts    pc                               ; return
    1447                                ;
    1448                                ; data for initenc
    1449                                ;
    1450                                         .even
    1451 011626    042     066     000  weudast: .byte wcru,eudast,0,0
         011631    000                  
    1452                                          .even
    1453 011632    040     066          reudast: .byte rcru,eudast
    1454 011634 000000                  ceudast: .word 0
    1455                                
    1456 011636    151     156     151  seudast: .asciz /init: eudast did not update, value is /
         011641    164     072     040  
         011644    145     165     144  
         011647    141     163     164  
         011652    040     144     151  
         011655    144     040     156  
         011660    157     164     040  
         011663    165     160     144  
         011666    141     164     145  
         011671    054     040     166  
         011674    141     154     165  
         011677    145     040     151  
         011702    163     040     000  
    1457 011705    151     156     151  meudast: .asciz /init: eudast did not reset, value is /
         011710    164     072     040  
         011713    145     165     144  
         011716    141     163     164  
         011721    040     144     151  
         011724    144     040     156  
         011727    157     164     040  
         011732    162     145     163  
         011735    145     164     054  
         011740    040     166     141  
         011743    154     165     145  
         011746    040     151     163  
         011751    040     000          
    1458                                
    1459 011753    000                            .even
    1460 011754    040     140          rbia:    .byte rcru,maadr3l
    1461 011756    170     062     064  sbia:    .asciz /x24j600 bia: /
         011761    152     066     060  
         011764    060     040     142  
         011767    151     141     072  
         011772    040     000          
    1462                                
    1463                                         .even
    1464 011774    000     000     000  dbia:    .byte 0,0,0,0,0,0
         011777    000     000     000  
    1465                                
    1466                                         .even
    1467 012002    040     032          restat:  .byte rcru,estat
    1468 012004 000000                  destat:  .word 0
    1469                                
    1470                                         .even
    1471 012006    040     164          reidled: .byte rcru,eidled
    1472 012010 000000                  deidled: .word 0
    1473                                
    1474                                         .even
    1475 012012    044     156     020  qecon2:  .byte bfsu,econ2,20,0
         012015    000                  
    1476                                
    1477                                         .even
    1478 012016    042     004     000  werxst:  .byte wcru,erxst,0,0
         012021    000                  
    1479                                
    1480                                         .even
    1481 012022    042     006     000  werxtail:.byte wcru,erxtail,0,0
         012025    000                  
    1482                                
    1483                                         .even
    1484 012026    040     036          recon1:  .byte rcru,econ1
    1485 012030 000000                  decon1:  .word 0
    1486 012032    044     036     001  xecon1:  .byte bfsu,econ1,1,0
         012035    000                  
    1487 012036    044     036     002  tecon1:  .byte bfsu,econ1,2,0
         012041    000                  
    1488                                
    1489                                         .even
    1490 012042    040     156          recon2:  .byte rcru,econ2
    1491 012044 000000                  decon2:  .word 0
    1492                                
    1493                                         .even
    1494 012046    044     100     020  setlpbk: .byte bfsu,macon1,20,0
         012051    000                  
    1495                                
    1496                                         .even
    1497 012052    046     100     020  clrlpbk: .byte bfcu,macon1,20,0
         012055    000                  
    1498                                
    1499                                         .even
    1500 012056    044     064     004  snotmeen:.byte bfsu,erxfcon,4,0
         012061    000                  
    1501                                
    1502                                         .even
    1503 012062    046     064     004  cnotmeen:.byte bfcu,erxfcon,4,0
         012065    000                  
    1504                                
    1505                                         .even
    1506 012066    044     064     002  smcen:   .byte bfsu,erxfcon,2,0
         012071    000                  
    1507                                
    1508                                         .even
    1509 012072    046     064     002  cmcen:   .byte bfcu,erxfcon,2,0
         012075    000                  
    1510                                ;
    1511                                ; setlaa : set the mac address into the encx24j600 - note that this acts on the unicast receive filter only
    1512                                ;
    1513                                setlaa:
    1514 012076 116767  000072  000056           movb   dlaa+4,wlaa+2
    1515 012104 116767  000065  000051           movb   dlaa+5,wlaa+3
    1516 012112 116767  000054  000044           movb   dlaa+2,wlaa+4
    1517 012120 116767  000047  000037           movb   dlaa+3,wlaa+5
    1518 012126 116767  000036  000032           movb   dlaa+0,wlaa+6
    1519 012134 116767  000031  000025           movb   dlaa+1,wlaa+7
    1520                                ;
    1521                                         xubl   wlaa,100
       1 012142 004767  000030                   jsr    pc,xubl
       2 012146 012160                           .word  wlaa                                ; wlaa  : from address - write to spi
       3 012150 000100                           .word  100                               ; 100 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 012152 000000                           .word                                  ;   : to address - read from spi
       5 012154 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
    1522 012156 000207                           rts    pc
    1523                                
    1524                                         .even
    1525 012160    042     140          wlaa:    .byte  wcru,maadr3
    1526 012162    000     000     000           .byte  0,0,0,0,0,0                        ; this field is also used to store the laa in. If the laa is default, this should be zero; if not, the laa should be in here
         012165    000     000     000  
    1527                                ;
    1528 012170    000     000     000  dlaa:    .byte  0,0,0,0,0,0
         012173    000     000     000  
    1529                                
    1530                                         .even
    1531                                ;
    1532                                ; xubl stub routine
    1533                                ;
    1534                                xubl:
    1535 012176 010546                           mov r5,-(sp)
    1536 012200 016605  000002                   mov 2(sp),r5
    1537 012204 062766  000010  000002           add #10,2(sp)
    1538 012212 016537  000000  177000           mov 0(r5),@#177000
    1539 012220 016537  000004  177004           mov 4(r5),@#177004
    1540 012226 016537  000006  177006           mov 6(r5),@#177006
    1541 012234 016537  000002  177002           mov 2(r5),@#177002
    1542 012242 012605                           mov (sp)+,r5
    1543 012244 000207                           rts pc
    1544                                ;
    1545                                ; xubm stub routine
    1546                                ;
    1547                                xubm:
    1548 012246 010546                           mov r5,-(sp)
    1549 012250 016605  000002                   mov 2(sp),r5
    1550 012254 062766  000010  000002           add #10,2(sp)
    1551 012262 016537  000000  177100           mov 0(r5),@#177100
    1552 012270 016537  000002  177102           mov 2(r5),@#177102
    1553 012276 016537  000004  177104           mov 4(r5),@#177104
    1554 012304 016537  000006  177106           mov 6(r5),@#177106
    1555 012312 012605                           mov (sp)+,r5
    1556 012314 000207                           rts pc
    1557                                ;
    1558                                ; getpcbb: xubm the pcbb into our memory
    1559                                ;
    1560                                getpcbb:
    1561 012316 016737  002374  177100           mov    pcbbl,@#177100
    1562 012324 016737  002370  177102           mov    pcbbh,@#177102
    1563 012332 012737  014722  177104           mov    #pcbb,@#177104
    1564 012340 112737  000000  177107           movb   #0,@#177107
    1565 012346 112737  000010  177106           movb   #10,@#177106
    1566 012354 000207                           rts    pc
    1567                                ;
    1568                                ; putpcbb: xubm our pcbb copy into the unibus memory
    1569                                ;
    1570                                putpcbb:
    1571 012356 016737  002334  177100           mov    pcbbl,@#177100
    1572 012364 016737  002330  177102           mov    pcbbh,@#177102
    1573 012372 012737  014722  177104           mov    #pcbb,@#177104
    1574 012400 112737  000001  177107           movb   #1,@#177107
    1575 012406 112737  000010  177106           movb   #10,@#177106
    1576 012414 000207                           rts    pc
    1577                                ;
    1578                                ; getudbb: get udbb from unibus, address in pcbb must be valid and length must be set in udbblen
    1579                                ;
    1580                                getudbb:
    1581 012416 016737  002302  177100           mov    pcbb+2,@#177100
    1582 012424 016737  002276  177102           mov    pcbb+4,@#177102
    1583 012432 012737  015034  177104           mov    #udbb,@#177104
    1584 012440 112737  000000  177107           movb   #0,@#177107
    1585 012446 116737  002360  177106           movb   udbblen,@#177106
    1586 012454 000207                           rts    pc
    1587                                ;
    1588                                ; putudbb: move udbb to unibus, address in pcbb must be valid and length must be set in udbblen
    1589                                ;
    1590                                putudbb:
    1591 012456 016737  002242  177100           mov    pcbb+2,@#177100
    1592 012464 016737  002236  177102           mov    pcbb+4,@#177102
    1593 012472 012737  015034  177104           mov    #udbb,@#177104
    1594 012500 112737  000001  177107           movb   #1,@#177107
    1595 012506 116737  002320  177106           movb   udbblen,@#177106
    1596 012514 000207                           rts    pc
    1597                                ;
    1598                                ; getrdre: read receive descriptor ring entry from unibus
    1599                                ;
    1600                                getrdre:
    1601 012516 016737  002076  177100           mov    rcurrl,@#177100
    1602 012524 016737  002066  177102           mov    rcurrh,@#177102
    1603 012532 012737  014672  177104           mov    #rdre,@#177104
    1604 012540 112737  000000  177107           movb   #0,@#177107
    1605 012546 112737  000010  177106           movb   #10,@#177106
    1606                                
    1607 012554 026767  002040  002030           cmp    rcurrl,rdrmxl             ; need to wrap?
    1608 012562 001013                           bne    10$
    1609 012564 026767  002026  002016           cmp    rcurrh,rdrmxh
    1610 012572 001007                           bne    10$
    1611 012574 016767  002000  002020           mov    rdrbh,rnexth              ; wrap, rnext is first buffer in ring
    1612 012602 016767  001774  002014           mov    rdrbl,rnextl
    1613 012610 000420                           br     20$
    1614                                10$:
    1615 012612 016767  002002  002004           mov    rcurrl,rnextl
    1616 012620 016767  001772  001774           mov    rcurrh,rnexth
    1617 012626 066767  001752  001770           add    relen,rnextl
    1618 012634 005567  001762                   adc    rnexth
    1619 012640 066767  001740  001756           add    relen,rnextl                     ; words, so add twice
    1620 012646 005567  001750                   adc    rnexth
    1621                                20$:
    1622 012652 016737  001746  177100           mov    rnextl,@#177100
    1623 012660 016737  001736  177102           mov    rnexth,@#177102
    1624 012666 012737  014702  177104           mov    #rdre+10,@#177104
    1625 012674 112737  000000  177107           movb   #0,@#177107
    1626 012702 112737  000010  177106           movb   #10,@#177106
    1627 012710 000207                           rts    pc
    1628                                ;
    1629                                ; putrdre: copy receive descriptor ring entry back onto unibus
    1630                                ;
    1631                                putrdre:
    1632 012712 010046                           mov    r0,-(sp)
    1633 012714 010146                           mov    r1,-(sp)
    1634                                
    1635                                ;         xasciz <recvpl put : >
    1636                                ;         xwhx   rcurrh,2
    1637                                ;         xwhx   rcurrl,2
    1638                                ;         xasciz < >
    1639                                ;         xwhx   rdre,10
    1640                                ;         xascil
    1641                                
    1642 012716 016700  001676                   mov    rcurrl,r0
    1643 012722 016701  001670                   mov    rcurrh,r1
    1644 012726 062700  000004                   add    #4,r0
    1645 012732 005501                           adc    r1
    1646 012734 010037  177100                   mov    r0,@#177100
    1647 012740 010137  177102                   mov    r1,@#177102
    1648 012744 012737  014676  177104           mov    #rdre+4,@#177104
    1649 012752 112737  000001  177107           movb   #1,@#177107
    1650 012760 112737  000004  177106           movb   #4,@#177106
    1651 012766 012767  000001  001716           mov    #1,recvdw
    1652                                
    1653 012774 012601                           mov    (sp)+,r1
    1654 012776 012600                           mov    (sp)+,r0
    1655 013000 000207                           rts    pc
    1656                                ;
    1657                                ; putxdre: copy transmit descriptor ring entry back onto unibus
    1658                                ;
    1659                                putxdre:
    1660 013002 010046                           mov    r0,-(sp)
    1661 013004 010146                           mov    r1,-(sp)
    1662                                
    1663                                ;         xasciz <xmitpl put : >
    1664                                ;         xwhx   xcurrh,2
    1665                                ;         xwhx   xcurrl,2
    1666                                ;         xasciz < >
    1667                                ;         xwhx   xdre,10
    1668                                ;         xascil
    1669                                
    1670 013006 016700  001616                   mov    xcurrl,r0
    1671 013012 016701  001610                   mov    xcurrh,r1
    1672 013016 062700  000004                   add    #4,r0
    1673 013022 005501                           adc    r1
    1674 013024 010037  177100                   mov    r0,@#177100
    1675 013030 010137  177102                   mov    r1,@#177102
    1676 013034 012737  014656  177104           mov    #xdre+4,@#177104
    1677 013042 112737  000001  177107           movb   #1,@#177107
    1678 013050 112737  000004  177106           movb   #4,@#177106
    1679 013056 012767  000001  001630           mov    #1,xmitdw
    1680                                
    1681 013064 012601                           mov    (sp)+,r1
    1682 013066 012600                           mov    (sp)+,r0
    1683 013070 000207                           rts    pc
    1684                                ;
    1685                                ; getxcnh: copy transmit descriptor ring entry from unibus at xcurr into xdre, find which buf is next, copy that to xdre+10
    1686                                ;
    1687                                getxcnh:
    1688 013072 016737  001532  177100           mov    xcurrl,@#177100
    1689 013100 016737  001522  177102           mov    xcurrh,@#177102
    1690 013106 012737  014652  177104           mov    #xdre,@#177104
    1691 013114 112737  000000  177107           movb   #0,@#177107
    1692 013122 112737  000010  177106           movb   #10,@#177106
    1693                                
    1694 013130 026767  001474  001440           cmp    xcurrl,tdrmxl             ; need to wrap?
    1695 013136 001013                           bne    10$
    1696 013140 026767  001462  001426           cmp    xcurrh,tdrmxh
    1697 013146 001007                           bne    10$
    1698 013150 016767  001410  001454           mov    tdrbh,xnexth              ; wrap, xnext is first buffer in ring
    1699 013156 016767  001404  001450           mov    tdrbl,xnextl
    1700 013164 000420                           br     20$
    1701                                10$:
    1702 013166 016767  001436  001440           mov    xcurrl,xnextl
    1703 013174 016767  001426  001430           mov    xcurrh,xnexth
    1704 013202 066767  001362  001424           add    telen,xnextl
    1705 013210 005567  001416                   adc    xnexth
    1706 013214 066767  001350  001412           add    telen,xnextl                     ; words, so add twice
    1707 013222 005567  001404                   adc    xnexth
    1708                                20$:
    1709 013226 016737  001402  177100           mov    xnextl,@#177100
    1710 013234 016737  001372  177102           mov    xnexth,@#177102
    1711 013242 012737  014662  177104           mov    #xdre+10,@#177104
    1712 013250 112737  000000  177107           movb   #0,@#177107
    1713 013256 112737  000010  177106           movb   #10,@#177106
    1714                                
    1715                                ;         xasciz <getxcnh    : >
    1716                                ;         xwhx   xcurrh,2
    1717                                ;         xwhx   xcurrl,2
    1718                                ;         xasciz < >
    1719                                ;         xwhx   xnexth,2
    1720                                ;         xwhx   xnextl,2
    1721                                ;         xascil
    1722                                
    1723 013264 000207                           rts    pc
    1724                                ;
    1725                                ; getmlt: get udbb multicast list from unibus, address in pcbb must be valid
    1726                                ;
    1727                                getmlt:
    1728 013266 010046                           mov    r0,-(sp)
    1729 013270 016700  001440                   mov    mltlen,r0
    1730 013274 066700  001434                   add    mltlen,r0
    1731 013300 066700  001430                   add    mltlen,r0
    1732 013304 006300                           asl    r0
    1733 013306 022700  000074                   cmp    #74,r0
    1734 013312 002416                           blt    90$
    1735 013314 016737  001404  177100           mov    pcbb+2,@#177100
    1736 013322 016737  001400  177102           mov    pcbb+4,@#177102
    1737 013330 012737  014736  177104           mov    #mltlist,@#177104
    1738 013336 112737  000000  177107           movb   #0,@#177107
    1739 013344 110037  177106                   movb   r0,@#177106
    1740                                90$:
    1741 013350 012600                           mov    (sp)+,r0
    1742 013352 000207                           rts    pc
    1743                                ;
    1744                                ; putmlt: put udbb multicast list to unibus, address in pcbb must be valid
    1745                                ;
    1746                                putmlt:
    1747 013354 010046                           mov    r0,-(sp)
    1748 013356 026767  001350  001350           cmp    mltreq,mltlen
    1749 013364 003010                           bgt    10$
    1750 013366 016700  001342                   mov    mltlen,r0
    1751 013372 066700  001336                   add    mltlen,r0
    1752 013376 066700  001332                   add    mltlen,r0
    1753 013402 006300                           asl    r0
    1754 013404 000410                           br     20$
    1755                                10$:
    1756 013406 016700  001320                   mov    mltreq,r0
    1757 013412 066700  001314                   add    mltreq,r0
    1758 013416 066700  001310                   add    mltreq,r0
    1759 013422 006300                           asl    r0
    1760 013424 000400                           br     20$
    1761                                20$:
    1762 013426 022700  000074                   cmp    #74,r0
    1763 013432 002416                           blt    90$
    1764 013434 016737  001264  177100           mov    pcbb+2,@#177100
    1765 013442 016737  001260  177102           mov    pcbb+4,@#177102
    1766 013450 012737  014736  177104           mov    #mltlist,@#177104
    1767 013456 112737  000001  177107           movb   #1,@#177107
    1768 013464 110037  177106                   movb   r0,@#177106
    1769                                90$:
    1770 013470 012600                           mov    (sp)+,r0
    1771 013472 000207                           rts    pc
    1772                                ;
    1773                                ; set mode bits into chip
    1774                                ;
    1775                                setmodebits:
    1776 013474 032767  000004  001060           bit    #4,modebits
    1777 013502 001407                           beq    10$
    1778                                         xubl   setlpbk,40
       1 013504 004767  176466                   jsr    pc,xubl
       2 013510 012046                           .word  setlpbk                                ; setlpbk  : from address - write to spi
       3 013512 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 013514 000000                           .word                                  ;   : to address - read from spi
       5 013516 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
    1779 013520 000407                           br     19$
    1780                                10$:
    1781                                         xubl   clrlpbk,40
       1 013522 004767  176450                   jsr    pc,xubl
       2 013526 012052                           .word  clrlpbk                                ; clrlpbk  : from address - write to spi
       3 013530 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 013532 000000                           .word                                  ;   : to address - read from spi
       5 013534 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
    1782 013536 000400                           br     19$
    1783                                19$:
    1784                                ;
    1785 013540 032767  100000  001014           bit    #100000,modebits
    1786 013546 001407                           beq    20$
    1787                                         xubl   snotmeen,40
       1 013550 004767  176422                   jsr    pc,xubl
       2 013554 012056                           .word  snotmeen                                ; snotmeen  : from address - write to spi
       3 013556 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 013560 000000                           .word                                  ;   : to address - read from spi
       5 013562 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
    1788 013564 000407                           br     29$
    1789                                20$:
    1790                                         xubl   cnotmeen,40
       1 013566 004767  176404                   jsr    pc,xubl
       2 013572 012062                           .word  cnotmeen                                ; cnotmeen  : from address - write to spi
       3 013574 000040                           .word  40                               ; 40 : from length in bits, multiple of 8 (lower three bits are ignored)
       4 013576 000000                           .word                                  ;   : to address - read from spi
       5 013600 000000                           .word                                 ;  : to length in bits, multiple of 8 (lower three bits are ignored)
    1791 013602 000400                           br     29$
    1792                                29$:
    1793                                ;
    1794 013604 032767  020000  000750           bit    #20000,modebits
    1795 013612 001404                           beq    30$
    1796 013614 012767  000001  001026           mov    #1,drdc
    1797 013622 000403                           br     39$
    1798                                30$:
    1799 013624 005067  001020                   clr    drdc
    1800 013630 000400                           br     39$
    1801                                39$:
    1802 013632 000207                           rts    pc
    1803                                ;
    1804                                ; print an ascii zero terminated string, string directly follows jsr pc insn
    1805                                ;
    1806                                xasciz:
    1807 013634 010146                           mov r1,-(sp)                  ; push r1
    1808 013636 016601  000002                   mov 2(sp),r1                  ; set r1 to return address
    1809                                10$:
    1810 013642 105737  177564                   tstb @#177564                 ; output busy?
    1811 013646 100375                           bpl 10$                       ; yes, spin
    1812 013650 105711                           tstb (r1)                     ; byte zero?
    1813 013652 001403                           beq 20$                       ; yes, exit
    1814 013654 112137  177566                   movb (r1)+,@#177566           ; move byte into transmit register
    1815 013660 000770                           br 10$                        ; next byte
    1816                                20$:
    1817 013662 005201                           inc r1
    1818 013664 032701  000001                   bit #1,r1                     ; check if even address
    1819 013670 001401                           beq 30$                       ; yes
    1820 013672 005201                           inc r1                        ; no - move to next byte
    1821                                30$:
    1822 013674 010166  000002                   mov r1,2(sp)                  ; correct stored return address
    1823 013700 012601                           mov (sp)+,r1                  ; pop r1
    1824 013702 000207                           rts pc                        ; return to corrected pc
    1825                                ;
    1826                                ; print a variable number of hex bytes, separated by space
    1827                                ;
    1828                                xbhx:
    1829 013704 010546                           mov r5,-(sp)
    1830 013706 016605  000002                   mov 2(sp),r5
    1831 013712 062766  000004  000002           add #4,2(sp)
    1832 013720 010046                           mov r0,-(sp)
    1833 013722 010146                           mov r1,-(sp)
    1834 013724 010246                           mov r2,-(sp)
    1835 013726 016502  000000                   mov 0(r5),r2
    1836 013732 016500  000002                   mov 2(r5),r0
    1837                                10$:
    1838 013736 112201                           movb (r2)+,r1
    1839 013740 004767  000200                   jsr pc,bhexb
    1840 013744 005300                           dec r0
    1841 013746 005700                           tst r0
    1842 013750 001407                           beq 30$
    1843                                20$:
    1844 013752 105737  177564                   tstb @#177564                 ; output busy?
    1845 013756 100375                           bpl 20$                       ; yes, spin
    1846 013760 112737  000040  177566           movb #40,@#177566             ; move byte into transmit register
    1847 013766 000763                           br 10$
    1848                                30$:
    1849 013770 012602                           mov (sp)+,r2
    1850 013772 012601                           mov (sp)+,r1
    1851 013774 012600                           mov (sp)+,r0
    1852 013776 012605                           mov (sp)+,r5
    1853 014000 000207                           rts pc
    1854                                ;
    1855                                ; print a variable number of hex words, separated by space
    1856                                ;
    1857                                xwhx:
    1858 014002 010546                           mov r5,-(sp)
    1859 014004 016605  000002                   mov 2(sp),r5
    1860 014010 062766  000004  000002           add #4,2(sp)
    1861 014016 010046                           mov r0,-(sp)
    1862 014020 010146                           mov r1,-(sp)
    1863 014022 010246                           mov r2,-(sp)
    1864 014024 016502  000000                   mov 0(r5),r2
    1865 014030 016500  000002                   mov 2(r5),r0
    1866                                10$:
    1867 014034 012201                           mov (r2)+,r1                  ; load the word
    1868 014036 000301                           swab r1                       ; high byte first
    1869 014040 004767  000100                   jsr pc,bhexb
    1870 014044 000301                           swab r1                       ; swap to low byte
    1871 014046 004767  000072                   jsr pc,bhexb
    1872 014052 005300                           dec r0                        ; count in bytes, decrement twice
    1873 014054 005700                           tst r0                        ; but check for zero anyway - dont want 65536 words, ever
    1874 014056 001412                           beq 30$
    1875 014060 005300                           dec r0
    1876 014062 005700                           tst r0
    1877 014064 001407                           beq 30$
    1878                                20$:
    1879 014066 105737  177564                   tstb @#177564                 ; output busy?
    1880 014072 100375                           bpl 20$                       ; yes, spin
    1881 014074 112737  000040  177566           movb #40,@#177566             ; move byte into transmit register
    1882 014102 000754                           br 10$
    1883                                30$:
    1884 014104 012602                           mov (sp)+,r2
    1885 014106 012601                           mov (sp)+,r1
    1886 014110 012600                           mov (sp)+,r0
    1887 014112 012605                           mov (sp)+,r5
    1888 014114 000207                           rts pc
    1889                                ;
    1890                                ; print an ascii zero terminated string, r1 has pointer to string
    1891                                ;
    1892                                basciz:
    1893 014116 010146                           mov r1,-(sp)
    1894                                10$:
    1895 014120 105737  177564                   tstb @#177564                 ; output busy?
    1896 014124 100375                           bpl 10$                       ; yes, spin
    1897 014126 105711                           tstb (r1)                     ; byte zero?
    1898 014130 001403                           beq 20$                       ; yes, exit
    1899 014132 112137  177566                   movb (r1)+,@#177566           ; move byte into transmit register
    1900 014136 000770                           br 10$                        ; next byte
    1901                                20$:
    1902 014140 012601                           mov (sp)+,r1
    1903 014142 000207                           rts pc                        ; exit
    1904                                ;
    1905                                ; print a hex byte, contained in r1 lower byte
    1906                                ;
    1907                                bhexb:
    1908 014144 010046                           mov r0,-(sp)
    1909 014146 010146                           mov r1,-(sp)
    1910 014150 010100                           mov r1,r0
    1911 014152 006200                           asr r0
    1912 014154 006200                           asr r0
    1913 014156 006200                           asr r0
    1914 014160 006200                           asr r0
    1915 014162 042700  177760                   bic #177760,r0
    1916 014166 062700  014530                   add #hextab,r0
    1917                                10$:
    1918 014172 105737  177564                   tstb @#177564                 ; output busy?
    1919 014176 100375                           bpl 10$                       ; yes, spin
    1920 014200 111037  177566                   movb (r0),@#177566            ; move byte into transmit register
    1921 014204 042701  177760                   bic #177760,r1
    1922 014210 062701  014530                   add #hextab,r1
    1923                                20$:
    1924 014214 105737  177564                   tstb @#177564                 ; output busy?
    1925 014220 100375                           bpl 20$                       ; yes, spin
    1926 014222 111137  177566                   movb (r1),@#177566            ; move byte into transmit register
    1927 014226 012601                           mov (sp)+,r1
    1928 014230 012600                           mov (sp)+,r0
    1929 014232 000207                           rts pc
    1930                                ;
    1931                                ; print two hex bytes separated by space, followed by crlf. Input in bytes pointed to by r1
    1932                                ;
    1933                                bhx2:
    1934 014234 010046                           mov r0,-(sp)
    1935 014236 012700  000002                   mov #2,r0
    1936 014242 004767  000004                   jsr pc,bhx
    1937 014246 012600                           mov (sp)+,r0
    1938 014250 000207                           rts pc
    1939                                ;
    1940                                ; print a variable number of hex bytes, separated by space, followed by crlf. Input in bytes pointed to by r1, r0 has length of buffer.
    1941                                ;
    1942                                bhx:
    1943 014252 010146                           mov r1,-(sp)
    1944 014254 010246                           mov r2,-(sp)
    1945 014256 010102                           mov r1,r2
    1946                                10$:
    1947 014260 112201                           movb (r2)+,r1
    1948 014262 004767  177656                   jsr pc,bhexb
    1949 014266 005300                           dec r0
    1950 014270 005700                           tst r0
    1951 014272 001407                           beq 30$
    1952                                20$:
    1953 014274 105737  177564                   tstb @#177564                 ; output busy?
    1954 014300 100375                           bpl 20$                       ; yes, spin
    1955 014302 112737  000040  177566           movb #40,@#177566             ; move byte into transmit register
    1956 014310 000763                           br 10$
    1957                                30$:
    1958 014312 012602                           mov (sp)+,r2
    1959 014314 012601                           mov (sp)+,r1
    1960 014316 000207                           rts pc
    1961                                ;
    1962                                ; init - clear variables and status registers to their initial values
    1963                                ;
    1964                                init:
    1965 014320 005067  000224                   clr    running
    1966 014324 005067  000224                   clr    flen
    1967 014330 005067  000314                   clr    drdc
    1968 014334 005067  000222                   clr    modebits
    1969                                
    1970 014340 005067  000220                   clr    tdrbh
    1971 014344 005067  000216                   clr    tdrbl
    1972 014350 005067  000214                   clr    telen
    1973 014354 005067  000212                   clr    trlen
    1974 014360 005067  000214                   clr    rdrbh
    1975 014364 005067  000212                   clr    rdrbl
    1976 014370 005067  000210                   clr    relen
    1977 014374 005067  000206                   clr    rrlen
    1978                                
    1979 014400 005067  000224                   clr    xcurrl
    1980 014404 005067  000216                   clr    xcurrh
    1981 014410 005067  000204                   clr    rcurrl
    1982 014414 005067  000176                   clr    rcurrh
    1983                                
    1984 014420 012737  000000  174510           mov    #0,@#174510               ; pcsr0 - clear any pending interrupts
    1985 014426 012737  000000  174512           mov    #0,@#174512               ; pcsr1 - state=reset
    1986 014434 012737  000000  174514           mov    #0,@#174514               ; pcsr2
    1987 014442 012737  000000  174516           mov    #0,@#174516               ; pcsr3
    1988                                
    1989 014450 000207                           rts    pc
    1990                                ;
    1991                                ; waitabit - wait loop for 65535 cycles
    1992                                ;
    1993                                waitabit:
    1994 014452 010046                           mov r0,-(sp)
    1995 014454 005000                           clr r0
    1996                                10$:
    1997 014456 005200                           inc r0
    1998 014460 001376                           bne 10$
    1999 014462 012600                           mov (sp)+,r0
    2000 014464 000207                           rts pc
    2001                                ;
    2002                                ; dog - timer service routine, watchdog timer
    2003                                ;
    2004                                dog:
    2005 014466 005267  000066                   inc dogtick
    2006 014472 022767  001130  000060           cmp #600.,dogtick             ; assuming 60hz clock, 10 seconds
    2007 014500 003012                           bgt 90$
    2008                                         xascil <dog barks>
       1 014502 004767  177126                   jsr    pc,xasciz
       2 014506    144     157     147           .ascii /dog barks/
         014511    040     142     141  
         014514    162     153     163  
       3 014517    015     012     000           .asciz <15><12>
       4                                         .even
    2009 014522 000167  164252                   jmp t45
    2010                                90$:
    2011 014526 000002                           rti
    2012                                ;
    2013                                ; data
    2014                                ;
    2015 014530    060     061     062  hextab:  .ascii /0123456789abcdef/
         014533    063     064     065  
         014536    066     067     070  
         014541    071     141     142  
         014544    143     144     145  
         014547    146                  
    2016                                
    2017                                         .even
    2018 014550 000000                  running: .word 0                       ; if nonzero, then recv/xmit is active
    2019 014552 000000                  npp:     .word 0                       ; the next packet pointer in the encx24j600
    2020 014554 000000                  flen:    .word 0                       ; frame length in the encx24j600 received frame header
    2021 014556 000000                  p0cmd:   .word 0                       ; masked off value of the pcsr0
    2022                                ;
    2023 014560 000000                  dogtick: .word 0                       ; watchdog timer value
    2024                                ;
    2025 014562 000000                  modebits:.word 0                       ; fc14/15 format mode bits word
    2026                                ;
    2027 014564 000000                  tdrbh:   .word 0
    2028 014566 000000                  tdrbl:   .word 0
    2029 014570 000000                  telen:   .word 0
    2030 014572 000000                  trlen:   .word 0
    2031 014574 000000                  tdrmxh:  .word 0
    2032 014576 000000                  tdrmxl:  .word 0
    2033                                
    2034 014600 000000                  rdrbh:   .word 0
    2035 014602 000000                  rdrbl:   .word 0
    2036 014604 000000                  relen:   .word 0
    2037 014606 000000                  rrlen:   .word 0
    2038 014610 000000                  rdrmxh:  .word 0
    2039 014612 000000                  rdrmxl:  .word 0
    2040                                ;
    2041 014614 000000                  xplrun:  .word 0                       ; xmitpl status, between start and end
    2042                                ;
    2043 014616 000000                  rcurrh:  .word 0
    2044 014620 000000                  rcurrl:  .word 0
    2045                                ;
    2046 014622 000000                  rnexth:  .word 0
    2047 014624 000000                  rnextl:  .word 0
    2048                                ;
    2049 014626 000000                  xcurrh:  .word 0                       ; xmit current address, h
    2050 014630 000000                  xcurrl:  .word 0                       ; xmit current address, l
    2051                                ;
    2052 014632 000000                  xnexth:  .word 0                       ; xmit next address, h
    2053 014634 000000                  xnextl:  .word 0                       ; xmit next address, l
    2054                                ;
    2055 014636 000000                  xolddh:  .word 0                       ; xmit old address, h
    2056 014640 000000                  xolddl:  .word 0                       ; xmit old address, l
    2057                                ;
    2058 014642 000000                  xmitlen: .word 0                       ; current frame length
    2059                                ;
    2060 014644 000000                  xmitmch: .word 0                       ; xmit frame should have match bit set in enp buffer
    2061                                ;
    2062 014646 000000                  mlen:    .word 0                       ; received message length placed in buffer
    2063                                ;
    2064 014650 000000                  drdc:    .word 0                       ; disable recv data chaining
    2065                                ;
    2066 014652 000000  000000  000000  xdre:    .word 0,0,0,0,0,0,0,0         ; work area, transmit descriptor (curr+next)
         014660 000000  000000  000000  
         014666 000000  000000          
    2067                                ;
    2068 014672 000000  000000  000000  rdre:    .word 0,0,0,0,0,0,0,0         ; work area, receive descriptor (curr+next)
         014700 000000  000000  000000  
         014706 000000  000000          
    2069                                ;
    2070 014712 000000                  recvdw:  .word 0                       ; flag receive did work
    2071 014714 000000                  xmitdw:  .word 0                       ; flag transmit did work
    2072                                ;
    2073 014716 000000                  pcbbl:   .word 0
    2074 014720 000000                  pcbbh:   .word 0
    2075 014722 000000  000000  000000  pcbb:    .word 0,0,0,0
         014730 000000                  
    2076                                ;
    2077 014732 000000                  mltreq:  .word 0
    2078 014734 000000                  mltlen:  .word 0
    2079 014736                         mltlist: .blkw 36
    2080                                ;
    2081 015032 000000                  udbblen: .word 0
    2082 015034 000000  000000  000000  udbb:    .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0             ; 32 words
         015042 000000  000000  000000  
         015050 000000  000000  000000  
         015056 000000  000000  000000  
         015064 000000  000000  000000  
         015072 000000                  
    2083 015074 000000  000000  000000           .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
         015102 000000  000000  000000  
         015110 000000  000000  000000  
         015116 000000  000000  000000  
         015124 000000  000000  000000  
         015132 000000                  
    2084                                ;
    2085 015134    000                  pktcnt:  .byte 0
    2086 015135    000                           .even
    2087 015136 000000                  workw:   .word 0
    2088                                         .even
    2089 015140 000000  000000  000000  buf:     .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
         015146 000000  000000  000000  
         015154 000000  000000  000000  
         015162 000000  000000  000000  
         015170 000000  000000  000000  
         015176 000000  000000  000000  
         015204 000000  000000          
    2090 015210 000000  000000  000000           .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
         015216 000000  000000  000000  
         015224 000000  000000  000000  
         015232 000000  000000  000000  
         015240 000000  000000  000000  
         015246 000000  000000  000000  
         015254 000000  000000          
    2091 015260 000000  000000  000000           .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
         015266 000000  000000  000000  
         015274 000000  000000  000000  
         015302 000000  000000  000000  
         015310 000000  000000  000000  
         015316 000000  000000  000000  
         015324 000000  000000          
    2091                                
