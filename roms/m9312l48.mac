         .title m9312l47 - low rom - show modelcode, control registers/controllers, then boot

;--
;-- Copyright (c) 2008-2021 Sytse van Slooten
;--
;-- Permission is hereby granted to any person obtaining a copy of these VHDL source files and
;-- other language source files and associated documentation files ("the materials") to use
;-- these materials solely for personal, non-commercial purposes.
;-- You are also granted permission to make changes to the materials, on the condition that this
;-- copyright notice is retained unchanged.
;--
;-- The materials are distributed in the hope that they will be useful, but WITHOUT ANY WARRANTY;
;-- without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
;--
;
; $Revision$
;
; general purpose register definitions
;
r0       = %0
r1       = %1
r2       = %2
r3       = %3
r4       = %4
r5       = %5
r6       = %6
r7       = %7
sp       = %6
pc       = %7

         .asect
         .=165000
         base     =.
         .word 0,0,0,0
prtoct:  jmp   @#173004
prtascz: jmp   @#173010
         .=base+20
;
; delay a bit, give the terminal (if it's there) some time to boot
;
         clr   r2
10$:
         inc   r2
         bne   10$
;
; hello world
;
         mov   #hello,r2
         mov   pc,r1
         br    prtascz
;
; decode cpu modelcode, should be in kernel r0 after reset
;
mcode:
         mov   #47.,r2
10$:
         inc   r2
         cmp   r0,#10.
         blt   20$
         sub   #10.,r0
         br    10$
20$:
         add   #48.,r0
         tstb  @#177564
         bpl   .-4
         movb  r2,@#177566
         tstb  @#177564
         bpl   .-4
         movb  r0,@#177566
;
; check for fpu
;
         mov   #1000,sp
         mov   #60$,@#10
         clr   @#12
         setd
         mov   #fpu,r2
         mov   pc,r1
         br    prtascz
60$:
;
;
;
         mov   #crlf,r2
         mov   pc,r1
         br    prtascz
;
; list cr
;
listcr:
         clr   r4
         mov   #60$,@#4
         clr   @#6
10$:
         clr   r5
20$:
         mov   #1000,sp      ; reset sp
         mov   adrtab(r5),r4 ; load address
         tst   r4            ; check for end of table
         beq   80$           ; end of table, done
         tst   (r4)          ; check address
         mov   r4,r0         ; if we continue here, the address exists
         mov   pc,r1         ; print the address
         br    prtoct
         mov   #sep,r2       ; print separator
         mov   pc,r1
         br    prtascz
         mov   adrtab+2(r5),r2   ; load pointer to name
         mov   pc,r1
         br    prtascz
         mov   #crlf,r2      ; next line
         mov   pc,r1
         br    prtascz
60$:
         add   #4,r5
         br    20$
80$:
         jmp   @#173000
;
; data
;
         .even

hello:   .ascii / /<15><12>
         .asciz /Hello, world [t48]: cpu 11/<57>
fpu:     .asciz / fpu/
crlf:    .asciz <15><12>
sep:     .asciz / - /
tsep:    .asciz /  /
ssep:    .asciz /         /

          .even
adrtab:
          .word 171000,ad        ; mincad
          .word 171020,kw0       ; minckw 0
          .word 171024,kw1       ; minckw 1
          .word 171060,aa0       ; mincaa 0
          .word 171070,aa1       ; mincaa 1
          .word 171100,aa2       ; mincaa 2
          .word 171110,aa3       ; mincaa 3
          .word 171160,di0       ; mincdi 0
          .word 171170,di1       ; mincdi 1
          .word 171200,di2       ; mincdi 2
          .word 171210,di3       ; mincdi 3
          .word 171260,do0       ; mincdo 0
          .word 171264,do1       ; mincdo 1
          .word 171270,do2       ; mincdo 2
          .word 171274,do3       ; mincdo 3
          .word 177400,trk
          .word 174400,trl
          .word 0,0
;
trl:     .asciz /rl/
trk:     .asciz /rk/
ad:      .asciz /mncad/
kw0:     .asciz /mnckw0/
kw1:     .asciz /mnckw1/
aa0:     .asciz /mncaa0/
aa1:     .asciz /mncaa1/
aa2:     .asciz /mncaa2/
aa3:     .asciz /mncaa3/
di0:     .asciz /mncdi0/
di1:     .asciz /mncdi1/
di2:     .asciz /mncdi2/
di3:     .asciz /mncdi3/
do0:     .asciz /mncdo0/
do1:     .asciz /mncdo1/
do2:     .asciz /mncdo2/
do3:     .asciz /mncdo3/


